import { Component, ElementRef, EventEmitter, ViewChild, ViewContainerRef, Output } from '@angular/core';
import { Subject } from 'rxjs/Subject';
import { debounceTime } from 'rxjs/operator/debounceTime';
import { NguiMap } from '../services/ngui-map';
import { NguiMapComponent } from './ngui-map.component';
const /** @type {?} */ INPUTS = [
    'content', 'disableAutoPan', 'maxWidth', 'pixelOffset', 'position', 'zIndex', 'options'
];
const /** @type {?} */ OUTPUTS = [
    'closeclick', 'content_changed', 'domready', 'position_changed', 'zindex_changed'
];
export class InfoWindow {
    /**
     * @param {?} elementRef
     * @param {?} nguiMap
     * @param {?} nguiMapComponent
     */
    constructor(elementRef, nguiMap, nguiMapComponent) {
        this.elementRef = elementRef;
        this.nguiMap = nguiMap;
        this.nguiMapComponent = nguiMapComponent;
        this.initialized$ = new EventEmitter();
        this.objectOptions = {};
        this.inputChanges$ = new Subject();
        this.elementRef.nativeElement.style.display = 'none';
        OUTPUTS.forEach(output => this[output] = new EventEmitter());
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.nguiMapComponent.mapIdledOnce) {
            this.initialize();
        }
        else {
            this.nguiMapComponent.mapReady$.subscribe(map => this.initialize());
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.inputChanges$.next(changes);
    }
    /**
     * @return {?}
     */
    initialize() {
        this.objectOptions = this.nguiMapComponent.optionBuilder.googlizeAllInputs(INPUTS, this);
        this.infoWindow = new google.maps.InfoWindow(this.objectOptions);
        this.infoWindow['mapObjectName'] = 'InfoWindow';
        // register infoWindow ids to NguiMap, so that it can be opened by id
        if (this.elementRef.nativeElement.id) {
            this.nguiMapComponent.infoWindows[this.elementRef.nativeElement.id] = this;
        }
        else {
            console.error('An InfoWindow must have an id. e.g. id="detail"');
        }
        // set google events listeners and emits to this outputs listeners
        this.nguiMap.setObjectEvents(OUTPUTS, this, 'infoWindow');
        // update object when input changes
        debounceTime.call(this.inputChanges$, 1000)
            .subscribe((changes) => this.nguiMap.updateGoogleObject(this.infoWindow, changes));
        this.nguiMapComponent.addToMapObjectGroup('InfoWindow', this.infoWindow);
        this.initialized$.emit(this.infoWindow);
    }
    /**
     * @param {?} anchor
     * @return {?}
     */
    open(anchor) {
        // set content and open it
        this.infoWindow.setContent(this.template.element.nativeElement);
        this.infoWindow.open(this.nguiMapComponent.map, anchor);
    }
    /**
     * @return {?}
     */
    close() {
        // check if infoWindow exists, and closes it
        if (this.infoWindow)
            this.infoWindow.close();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.inputChanges$.complete();
        if (this.infoWindow) {
            this.nguiMap.clearObjectEvents(OUTPUTS, this, 'infoWindow');
            delete this.infoWindow;
        }
    }
}
InfoWindow.decorators = [
    { type: Component, args: [{
                selector: 'ngui-map > info-window',
                inputs: INPUTS,
                outputs: OUTPUTS,
                template: `<div #template><ng-content></ng-content></div>`,
            },] },
];
/**
 * @nocollapse
 */
InfoWindow.ctorParameters = () => [
    { type: ElementRef, },
    { type: NguiMap, },
    { type: NguiMapComponent, },
];
InfoWindow.propDecorators = {
    'initialized$': [{ type: Output },],
    'template': [{ type: ViewChild, args: ['template', { read: ViewContainerRef },] },],
};
function InfoWindow_tsickle_Closure_declarations() {
    /** @type {?} */
    InfoWindow.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    InfoWindow.ctorParameters;
    /** @type {?} */
    InfoWindow.propDecorators;
    /** @type {?} */
    InfoWindow.prototype.content;
    /** @type {?} */
    InfoWindow.prototype.disableAutoPan;
    /** @type {?} */
    InfoWindow.prototype.maxWidth;
    /** @type {?} */
    InfoWindow.prototype.pixelOffset;
    /** @type {?} */
    InfoWindow.prototype.position;
    /** @type {?} */
    InfoWindow.prototype.zIndex;
    /** @type {?} */
    InfoWindow.prototype.options;
    /** @type {?} */
    InfoWindow.prototype.closeclick;
    /** @type {?} */
    InfoWindow.prototype.content_changed;
    /** @type {?} */
    InfoWindow.prototype.domready;
    /** @type {?} */
    InfoWindow.prototype.position_changed;
    /** @type {?} */
    InfoWindow.prototype.zindex_changed;
    /** @type {?} */
    InfoWindow.prototype.initialized$;
    /** @type {?} */
    InfoWindow.prototype.infoWindow;
    /** @type {?} */
    InfoWindow.prototype.objectOptions;
    /** @type {?} */
    InfoWindow.prototype.inputChanges$;
    /** @type {?} */
    InfoWindow.prototype.template;
    /** @type {?} */
    InfoWindow.prototype.elementRef;
    /** @type {?} */
    InfoWindow.prototype.nguiMap;
    /** @type {?} */
    InfoWindow.prototype.nguiMapComponent;
}
//# sourceMappingURL=info-window.js.map