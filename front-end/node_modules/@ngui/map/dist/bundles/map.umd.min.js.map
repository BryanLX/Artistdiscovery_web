{"version":3,"file":"map.umd.min.js","sources":["~/@ngui/map/tmp/services/util.ts","~/@ngui/map/tmp/directives/base-map-directive.ts","~/@ngui/map/tmp/services/option-builder.ts","~/@ngui/map/tmp/services/navigator-geolocation.ts","~/@ngui/map/tmp/services/config.ts","~/@ngui/map/tmp/services/api-loader.ts","~/@ngui/map/tmp/services/geo-coder.ts","~/@ngui/map/tmp/services/ngui-map.ts","~/@ngui/map/tmp/components/ngui-map.component.ts","~/@ngui/map/tmp/directives/bicycling-layer.ts","~/@ngui/map/tmp/components/info-window.ts","~/@ngui/map/tmp/components/custom-marker.ts","~/@ngui/map/tmp/directives/circle.ts","~/@ngui/map/tmp/directives/data-layer.ts","~/@ngui/map/tmp/directives/directions-renderer.ts","~/@ngui/map/tmp/directives/drawing-manager.ts","~/@ngui/map/tmp/directives/ground-overlay.ts","~/@ngui/map/tmp/directives/heatmap-layer.ts","~/@ngui/map/tmp/directives/kml-layer.ts","~/@ngui/map/tmp/directives/marker.ts","~/@ngui/map/tmp/directives/places-auto-complete.ts","~/@ngui/map/tmp/directives/polygon.ts","~/@ngui/map/tmp/directives/polyline.ts","~/@ngui/map/tmp/directives/street-view-panorama.ts","~/@ngui/map/tmp/directives/traffic-layer.ts","~/@ngui/map/tmp/directives/transit-layer.ts","~/@ngui/map/tmp/ngui-map.module.ts"],"sourcesContent":["\n/**\n * return json string from json-like string\n * @param {?} str\n * @return {?}\n */\nexport function jsonize(str: string): string {\n  try {       // if parsable already, return as it is\n    JSON.parse(str);\n    return str;\n  } catch ( /** @type {?} */e) { // if not parsable, change little\n    return str\n      .replace(/([\\$\\w]+)\\s*:/g, // wrap keys without double quote\n        function(_: any, $1: any) {\n          return '\"' + $1 + '\":';\n        }\n      )\n      .replace(/'([^']+)'/g,   // replacing single quote to double quote\n        function(_: any, $1: any) {\n          return '\"' + $1 + '\"';\n        }\n      );\n  }\n}\n/**\n * Returns string to an object by using JSON.parse()\n * @param {?} input\n * @return {?}\n */\nexport function getJSON(input: any): any {\n  if (typeof input === 'string') {\n    const /** @type {?} */ re = /^[\\+\\-]?[0-9\\.]+,[ ]*\\ ?[\\+\\-]?[0-9\\.]+$/; // lat,lng\n    if (input.match(re)) {\n      input = '[' + input + ']';\n    }\n    return JSON.parse(jsonize(input));\n  } else {\n    return input;\n  }\n}\n\n/**\n * json type definition\n */\n/* tslint:disable */\n//interface IJsonArray extends Array<string|number|boolean|Date|IJson|IJsonArray> { }\nexport interface IJson {\n  //[x: string]: string|number|boolean|Date|IJson|IJsonArray;\n  [x: string]: string|number|boolean|Date|IJson|Array<string|number|boolean|Date|IJson>;\n}\n/**\n * Returns camel-cased from string 'Foo Bar' to 'fooBar'\n * @param {?} str\n * @return {?}\n */\nexport function toCamelCase(str: string): string {\n  return str.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function(letter, index) {\n    return index === 0 ? letter.toLowerCase() : letter.toUpperCase();\n  }).replace(/\\s+/g, '');\n}\n/**\n * @return {?}\n */\nexport function isMapsApiLoaded() {\n  return typeof google === 'object' && typeof google.maps === 'object';\n}\n","import {EventEmitter, SimpleChanges, Output, OnInit, OnChanges, OnDestroy} from '@angular/core';\n\nimport { OptionBuilder } from '../services/option-builder';\nimport { NguiMap } from '../services/ngui-map';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n/**\n * @abstract\n */\nexport abstract class BaseMapDirective implements OnInit, OnChanges, OnDestroy {\n  // this should be redefined on each childr directive\n   initialized$: EventEmitter<any> = new EventEmitter();\npublic mapObject: any;\npublic objectOptions: any;\npublic nguiMap: NguiMap;\npublic optionBuilder: OptionBuilder;\npublic libraryName: string;\n  protected _subscriptions = [];\n/**\n * @param {?} nguiMapComponent\n * @param {?} mapObjectName\n * @param {?} inputs\n * @param {?} outputs\n */\nconstructor(\n    protected nguiMapComponent: NguiMapComponent,\npublic    mapObjectName: string,\n    protected inputs: string[],\n    protected outputs: string[]\n  ) {\n    this.nguiMap = this.nguiMapComponent['nguiMap'];\n    this.optionBuilder = this.nguiMapComponent['optionBuilder'];\n    // all outputs must be initialized\n    this.outputs.forEach(output => this[output] = new EventEmitter());\n    this.mapObjectName = mapObjectName;\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.nguiMapComponent.mapIdledOnce) { // map is ready already\n      this.initialize();\n    } else {\n      this.nguiMapComponent.mapReady$.subscribe(map => this.initialize());\n    }\n  }\n/**\n * @return {?}\n */\ninitialize(): void {\n    this.objectOptions = this.optionBuilder.googlizeAllInputs(this.inputs, this);\n\n\n    // will be set after geocoded\n    typeof this.objectOptions.position === 'string' && (delete this.objectOptions.position);\n    typeof this.objectOptions.center === 'string' && (delete this.objectOptions.center);\n\n    // noinspection TypeScriptUnresolvedFunction\n    if (this.libraryName) {\n      this.mapObject = new google.maps[this.libraryName][this.mapObjectName](this.objectOptions);\n    } else {\n      this.mapObject = new google.maps[this.mapObjectName](this.objectOptions);\n    }\n    this.mapObject.setMap(this.nguiMapComponent.map);\n    this.mapObject['mapObjectName'] = this.mapObjectName;\n    this.mapObject['nguiMapComponent'] = this.nguiMapComponent;\n\n    // set google events listeners and emits to this outputs listeners\n    this.nguiMap.setObjectEvents(this.outputs, this, 'mapObject');\n\n    this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName, this.mapObject);\n    this.initialized$.emit(this.mapObject);\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n\n    this.nguiMap.updateGoogleObject(this.mapObject, changes);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._subscriptions.map(subscription => subscription.unsubscribe());\n    this.nguiMapComponent.removeFromMapObjectGroup(this.mapObjectName, this.mapObject);\n\n    if (this.mapObject) {\n      this.nguiMap.clearObjectEvents(this.outputs, this, 'mapObject');\n    }\n  }\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'initialized$': [{ type: Output },],\n};\n}\n\nfunction BaseMapDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nBaseMapDirective.propDecorators;\n/** @type {?} */\nBaseMapDirective.prototype.initialized$;\n/** @type {?} */\nBaseMapDirective.prototype.mapObject;\n/** @type {?} */\nBaseMapDirective.prototype.objectOptions;\n/** @type {?} */\nBaseMapDirective.prototype.nguiMap;\n/** @type {?} */\nBaseMapDirective.prototype.optionBuilder;\n/** @type {?} */\nBaseMapDirective.prototype.libraryName;\n/** @type {?} */\nBaseMapDirective.prototype._subscriptions;\n/** @type {?} */\nBaseMapDirective.prototype.nguiMapComponent;\n/** @type {?} */\nBaseMapDirective.prototype.mapObjectName;\n/** @type {?} */\nBaseMapDirective.prototype.inputs;\n/** @type {?} */\nBaseMapDirective.prototype.outputs;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { getJSON, IJson } from './util';\n/**\n * change any object to google object options\n * e.g. [1,2] -> new google.maps.LatLng(1,2);\n */\nexport class OptionBuilder {\n/**\n * @param {?} definedInputs\n * @param {?} userInputs\n * @return {?}\n */\ngooglizeAllInputs(definedInputs: string[], userInputs: any) {\n    let /** @type {?} */ options: any = {};\n\n    // if options given from user, only take options and ignore other inputs\n    if (userInputs.options) {\n      console.log('userInputs.options .................', userInputs.options);\n      options = userInputs.options;\n      if (!this.onlyOptionsGiven(definedInputs, userInputs)) {\n        console.error('when \"options\" are used, other options are ignored');\n      }\n    } else { // if options not given, process all user inputs\n      definedInputs.forEach(input => {\n        if (userInputs[input] !== undefined)  {\n          options[input] = this.googlize(userInputs[input], {key: input});\n        }\n      });\n    }\n    return options;\n  }\n/**\n * @param {?} inputs\n * @param {?=} options\n * @return {?}\n */\ngooglizeMultiple(inputs: any[], options?: IJson): any {\n    options =  options || {};\n    for (let /** @type {?} */ key in inputs) {\n      let /** @type {?} */ val = inputs[key];\n      // (non-strings are fully converted)\n      if (typeof val !== 'string') {\n        options[key] = val;\n      } // sometimes '0' needed to stay as it is\n      else if (!(options['doNotConverStringToNumber'] && val.match(/^[0-9]+$/))) {\n        options[key] = this.googlize(val, {key: key});\n      }\n    } // for(var key in attrs)\n    return options;\n  }\n/**\n * @param {?} input\n * @param {?=} options\n * @return {?}\n */\ngooglize(input: any, options?: IJson): any {\n    options = options || {};\n    let /** @type {?} */ output: any = input;\n    if (typeof input === 'string') { // convert string to a google object\n      if (input === 'false') {\n        output = false;\n      } else if (input === '0') {\n        output = 0;\n      } else {\n        output =\n          // -> googlize -> getJsonParsed -> googlizeMultiple -> googlize until all elements are parsed\n          this.getJSONParsed(input, options)\n\n          /* Foo.Bar(...) -> new google.maps.Foo.Bar(...) */\n          || this.getAnyMapObject(input)\n\n          /*  MapTypeID.HYBRID -> new google.maps.MapTypeID.HYBRID */\n          || this.getAnyMapConstant(input, options)\n\n          /*  2016-06-20 -> new Date('2016-06-20') */\n          || this.getDateObject(input)\n\n          || input;\n      }\n    }\n\n    if (options['key']) {\n      let /** @type {?} */ key: string = /** @type {?} */(( <string>options['key']));\n      if (output instanceof Array) { // e.g., [1, 2]\n        if (key === 'bounds') {\n          output = new google.maps.LatLngBounds(output[0], output[1]);\n        } else if (key === 'icons') {\n          output = this.getMapIcons(output);\n        } else if (key === 'position' || key.match(/^geoFallback/) ) {\n          output = this.getLatLng(output);\n        }\n      } else if (output instanceof Object) {\n        if (key === 'icon') {\n          output = this.getMarkerIcon(output);\n        }\n        else if (key.match(/ControlOptions$/)) {\n          output = this.getMapControlOption(output);\n        }\n      }\n    }\n\n    // delete keys only for processing, not used by google\n    delete output['doNotConverStringToNumber'];\n    delete output['key'];\n\n    return output;\n  }\n/**\n * @param {?} input\n * @return {?}\n */\nprivate getLatLng(input: any): google.maps.LatLng | Array<google.maps.LatLng> {\n    let /** @type {?} */ output: google.maps.LatLng | Array<google.maps.LatLng>;\n    if (input[0].constructor === Array) { // [[1,2],[3,4]]\n      output = ( /** @type {?} */((<any[]>input))).map((el: number[]) => new google.maps.LatLng(el[0], el[1]));\n    } else if (!isNaN(parseFloat(input[0])) && isFinite(input[0])) {\n      output = new google.maps.LatLng(input[0], input[1]);\n    }\n    return output;\n  }\n/**\n * @param {?} input\n * @param {?} options\n * @return {?}\n */\nprivate getJSONParsed(input: any, options: IJson): IJson {\n    let /** @type {?} */ output: any;\n    try {\n      output = getJSON(input);\n      if (output instanceof Array) {\n        // [{a:1}] : not lat/lng ones\n\n        if (output[0].constructor !== Object) { // [[1,2],[3,4]] or [1,2]\n          output = this.getLatLng(output);\n        }\n      }\n      // JSON is an object (not array or null)\n      else if (output === Object(output)) {\n        // check for nested hashes and convert to Google API options\n        let /** @type {?} */ newOptions = options;\n        newOptions['doNotConverStringToNumber'] = true;\n        output = this.googlizeMultiple(output, newOptions);\n      }\n    } catch ( /** @type {?} */e) {\n    }\n    return output;\n  }\n/**\n * @param {?} input\n * @return {?}\n */\nprivate getAnyMapObject(input: string): any {\n    let /** @type {?} */ output: any;\n    if (input.match(/^[A-Z][a-zA-Z0-9]+\\(.*\\)$/)) {\n      try {\n        output = Function(`return new google.maps.${input};`)();\n      } catch ( /** @type {?} */e) {}\n    }\n    return output;\n  }\n/**\n * @param {?} input\n * @param {?} options\n * @return {?}\n */\nprivate getAnyMapConstant(input: string, options: IJson): any {\n    let /** @type {?} */ output: any;\n\n    if (input.match(/^([A-Z][a-zA-Z0-9]+)\\.([A-Z]+)$/)) { // e.g. MapTypeID.HYBRID\n      try {\n        let /** @type {?} */ matches = input.match(/^([A-Z][a-zA-Z0-9]+)\\.([A-Z]+)$/);\n        output = google.maps[matches[1]][matches[2]];\n      } catch ( /** @type {?} */e) {}\n    } else if (input.match(/^[A-Z]+$/)) { // e.g. HYBRID\n      try {\n        let /** @type {?} */ capitalizedKey = ( /** @type {?} */((<string>options['key']))).charAt(0).toUpperCase() +\n          ( /** @type {?} */((<string>options['key']))).slice(1);\n        output = google.maps[capitalizedKey][input];\n      } catch ( /** @type {?} */e) {}\n    }\n    return output;\n  }\n/**\n * streetviewControl, panControl, etc, not a general control\n * @param {?} controlOptions\n * @return {?}\n */\nprivate getMapControlOption(controlOptions: IJson): IJson {\n    let /** @type {?} */ newControlOptions: IJson = controlOptions;\n\n    for (let /** @type {?} */ key in newControlOptions) { // assign the right values\n      if (newControlOptions[key]) {\n        let /** @type {?} */ value = newControlOptions[key];\n\n        if (typeof value === 'string') {\n          value = ( /** @type {?} */((<string>value))).toUpperCase();\n        }\n        else if (key === 'mapTypeIds') {\n          value = ( /** @type {?} */((<any[]>value))).map(function (str) {\n            if (str.match(/^[A-Z]+$/)) { // if constant\n              return google.maps.MapTypeId[str.toUpperCase()];\n            } else { // else, custom map-type\n              return str;\n            }\n          });\n        }\n\n        if (key === 'style') {\n          let /** @type {?} */ objName = key.replace(/Options$/, '') + 'Style';\n          newControlOptions[key] = google.maps[objName][ /** @type {?} */((<any>value))];\n        }\n        else if (key === 'position') {\n          newControlOptions[key] = google.maps.ControlPosition[ /** @type {?} */((<any>value))];\n        }\n        else {\n          newControlOptions[key] = value;\n        }\n      }\n    }\n\n    return newControlOptions;\n  }\n/**\n * @param {?} input\n * @return {?}\n */\nprivate getDateObject(input: string): Date {\n    let /** @type {?} */ output: Date;\n\n    if (input.match(/^(\\d{4}\\-\\d\\d\\-\\d\\d([tT][\\d:\\.]*)?)([zZ]|([+\\-])(\\d\\d):?(\\d\\d))?$/)) {\n      try {\n        output = new Date(input);\n      } catch ( /** @type {?} */e) {}\n    }\n    return output;\n  }\n/**\n * @param {?} input\n * @return {?}\n */\nprivate getMapIcons(input: any[]): any[] {\n    return input.map(el => {\n      if (el.icon.path.match(/^[A-Z_]+$/)) {\n        el.icon.path = google.maps.SymbolPath[el.icon.path];\n      }\n      return el;\n    });\n  }\n/**\n * @param {?} input\n * @return {?}\n */\nprivate getMarkerIcon(input: any): any {\n    let /** @type {?} */ output = input;\n\n    if (('' + output.path).match(/^[A-Z_]+$/)) {\n      output.path = google.maps.SymbolPath[output.path];\n    }\n\n    for (let /** @type {?} */ key in output) {\n      let /** @type {?} */ arr = output[key];\n      if (key === 'anchor' || key === 'origin' || key === 'labelOrigin') {\n        output[key] = new google.maps.Point(arr[0], arr[1]);\n    } else if (key === 'size' || key === 'scaledSize') {\n        output[key] = new google.maps.Size(arr[0], arr[1]);\n      }\n    }\n\n    return output;\n  }\n/**\n * @param {?} definedInputs\n * @param {?} userInputs\n * @return {?}\n */\nprivate onlyOptionsGiven(definedInputs: string[], userInputs: any): boolean {\n    for (let /** @type {?} */ i = 0; i < definedInputs.length; i++) {\n      let /** @type {?} */ input = definedInputs[i];\n      if (input !== 'options' && typeof userInputs[input] !== 'undefined') {\n        return false;\n      }\n    }\n    return true;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OptionBuilder_tsickle_Closure_declarations() {\n/** @type {?} */\nOptionBuilder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOptionBuilder.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\nimport { IJson } from './util';\n/**\n *  service for navigator.geolocation methods\n */\nexport class NavigatorGeolocation {\n/**\n * @param {?=} geoLocationOptions\n * @return {?}\n */\ngetCurrentPosition(geoLocationOptions?: IJson): Observable<any> {\n    geoLocationOptions = geoLocationOptions || { timeout: 5000 };\n\n    return new Observable<any>((responseObserver: Observer<any>) => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            responseObserver.next(position);\n            responseObserver.complete();\n          },\n          (evt) => responseObserver.error(evt),\n          geoLocationOptions\n        );\n      } else {\n        responseObserver.error('Browser Geolocation service failed.');\n      }\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NavigatorGeolocation_tsickle_Closure_declarations() {\n/** @type {?} */\nNavigatorGeolocation.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNavigatorGeolocation.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const /** @type {?} */ NG_MAP_CONFIG_TOKEN = new InjectionToken<ConfigOption>('NG_MAP_CONFIG_TOKEN');\nexport interface ConfigOption {\n  apiUrl?: string;\n}\n","import { Injectable, Inject, Optional, NgZone, OnDestroy } from '@angular/core';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\nimport { NG_MAP_CONFIG_TOKEN } from './config';\nimport { isMapsApiLoaded } from './util';\nimport { first } from 'rxjs/operator/first';\n/**\n * @abstract\n */\nexport abstract class NgMapApiLoader implements OnDestroy {\n  api$: ReplaySubject<any> = first.call(new ReplaySubject(1));\n/**\n * @abstract\n * @return {?}\n */\nload() {}\n/**\n * @param {?} config\n */\nconstructor(protected config) {\n    this.config = this.config || {apiUrl: 'https://maps.google.com/maps/api/js'};\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.api$.complete();\n  }\n}\n\nfunction NgMapApiLoader_tsickle_Closure_declarations() {\n/** @type {?} */\nNgMapApiLoader.prototype.api$;\n/** @type {?} */\nNgMapApiLoader.prototype.config;\n}\n\nexport class NgMapAsyncCallbackApiLoader extends NgMapApiLoader {\n/**\n * @param {?} zone\n * @param {?} config\n */\nconstructor(protected zone: NgZone,   config) {\n    super(config);\n  }\n/**\n * @return {?}\n */\nload() {\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    if (isMapsApiLoaded()) {\n      this.api$.next(google.maps);\n    } else if (!document.querySelector('#ngui-map-api')) {\n      ( /** @type {?} */((<any>window)))['nguiMapRef'] = ( /** @type {?} */((<any>window)))['nguiMapRef'] || [];\n      ( /** @type {?} */((<any>window)))['nguiMapRef'].push({ zone: this.zone, componentFn: () => this.api$.next(google.maps)});\n      this.addGoogleMapsApi();\n    }\n  }\n/**\n * @return {?}\n */\nprivate addGoogleMapsApi() {\n    ( /** @type {?} */((<any>window)))['initNguiMap'] = ( /** @type {?} */((<any>window)))['initNguiMap'] || function() {\n      ( /** @type {?} */((<any>window)))['nguiMapRef'].forEach(nguiMapRef => {\n        nguiMapRef.zone.run(function() { nguiMapRef.componentFn(); });\n      });\n      ( /** @type {?} */((<any>window)))['nguiMapRef'].splice(0, ( /** @type {?} */((<any>window)))['nguiMapRef'].length);\n    };\n\n    let /** @type {?} */ script = document.createElement( 'script' );\n    script.id = 'ngui-map-api';\n\n    // script.src = \"https://maps.google.com/maps/api/js?callback=initNguiMap\";\n    let /** @type {?} */ apiUrl = this.config.apiUrl ;\n    apiUrl += apiUrl.indexOf('?') !== -1 ? '&' : '?';\n    script.src = apiUrl + 'callback=initNguiMap';\n    document.querySelector('body').appendChild(script);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_MAP_CONFIG_TOKEN, ] }, ]},\n];\n}\n\nfunction NgMapAsyncCallbackApiLoader_tsickle_Closure_declarations() {\n/** @type {?} */\nNgMapAsyncCallbackApiLoader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgMapAsyncCallbackApiLoader.ctorParameters;\n/** @type {?} */\nNgMapAsyncCallbackApiLoader.prototype.zone;\n}\n\nexport class NgMapAsyncApiLoader extends NgMapApiLoader {\n/**\n * @param {?} config\n */\nconstructor(  config) {\n    super(config);\n  }\n/**\n * @return {?}\n */\nload() {\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    if (isMapsApiLoaded()) {\n      this.api$.next(google.maps);\n    } else if (!document.querySelector('#ngui-map-api')) {\n      let /** @type {?} */ script = document.createElement('script');\n      script.id = 'ngui-map-api';\n\n      script.async = true;\n      script.onload = () => this.api$.next(google.maps);\n      script.src = this.config.apiUrl;\n      document.querySelector('body').appendChild(script);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_MAP_CONFIG_TOKEN, ] }, ]},\n];\n}\n\nfunction NgMapAsyncApiLoader_tsickle_Closure_declarations() {\n/** @type {?} */\nNgMapAsyncApiLoader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgMapAsyncApiLoader.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\nimport { NgMapApiLoader } from './api-loader';\n/**\n *   Provides [defered/promise API](https://docs.angularjs.org/api/ng/service/$q)\n *   service for Google Geocoder service\n */\nexport class GeoCoder implements OnDestroy {\nprivate apiLoaderSubs = [];\n/**\n * @param {?} apiLoader\n */\nconstructor(private apiLoader: NgMapApiLoader) {}\n/**\n * @param {?} options\n * @return {?}\n */\ngeocode(options: google.maps.GeocoderRequest) {\n    return new Observable((responseObserver: Observer<any>) => {\n        this.apiLoaderSubs.push(this.apiLoader.api$\n          .subscribe(() => this.requestGeocode(options, responseObserver)));\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.apiLoaderSubs.map(sub => sub.unsubscribe());\n  }\n/**\n * @param {?} options\n * @param {?} observer\n * @return {?}\n */\nprivate requestGeocode(options, observer) {\n    const /** @type {?} */ geocoder = new google.maps.Geocoder();\n    geocoder.geocode(options, function (results, status) {\n      if (status === google.maps.GeocoderStatus.OK) {\n        observer.next(results);\n        observer.complete();\n      } else {\n        observer.error(results);\n      }\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgMapApiLoader, },\n];\n}\n\nfunction GeoCoder_tsickle_Closure_declarations() {\n/** @type {?} */\nGeoCoder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGeoCoder.ctorParameters;\n/** @type {?} */\nGeoCoder.prototype.apiLoaderSubs;\n/** @type {?} */\nGeoCoder.prototype.apiLoader;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, SimpleChanges, NgZone } from '@angular/core';\nimport { OptionBuilder } from './option-builder';\nimport { GeoCoder } from './geo-coder';\n/**\n * collection of map instance-related properties and methods\n */\nexport class NguiMap {\n/**\n * @param {?} geoCoder\n * @param {?} optionBuilder\n * @param {?} zone\n */\nconstructor(\nprivate geoCoder: GeoCoder,\nprivate optionBuilder: OptionBuilder,\nprivate zone: NgZone,\n  ) {}\n/**\n * @param {?} definedEvents\n * @param {?} thisObj\n * @param {?} prefix\n * @return {?}\n */\nsetObjectEvents(definedEvents: string[], thisObj: any, prefix: string) {\n    definedEvents.forEach(definedEvent => {\n      let /** @type {?} */ eventName = definedEvent\n        .replace(/([A-Z])/g, ($1) => `_${$1.toLowerCase()}`) // positionChanged -> position_changed\n        .replace(/^map_/, '');                               // map_click -> click  to avoid DOM conflicts\n\n      let /** @type {?} */ zone = this.zone;\n      zone.runOutsideAngular(() => {\n        thisObj[prefix].addListener(eventName, function(event: google.maps.event) {\n          let /** @type {?} */ param: any = event ? event : {};\n          param.target = this;\n          zone.run(() => thisObj[definedEvent].emit(param));\n        });\n      });\n    });\n  }\n/**\n * @param {?} definedEvents\n * @param {?} thisObj\n * @param {?} prefix\n * @return {?}\n */\nclearObjectEvents(definedEvents: string[], thisObj: any, prefix: string) {\n    definedEvents.forEach(definedEvent => {\n      let /** @type {?} */ eventName = definedEvent\n        .replace(/([A-Z])/g, ($1) => `_${$1.toLowerCase()}`) // positionChanged -> position_changed\n        .replace(/^map_/, '');                               // map_click -> click  to avoid DOM conflicts\n\n      this.zone.runOutsideAngular(() => {\n        if (thisObj[prefix]) {\n          google.maps.event.clearListeners(thisObj[prefix], eventName);\n        }\n      });\n    });\n\n    if (thisObj[prefix]) {\n      if (thisObj[prefix].setMap) {\n        thisObj[prefix].setMap(null);\n      }\n\n      delete thisObj[prefix].nguiMapComponent;\n      delete thisObj[prefix];\n    }\n\n  }\n\n  updateGoogleObject = (object: any, changes: SimpleChanges)  => {\n    let /** @type {?} */ val: any, /** @type {?} */ currentValue: any, /** @type {?} */ setMethodName: string;\n    if (object) {\n      for (let /** @type {?} */ key in changes) {\n        setMethodName = `set${key.replace(/^[a-z]/, x => x.toUpperCase()) }`;\n        currentValue = changes[key].currentValue;\n        if (['position', 'center'].indexOf(key) !== -1 && typeof currentValue === 'string') {\n          // To preserve setMethod name in Observable callback, wrap it as a function, then execute\n          ((setMethodName) => {\n            this.geoCoder.geocode({address: currentValue}).subscribe(results => {\n              if (typeof object[setMethodName] === 'function') {\n                object[setMethodName](results[0].geometry.location);\n              } else {\n                console.error(\n                  'Not all options are dynamically updatable according to Googles Maps API V3 documentation.\\n' +\n                  'Please check Google Maps API documentation, and use \"setOptions\" instead.'\n                );\n              }\n            });\n          })(setMethodName);\n        } else {\n          val =  this.optionBuilder.googlize(currentValue);\n          if (typeof object[setMethodName] === 'function') {\n            object[setMethodName](val);\n          } else {\n            console.error(\n              'Not all options are dynamically updatable according to Googles Maps API V3 documentation.\\n' +\n              'Please check Google Maps API documentation, and use \"setOptions\" instead.'\n            );\n          }\n        }\n      }\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: GeoCoder, },\n{type: OptionBuilder, },\n{type: NgZone, },\n];\n}\n\nfunction NguiMap_tsickle_Closure_declarations() {\n/** @type {?} */\nNguiMap.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNguiMap.ctorParameters;\n/** @type {?} */\nNguiMap.prototype.updateGoogleObject;\n/** @type {?} */\nNguiMap.prototype.geoCoder;\n/** @type {?} */\nNguiMap.prototype.optionBuilder;\n/** @type {?} */\nNguiMap.prototype.zone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ElementRef,\n  ViewEncapsulation,\n  EventEmitter,\n  SimpleChanges,\n  Output,\n  NgZone,\n  AfterViewInit, AfterViewChecked, OnChanges, OnDestroy\n} from '@angular/core';\n\nimport { OptionBuilder } from '../services/option-builder';\nimport { NavigatorGeolocation } from '../services/navigator-geolocation';\nimport { GeoCoder } from '../services/geo-coder';\nimport { NguiMap } from '../services/ngui-map';\nimport { NgMapApiLoader } from '../services/api-loader';\nimport { InfoWindow } from './info-window';\nimport { Subject } from 'rxjs/Subject';\nimport { debounceTime } from 'rxjs/operator/debounceTime';\nimport { toCamelCase } from '../services/util';\n\nconst /** @type {?} */ INPUTS = [\n  'backgroundColor', 'center', 'disableDefaultUI', 'disableDoubleClickZoom', 'draggable', 'draggableCursor',\n  'draggingCursor', 'heading', 'keyboardShortcuts', 'mapMaker', 'mapTypeControl', 'mapTypeId', 'maxZoom', 'minZoom',\n  'noClear', 'overviewMapControl', 'panControl', 'panControlOptions', 'rotateControl', 'scaleControl', 'scrollwheel',\n  'streetView', 'styles', 'tilt', 'zoom', 'streetViewControl', 'zoomControl', 'zoomControlOptions', 'mapTypeControlOptions',\n  'overviewMapControlOptions', 'rotateControlOptions', 'scaleControlOptions', 'streetViewControlOptions', 'fullscreenControl', 'fullscreenControlOptions',\n  'options',\n  // ngui-map-specific inputs\n  'geoFallbackCenter'\n];\n\nconst /** @type {?} */ OUTPUTS = [\n  'bounds_changed', 'center_changed', 'click', 'dblclick', 'drag', 'dragend', 'dragstart', 'heading_changed', 'idle',\n  'typeid_changed', 'mousemove', 'mouseout', 'mouseover', 'projection_changed', 'resize', 'rightclick',\n  'tilesloaded', 'tile_changed', 'zoom_changed',\n  // to avoid DOM event conflicts\n  'mapClick', 'mapMouseover', 'mapMouseout', 'mapMousemove', 'mapDrag', 'mapDragend', 'mapDragstart'\n];\nexport class NguiMapComponent implements OnChanges, OnDestroy, AfterViewInit, AfterViewChecked {\npublic backgroundColor: any;\npublic center: any;\npublic disableDefaultUI: any;\npublic disableDoubleClickZoom: any;\npublic draggable: any;\npublic draggableCursor: any;\npublic draggingCursor: any;\npublic heading: any;\npublic keyboardShortcuts: any;\npublic mapMaker: any;\npublic mapTypeControl: any;\npublic mapTypeId: any;\npublic maxZoom: any;\npublic minZoom: any;\npublic noClear: any;\npublic overviewMapControl: any;\npublic panControl: any;\npublic panControlOptions: any;\npublic rotateControl: any;\npublic scaleControl: any;\npublic scrollwheel: any;\npublic streetView: any;\npublic styles: any;\npublic tilt: any;\npublic zoom: any;\npublic streetViewControl: any;\npublic zoomControl: any;\npublic zoomControlOptions: any;\npublic mapTypeControlOptions: any;\npublic overviewMapControlOptions: any;\npublic rotateControlOptions: any;\npublic scaleControlOptions: any;\npublic streetViewControlOptions: any;\npublic fullscreenControl: any;\npublic fullscreenControlOptions: any;\npublic options: any;\npublic geoFallbackCenter: any;\npublic bounds_changed: any;\npublic center_changed: any;\npublic click: any;\npublic dblclick: any;\npublic drag: any;\npublic dragend: any;\npublic dragstart: any;\npublic heading_changed: any;\npublic idle: any;\npublic typeid_changed: any;\npublic mousemove: any;\npublic mouseout: any;\npublic mouseover: any;\npublic projection_changed: any;\npublic resize: any;\npublic rightclick: any;\npublic tilesloaded: any;\npublic tile_changed: any;\npublic zoom_changed: any;\npublic mapClick: any;\npublic mapMouseover: any;\npublic mapMouseout: any;\npublic mapMousemove: any;\npublic mapDrag: any;\npublic mapDragend: any;\npublic mapDragstart: any;\npublic mapReady$: EventEmitter<any> = new EventEmitter();\npublic el: HTMLElement;\npublic map: google.maps.Map;\npublic mapOptions: google.maps.MapOptions = {};\npublic inputChanges$ = new Subject();\npublic infoWindows: { [id: string]: InfoWindow } = { };\npublic mapIdledOnce: boolean = false;\nprivate initializeMapAfterDisplayed = false;\nprivate apiLoaderSub;\n/**\n * @param {?} optionBuilder\n * @param {?} elementRef\n * @param {?} geolocation\n * @param {?} geoCoder\n * @param {?} nguiMap\n * @param {?} apiLoader\n * @param {?} zone\n */\nconstructor(\npublic optionBuilder: OptionBuilder,\npublic elementRef: ElementRef,\npublic geolocation: NavigatorGeolocation,\npublic geoCoder: GeoCoder,\npublic nguiMap: NguiMap,\npublic apiLoader: NgMapApiLoader,\npublic zone: NgZone,\n  ) {\n    apiLoader.load();\n\n    // all outputs needs to be initialized,\n    // http://stackoverflow.com/questions/37765519/angular2-directive-cannot-read-property-subscribe-of-undefined-with-outputs\n    OUTPUTS.forEach(output => this[output] = new EventEmitter());\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this.apiLoaderSub = this.apiLoader.api$.subscribe(() => this.initializeMap());\n  }\n/**\n * @return {?}\n */\nngAfterViewChecked() {\n      if (this.initializeMapAfterDisplayed && this.el && this.el.offsetWidth > 0) {\n        this.initializeMap();\n      }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    this.inputChanges$.next(changes);\n  }\n/**\n * @return {?}\n */\ninitializeMap(): void {\n    this.el = this.elementRef.nativeElement.querySelector('.google-map');\n    if (this.el && this.el.offsetWidth === 0) {\n        this.initializeMapAfterDisplayed = true;\n        return;\n    }\n\n    this.initializeMapAfterDisplayed = false;\n    this.mapOptions = this.optionBuilder.googlizeAllInputs(INPUTS, this);\n\n\n    this.mapOptions.zoom = this.mapOptions.zoom || 15;\n    typeof this.mapOptions.center === 'string' && (delete this.mapOptions.center);\n\n    this.zone.runOutsideAngular(() => {\n      this.map = new google.maps.Map(this.el, this.mapOptions);\n      this.map['mapObjectName'] = 'NguiMapComponent';\n\n      if (!this.mapOptions.center) { // if center is not given as lat/lng\n        this.setCenter();\n      }\n\n      // set google events listeners and emits to this outputs listeners\n      this.nguiMap.setObjectEvents(OUTPUTS, this, 'map');\n\n      this.map.addListener('idle', () => {\n        if (!this.mapIdledOnce) {\n          this.mapIdledOnce = true;\n          setTimeout(() => { // Why????, subsribe and emit must not be in the same cycle???\n            this.mapReady$.emit(this.map);\n          });\n        }\n      });\n\n      // update map when input changes\n      debounceTime.call(this.inputChanges$, 1000)\n        .subscribe((changes: SimpleChanges) => this.nguiMap.updateGoogleObject(this.map, changes));\n\n      if (typeof window !== 'undefined' && ( /** @type {?} */((<any>window)))['nguiMapRef']) {\n        // expose map object for test and debugging on (<any>window)\n        ( /** @type {?} */((<any>window)))['nguiMapRef'].map = this.map;\n      }\n    });\n  }\n/**\n * @return {?}\n */\nsetCenter(): void {\n    if (!this['center']) { // center is not from user. Thus, we set the current location\n      this.geolocation.getCurrentPosition().subscribe(\n        position => {\n\n          let /** @type {?} */ latLng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);\n          this.map.setCenter(latLng);\n        },\n        error => {\n          console.error('ngui-map: Error finding the current position');\n          this.map.setCenter(this.mapOptions['geoFallbackCenter'] || new google.maps.LatLng(0, 0));\n        }\n      );\n    }\n    else if (typeof this['center'] === 'string') {\n      this.geoCoder.geocode({address: this['center']}).subscribe(\n        results => {\n\n          this.map.setCenter(results[0].geometry.location);\n        },\n        error => {\n          this.map.setCenter(this.mapOptions['geoFallbackCenter'] || new google.maps.LatLng(0, 0));\n        });\n    }\n  }\n/**\n * @param {?} id\n * @param {?} anchor\n * @return {?}\n */\nopenInfoWindow(id: string, anchor: google.maps.MVCObject) {\n    this.infoWindows[id].open(anchor);\n  }\n/**\n * @param {?} id\n * @return {?}\n */\ncloseInfoWindow(id: string) {\n    // if infoWindow for id exists, close the infoWindow\n    if (this.infoWindows[id])\n      this.infoWindows[id].close();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.inputChanges$.complete();\n    if (this.el && !this.initializeMapAfterDisplayed) {\n      this.nguiMap.clearObjectEvents(OUTPUTS, this, 'map');\n    }\n    if (this.apiLoaderSub) {\n      this.apiLoaderSub.unsubscribe();\n    }\n  }\n/**\n * @param {?} mapObjectName\n * @param {?} mapObject\n * @return {?}\n */\naddToMapObjectGroup(mapObjectName: string, mapObject: any) {\n    let /** @type {?} */ groupName = toCamelCase(mapObjectName.toLowerCase()) + 's'; // e.g. markers\n    this.map[groupName] = this.map[groupName] || [];\n    this.map[groupName].push(mapObject);\n  }\n/**\n * @param {?} mapObjectName\n * @param {?} mapObject\n * @return {?}\n */\nremoveFromMapObjectGroup(mapObjectName: string, mapObject: any) {\n    let /** @type {?} */ groupName = toCamelCase(mapObjectName.toLowerCase()) + 's'; // e.g. markers\n    if (this.map && this.map[groupName]) {\n      let /** @type {?} */ index = this.map[groupName].indexOf(mapObject);\n\n      (index > -1) && this.map[groupName].splice(index, 1);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ngui-map',\n  providers: [NguiMap, OptionBuilder, GeoCoder, NavigatorGeolocation],\n  styles: [`\n    ngui-map {display: block; height: 300px;}\n    .google-map {width: 100%; height: 100%}\n  `],\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n  encapsulation: ViewEncapsulation.None,\n  template: `\n    <div class=\"google-map\"></div>\n    <ng-content></ng-content>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: OptionBuilder, },\n{type: ElementRef, },\n{type: NavigatorGeolocation, },\n{type: GeoCoder, },\n{type: NguiMap, },\n{type: NgMapApiLoader, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'mapReady$': [{ type: Output },],\n};\n}\n\nfunction NguiMapComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nNguiMapComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNguiMapComponent.ctorParameters;\n/** @type {?} */\nNguiMapComponent.propDecorators;\n/** @type {?} */\nNguiMapComponent.prototype.backgroundColor;\n/** @type {?} */\nNguiMapComponent.prototype.center;\n/** @type {?} */\nNguiMapComponent.prototype.disableDefaultUI;\n/** @type {?} */\nNguiMapComponent.prototype.disableDoubleClickZoom;\n/** @type {?} */\nNguiMapComponent.prototype.draggable;\n/** @type {?} */\nNguiMapComponent.prototype.draggableCursor;\n/** @type {?} */\nNguiMapComponent.prototype.draggingCursor;\n/** @type {?} */\nNguiMapComponent.prototype.heading;\n/** @type {?} */\nNguiMapComponent.prototype.keyboardShortcuts;\n/** @type {?} */\nNguiMapComponent.prototype.mapMaker;\n/** @type {?} */\nNguiMapComponent.prototype.mapTypeControl;\n/** @type {?} */\nNguiMapComponent.prototype.mapTypeId;\n/** @type {?} */\nNguiMapComponent.prototype.maxZoom;\n/** @type {?} */\nNguiMapComponent.prototype.minZoom;\n/** @type {?} */\nNguiMapComponent.prototype.noClear;\n/** @type {?} */\nNguiMapComponent.prototype.overviewMapControl;\n/** @type {?} */\nNguiMapComponent.prototype.panControl;\n/** @type {?} */\nNguiMapComponent.prototype.panControlOptions;\n/** @type {?} */\nNguiMapComponent.prototype.rotateControl;\n/** @type {?} */\nNguiMapComponent.prototype.scaleControl;\n/** @type {?} */\nNguiMapComponent.prototype.scrollwheel;\n/** @type {?} */\nNguiMapComponent.prototype.streetView;\n/** @type {?} */\nNguiMapComponent.prototype.styles;\n/** @type {?} */\nNguiMapComponent.prototype.tilt;\n/** @type {?} */\nNguiMapComponent.prototype.zoom;\n/** @type {?} */\nNguiMapComponent.prototype.streetViewControl;\n/** @type {?} */\nNguiMapComponent.prototype.zoomControl;\n/** @type {?} */\nNguiMapComponent.prototype.zoomControlOptions;\n/** @type {?} */\nNguiMapComponent.prototype.mapTypeControlOptions;\n/** @type {?} */\nNguiMapComponent.prototype.overviewMapControlOptions;\n/** @type {?} */\nNguiMapComponent.prototype.rotateControlOptions;\n/** @type {?} */\nNguiMapComponent.prototype.scaleControlOptions;\n/** @type {?} */\nNguiMapComponent.prototype.streetViewControlOptions;\n/** @type {?} */\nNguiMapComponent.prototype.fullscreenControl;\n/** @type {?} */\nNguiMapComponent.prototype.fullscreenControlOptions;\n/** @type {?} */\nNguiMapComponent.prototype.options;\n/** @type {?} */\nNguiMapComponent.prototype.geoFallbackCenter;\n/** @type {?} */\nNguiMapComponent.prototype.bounds_changed;\n/** @type {?} */\nNguiMapComponent.prototype.center_changed;\n/** @type {?} */\nNguiMapComponent.prototype.click;\n/** @type {?} */\nNguiMapComponent.prototype.dblclick;\n/** @type {?} */\nNguiMapComponent.prototype.drag;\n/** @type {?} */\nNguiMapComponent.prototype.dragend;\n/** @type {?} */\nNguiMapComponent.prototype.dragstart;\n/** @type {?} */\nNguiMapComponent.prototype.heading_changed;\n/** @type {?} */\nNguiMapComponent.prototype.idle;\n/** @type {?} */\nNguiMapComponent.prototype.typeid_changed;\n/** @type {?} */\nNguiMapComponent.prototype.mousemove;\n/** @type {?} */\nNguiMapComponent.prototype.mouseout;\n/** @type {?} */\nNguiMapComponent.prototype.mouseover;\n/** @type {?} */\nNguiMapComponent.prototype.projection_changed;\n/** @type {?} */\nNguiMapComponent.prototype.resize;\n/** @type {?} */\nNguiMapComponent.prototype.rightclick;\n/** @type {?} */\nNguiMapComponent.prototype.tilesloaded;\n/** @type {?} */\nNguiMapComponent.prototype.tile_changed;\n/** @type {?} */\nNguiMapComponent.prototype.zoom_changed;\n/** @type {?} */\nNguiMapComponent.prototype.mapClick;\n/** @type {?} */\nNguiMapComponent.prototype.mapMouseover;\n/** @type {?} */\nNguiMapComponent.prototype.mapMouseout;\n/** @type {?} */\nNguiMapComponent.prototype.mapMousemove;\n/** @type {?} */\nNguiMapComponent.prototype.mapDrag;\n/** @type {?} */\nNguiMapComponent.prototype.mapDragend;\n/** @type {?} */\nNguiMapComponent.prototype.mapDragstart;\n/** @type {?} */\nNguiMapComponent.prototype.mapReady$;\n/** @type {?} */\nNguiMapComponent.prototype.el;\n/** @type {?} */\nNguiMapComponent.prototype.map;\n/** @type {?} */\nNguiMapComponent.prototype.mapOptions;\n/** @type {?} */\nNguiMapComponent.prototype.inputChanges$;\n/** @type {?} */\nNguiMapComponent.prototype.infoWindows;\n/** @type {?} */\nNguiMapComponent.prototype.mapIdledOnce;\n/** @type {?} */\nNguiMapComponent.prototype.initializeMapAfterDisplayed;\n/** @type {?} */\nNguiMapComponent.prototype.apiLoaderSub;\n/** @type {?} */\nNguiMapComponent.prototype.optionBuilder;\n/** @type {?} */\nNguiMapComponent.prototype.elementRef;\n/** @type {?} */\nNguiMapComponent.prototype.geolocation;\n/** @type {?} */\nNguiMapComponent.prototype.geoCoder;\n/** @type {?} */\nNguiMapComponent.prototype.nguiMap;\n/** @type {?} */\nNguiMapComponent.prototype.apiLoader;\n/** @type {?} */\nNguiMapComponent.prototype.zone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive } from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst /** @type {?} */ INPUTS = [];\nconst /** @type {?} */ OUTPUTS = [ ];\nexport class BicyclingLayer extends BaseMapDirective {\n/**\n * @param {?} nguiMapComp\n */\nconstructor(nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'BicyclingLayer', INPUTS, OUTPUTS);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'ngui-map > bicycling-layer',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NguiMapComponent, },\n];\n}\n\nfunction BicyclingLayer_tsickle_Closure_declarations() {\n/** @type {?} */\nBicyclingLayer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBicyclingLayer.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  SimpleChanges,\n  ViewChild, ViewContainerRef,\n  Output, OnInit, OnChanges, OnDestroy\n} from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { debounceTime } from 'rxjs/operator/debounceTime';\nimport { NguiMap } from '../services/ngui-map';\nimport { NguiMapComponent } from './ngui-map.component';\n\nconst /** @type {?} */ INPUTS = [\n  'content', 'disableAutoPan', 'maxWidth', 'pixelOffset', 'position', 'zIndex', 'options'\n];\nconst /** @type {?} */ OUTPUTS = [\n  'closeclick', 'content_changed', 'domready', 'position_changed', 'zindex_changed'\n];\nexport class InfoWindow implements OnInit, OnChanges, OnDestroy {\npublic content: any;\npublic disableAutoPan: any;\npublic maxWidth: any;\npublic pixelOffset: any;\npublic position: any;\npublic zIndex: any;\npublic options: any;\npublic closeclick: any;\npublic content_changed: any;\npublic domready: any;\npublic position_changed: any;\npublic zindex_changed: any; // generated by ngc-pre-compiler.js\n\n   initialized$: EventEmitter<any> = new EventEmitter();\npublic infoWindow: google.maps.InfoWindow;\npublic objectOptions: google.maps.InfoWindowOptions = {};\npublic inputChanges$ = new Subject();\n   template: ViewContainerRef;\n/**\n * @param {?} elementRef\n * @param {?} nguiMap\n * @param {?} nguiMapComponent\n */\nconstructor(\nprivate elementRef: ElementRef,\nprivate nguiMap: NguiMap,\nprivate nguiMapComponent: NguiMapComponent,\n  ) {\n    this.elementRef.nativeElement.style.display = 'none';\n    OUTPUTS.forEach(output => this[output] = new EventEmitter());\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.nguiMapComponent.mapIdledOnce) { // map is ready already\n      this.initialize();\n    } else {\n      this.nguiMapComponent.mapReady$.subscribe(map => this.initialize());\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    this.inputChanges$.next(changes);\n  }\n/**\n * @return {?}\n */\ninitialize(): void {\n\n\n    this.objectOptions = this.nguiMapComponent.optionBuilder.googlizeAllInputs(INPUTS, this);\n    this.infoWindow = new google.maps.InfoWindow(this.objectOptions);\n    this.infoWindow['mapObjectName'] = 'InfoWindow';\n\n\n    // register infoWindow ids to NguiMap, so that it can be opened by id\n    if (this.elementRef.nativeElement.id) {\n      this.nguiMapComponent.infoWindows[this.elementRef.nativeElement.id] = this;\n    } else {\n      console.error('An InfoWindow must have an id. e.g. id=\"detail\"');\n    }\n\n    // set google events listeners and emits to this outputs listeners\n    this.nguiMap.setObjectEvents(OUTPUTS, this, 'infoWindow');\n\n    // update object when input changes\n    debounceTime.call(this.inputChanges$, 1000)\n      .subscribe((changes: SimpleChanges) => this.nguiMap.updateGoogleObject(this.infoWindow, changes));\n\n    this.nguiMapComponent.addToMapObjectGroup('InfoWindow', this.infoWindow);\n    this.initialized$.emit(this.infoWindow);\n  }\n/**\n * @param {?} anchor\n * @return {?}\n */\nopen(anchor: google.maps.MVCObject) {\n    // set content and open it\n    this.infoWindow.setContent(this.template.element.nativeElement);\n    this.infoWindow.open(this.nguiMapComponent.map, anchor);\n  }\n/**\n * @return {?}\n */\nclose() {\n    // check if infoWindow exists, and closes it\n    if (this.infoWindow)\n      this.infoWindow.close();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.inputChanges$.complete();\n    if (this.infoWindow) {\n      this.nguiMap.clearObjectEvents(OUTPUTS, this, 'infoWindow');\n      delete this.infoWindow;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ngui-map > info-window',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n  template: `<div #template><ng-content></ng-content></div>`,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NguiMap, },\n{type: NguiMapComponent, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'initialized$': [{ type: Output },],\n'template': [{ type: ViewChild, args: ['template', {read: ViewContainerRef}, ] },],\n};\n}\n\nfunction InfoWindow_tsickle_Closure_declarations() {\n/** @type {?} */\nInfoWindow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInfoWindow.ctorParameters;\n/** @type {?} */\nInfoWindow.propDecorators;\n/** @type {?} */\nInfoWindow.prototype.content;\n/** @type {?} */\nInfoWindow.prototype.disableAutoPan;\n/** @type {?} */\nInfoWindow.prototype.maxWidth;\n/** @type {?} */\nInfoWindow.prototype.pixelOffset;\n/** @type {?} */\nInfoWindow.prototype.position;\n/** @type {?} */\nInfoWindow.prototype.zIndex;\n/** @type {?} */\nInfoWindow.prototype.options;\n/** @type {?} */\nInfoWindow.prototype.closeclick;\n/** @type {?} */\nInfoWindow.prototype.content_changed;\n/** @type {?} */\nInfoWindow.prototype.domready;\n/** @type {?} */\nInfoWindow.prototype.position_changed;\n/** @type {?} */\nInfoWindow.prototype.zindex_changed;\n/** @type {?} */\nInfoWindow.prototype.initialized$;\n/** @type {?} */\nInfoWindow.prototype.infoWindow;\n/** @type {?} */\nInfoWindow.prototype.objectOptions;\n/** @type {?} */\nInfoWindow.prototype.inputChanges$;\n/** @type {?} */\nInfoWindow.prototype.template;\n/** @type {?} */\nInfoWindow.prototype.elementRef;\n/** @type {?} */\nInfoWindow.prototype.nguiMap;\n/** @type {?} */\nInfoWindow.prototype.nguiMapComponent;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ElementRef,\n  Output,\n  EventEmitter,\n  SimpleChanges, OnInit, OnDestroy, OnChanges,\n} from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { debounceTime } from 'rxjs/operator/debounceTime';\n\nimport { NguiMap } from '../services/ngui-map';\nimport { NguiMapComponent } from './ngui-map.component';\n\nconst /** @type {?} */ INPUTS = [\n  'position'\n];\n// to avoid DOM event conflicts map_*\nconst /** @type {?} */ OUTPUTS = [\n  'animationChanged', 'click', 'clickableChanged', 'cursorChanged', 'dblclick', 'drag', 'dragend', 'draggableChanged',\n  'dragstart', 'flatChanged', 'iconChanged', 'mousedown', 'mouseout', 'mouseover', 'mouseup', 'positionChanged', 'rightclick',\n  'shapeChanged', 'titleChanged', 'visibleChanged', 'zindexChanged',\n  'map_click', 'map_mouseover', 'map_mouseout', 'map_mouseup', 'map_mousedown', 'map_drag', 'map_dragend'\n];\n/**\n * Wrapper to a create extend OverlayView at runtime, only after google maps is loaded.\n * Otherwise throws a google is unknown error.\n * @param {?} htmlEl\n * @param {?} position\n * @return {?}\n */\nfunction getCustomMarkerOverlayView(htmlEl: HTMLElement, position: any) {\nclass CustomMarkerOverlayView extends google.maps.OverlayView {\nprivate htmlEl: HTMLElement;\nprivate position: any;\nprivate zIndex: string;\nprivate visible: boolean = true;\n/**\n * @param {?} htmlEl\n * @param {?} position\n */\nconstructor(htmlEl: HTMLElement, position: any) {\n      super();\n      this.htmlEl = htmlEl;\n      this.position = position;\n    }\n/**\n * @return {?}\n */\nonAdd(): void {\n      this.getPanes().overlayMouseTarget.appendChild(this.htmlEl);\n\n      // required for correct display inside google maps container\n      this.htmlEl.style.position = 'absolute';\n    }\n/**\n * @return {?}\n */\ndraw(): void {\n      this.setPosition(this.position);\n      this.setZIndex(this.zIndex);\n      this.setVisible(this.visible);\n    }\n/**\n * @return {?}\n */\nonRemove(): void {\n      //\n    }\n/**\n * @return {?}\n */\ngetPosition() {\n      return this.position;\n    }\n\n    setPosition = (position?: any) => {\n      this.htmlEl.style.visibility = 'hidden';\n\n      if (position.constructor.name === 'Array') {\n        this.position = new google.maps.LatLng(position[0], position[1]);\n      } else if (typeof position === 'string') {\n        let /** @type {?} */ geocoder = new google.maps.Geocoder();\n\n        geocoder.geocode({address: position}, (results, status) => {\n          if (status === google.maps.GeocoderStatus.OK) {\n\n            this.setPosition(results[0].geometry.location);\n          } else {\n\n          }\n        });\n      } else if (position && typeof position.lng === 'function') {\n        this.position = position;\n      }\n\n      if (this.getProjection() && typeof this.position.lng === 'function') {\n        let /** @type {?} */ positionOnMap = () => {\n          let /** @type {?} */ posPixel = this.getProjection().fromLatLngToDivPixel(this.position);\n          let /** @type {?} */ x = Math.round(posPixel.x - (this.htmlEl.offsetWidth / 2));\n          let /** @type {?} */ y = Math.round(posPixel.y - this.htmlEl.offsetHeight / 2);\n          this.htmlEl.style.left = x + 'px';\n          this.htmlEl.style.top = y + 'px';\n          this.htmlEl.style.visibility = 'visible';\n        };\n\n        if (this.htmlEl.offsetWidth && this.htmlEl.offsetHeight) {\n          positionOnMap();\n        } else {\n          setTimeout(() => positionOnMap());\n        }\n      }\n    }\n/**\n * @param {?} zIndex\n * @return {?}\n */\nsetZIndex(zIndex: string): void {\n      zIndex && (this.zIndex = zIndex); /* jshint ignore:line */\n      this.htmlEl.style.zIndex = this.zIndex;\n    }\n/**\n * @param {?} visible\n * @return {?}\n */\nsetVisible(visible: boolean) {\n      this.htmlEl.style.display = visible ? 'inline-block' : 'none';\n      this.visible = visible;\n    }\n  }\n\nfunction CustomMarkerOverlayView_tsickle_Closure_declarations() {\n/** @type {?} */\nCustomMarkerOverlayView.prototype.htmlEl;\n/** @type {?} */\nCustomMarkerOverlayView.prototype.position;\n/** @type {?} */\nCustomMarkerOverlayView.prototype.zIndex;\n/** @type {?} */\nCustomMarkerOverlayView.prototype.visible;\n/** @type {?} */\nCustomMarkerOverlayView.prototype.setPosition;\n}\n\n\n  return new CustomMarkerOverlayView(htmlEl, position);\n}\nexport class CustomMarker implements OnInit, OnDestroy, OnChanges {\npublic position: any;\npublic animationChanged: any;\npublic click: any;\npublic clickableChanged: any;\npublic cursorChanged: any;\npublic dblclick: any;\npublic drag: any;\npublic dragend: any;\npublic draggableChanged: any;\npublic dragstart: any;\npublic flatChanged: any;\npublic iconChanged: any;\npublic mousedown: any;\npublic mouseout: any;\npublic mouseover: any;\npublic mouseup: any;\npublic positionChanged: any;\npublic rightclick: any;\npublic shapeChanged: any;\npublic titleChanged: any;\npublic visibleChanged: any;\npublic zindexChanged: any;\npublic map_click: any;\npublic map_mouseover: any;\npublic map_mouseout: any;\npublic map_mouseup: any;\npublic map_mousedown: any;\npublic map_drag: any;\npublic map_dragend: any; // generated by ngc-pre-compiler.js\n\n   initialized$: EventEmitter<any> = new EventEmitter();\npublic inputChanges$ = new Subject();\nprivate el: HTMLElement;\nprivate mapObject: any;\n/**\n * @param {?} nguiMapComponent\n * @param {?} elementRef\n * @param {?} nguiMap\n */\nconstructor(private nguiMapComponent: NguiMapComponent,\nprivate elementRef: ElementRef,\nprivate nguiMap: NguiMap) {\n    this.elementRef.nativeElement.style.display = 'none';\n    OUTPUTS.forEach(output => this[output] = new EventEmitter());\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.nguiMapComponent.mapIdledOnce) { // map is ready already\n      this.initialize();\n    } else {\n      this.nguiMapComponent.mapReady$.subscribe(map => this.initialize());\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    this.inputChanges$.next(changes);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.inputChanges$.complete();\n    this.nguiMapComponent.removeFromMapObjectGroup('CustomMarker', this.mapObject);\n\n    if (this.mapObject) {\n      this.nguiMap.clearObjectEvents(OUTPUTS, this, 'mapObject');\n    }\n  }\n/**\n * @return {?}\n */\nprivate initialize(): void {\n\n    this.el = this.elementRef.nativeElement;\n\n    this.mapObject = getCustomMarkerOverlayView(this.el, this['position']);\n    this.mapObject.setMap(this.nguiMapComponent.map);\n\n    // set google events listeners and emits to this outputs listeners\n    this.nguiMap.setObjectEvents(OUTPUTS, this, 'mapObject');\n\n    // update object when input changes\n    debounceTime.call(this.inputChanges$, 1000)\n      .subscribe((changes: SimpleChanges) => this.nguiMap.updateGoogleObject(this.mapObject, changes));\n\n    this.nguiMapComponent.addToMapObjectGroup('CustomMarker', this.mapObject);\n    this.initialized$.emit(this.mapObject);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ngui-map > custom-marker',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n  template: `\n    <ng-content></ng-content>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NguiMapComponent, },\n{type: ElementRef, },\n{type: NguiMap, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'initialized$': [{ type: Output },],\n};\n}\n\nfunction CustomMarker_tsickle_Closure_declarations() {\n/** @type {?} */\nCustomMarker.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCustomMarker.ctorParameters;\n/** @type {?} */\nCustomMarker.propDecorators;\n/** @type {?} */\nCustomMarker.prototype.position;\n/** @type {?} */\nCustomMarker.prototype.animationChanged;\n/** @type {?} */\nCustomMarker.prototype.click;\n/** @type {?} */\nCustomMarker.prototype.clickableChanged;\n/** @type {?} */\nCustomMarker.prototype.cursorChanged;\n/** @type {?} */\nCustomMarker.prototype.dblclick;\n/** @type {?} */\nCustomMarker.prototype.drag;\n/** @type {?} */\nCustomMarker.prototype.dragend;\n/** @type {?} */\nCustomMarker.prototype.draggableChanged;\n/** @type {?} */\nCustomMarker.prototype.dragstart;\n/** @type {?} */\nCustomMarker.prototype.flatChanged;\n/** @type {?} */\nCustomMarker.prototype.iconChanged;\n/** @type {?} */\nCustomMarker.prototype.mousedown;\n/** @type {?} */\nCustomMarker.prototype.mouseout;\n/** @type {?} */\nCustomMarker.prototype.mouseover;\n/** @type {?} */\nCustomMarker.prototype.mouseup;\n/** @type {?} */\nCustomMarker.prototype.positionChanged;\n/** @type {?} */\nCustomMarker.prototype.rightclick;\n/** @type {?} */\nCustomMarker.prototype.shapeChanged;\n/** @type {?} */\nCustomMarker.prototype.titleChanged;\n/** @type {?} */\nCustomMarker.prototype.visibleChanged;\n/** @type {?} */\nCustomMarker.prototype.zindexChanged;\n/** @type {?} */\nCustomMarker.prototype.map_click;\n/** @type {?} */\nCustomMarker.prototype.map_mouseover;\n/** @type {?} */\nCustomMarker.prototype.map_mouseout;\n/** @type {?} */\nCustomMarker.prototype.map_mouseup;\n/** @type {?} */\nCustomMarker.prototype.map_mousedown;\n/** @type {?} */\nCustomMarker.prototype.map_drag;\n/** @type {?} */\nCustomMarker.prototype.map_dragend;\n/** @type {?} */\nCustomMarker.prototype.initialized$;\n/** @type {?} */\nCustomMarker.prototype.inputChanges$;\n/** @type {?} */\nCustomMarker.prototype.el;\n/** @type {?} */\nCustomMarker.prototype.mapObject;\n/** @type {?} */\nCustomMarker.prototype.nguiMapComponent;\n/** @type {?} */\nCustomMarker.prototype.elementRef;\n/** @type {?} */\nCustomMarker.prototype.nguiMap;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive } from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst /** @type {?} */ INPUTS = [\n  'center', 'clickable', 'draggable', 'editable', 'fillColor', 'fillOpacity', 'map', 'radius',\n  'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight', 'visible', 'zIndex', 'options',\n  // ngui-map specific inputs\n  'geoFallbackCenter'\n];\nconst /** @type {?} */ OUTPUTS = [\n  'centerChanged', 'click', 'dblclick', 'drag', 'dragend', 'dragstart',\n  'mousedown', 'mousemove', 'mouseout', 'mouseover', 'mouseup', 'radiusChanged', 'rightclick',\n];\nexport class Circle extends BaseMapDirective {\npublic center: any;\npublic clickable: any;\npublic draggable: any;\npublic editable: any;\npublic fillColor: any;\npublic fillOpacity: any;\npublic map: any;\npublic radius: any;\npublic strokeColor: any;\npublic strokeOpacity: any;\npublic strokePosition: any;\npublic strokeWeight: any;\npublic visible: any;\npublic zIndex: any;\npublic options: any;\npublic geoFallbackCenter: any;\npublic centerChanged: any;\npublic click: any;\npublic dblclick: any;\npublic drag: any;\npublic dragend: any;\npublic dragstart: any;\npublic mousedown: any;\npublic mousemove: any;\npublic mouseout: any;\npublic mouseover: any;\npublic mouseup: any;\npublic radiusChanged: any;\npublic rightclick: any;\npublic mapObject: google.maps.Circle;\npublic objectOptions: google.maps.CircleOptions = /** @type {?} */(( <google.maps.CircleOptions>{}));\n/**\n * @param {?} nguiMapComp\n */\nconstructor(private nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'Circle', INPUTS, OUTPUTS);\n  }\n/**\n * @return {?}\n */\ninitialize(): void {\n    super.initialize();\n    this.setCenter();\n  }\n/**\n * @return {?}\n */\nsetCenter(): void {\n    if (!this['center']) {\n      this._subscriptions.push(this.nguiMapComp.geolocation.getCurrentPosition().subscribe(\n        center => {\n\n          let /** @type {?} */ latLng = new google.maps.LatLng(center.coords.latitude, center.coords.longitude);\n          this.mapObject.setCenter(latLng);\n        },\n        error => {\n          console.error('ngui-map, error in finding the current position');\n          this.mapObject.setCenter(this.objectOptions['geoFallbackCenter'] || new google.maps.LatLng(0, 0));\n        }\n      ));\n    } else if (typeof this['center'] === 'string') {\n      this._subscriptions.push(this.nguiMapComp.geoCoder.geocode({address: this['center']}).subscribe(\n        results => {\n\n          this.mapObject.setCenter(results[0].geometry.location);\n        },\n        error => {\n          console.error('ngui-map, error in finding location from', this['center']);\n          this.mapObject.setCenter(this.objectOptions['geoFallbackCenter'] || new google.maps.LatLng(0, 0));\n        }\n      ));\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'ngui-map>circle, ngui-map>map-circle',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NguiMapComponent, },\n];\n}\n\nfunction Circle_tsickle_Closure_declarations() {\n/** @type {?} */\nCircle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCircle.ctorParameters;\n/** @type {?} */\nCircle.prototype.center;\n/** @type {?} */\nCircle.prototype.clickable;\n/** @type {?} */\nCircle.prototype.draggable;\n/** @type {?} */\nCircle.prototype.editable;\n/** @type {?} */\nCircle.prototype.fillColor;\n/** @type {?} */\nCircle.prototype.fillOpacity;\n/** @type {?} */\nCircle.prototype.map;\n/** @type {?} */\nCircle.prototype.radius;\n/** @type {?} */\nCircle.prototype.strokeColor;\n/** @type {?} */\nCircle.prototype.strokeOpacity;\n/** @type {?} */\nCircle.prototype.strokePosition;\n/** @type {?} */\nCircle.prototype.strokeWeight;\n/** @type {?} */\nCircle.prototype.visible;\n/** @type {?} */\nCircle.prototype.zIndex;\n/** @type {?} */\nCircle.prototype.options;\n/** @type {?} */\nCircle.prototype.geoFallbackCenter;\n/** @type {?} */\nCircle.prototype.centerChanged;\n/** @type {?} */\nCircle.prototype.click;\n/** @type {?} */\nCircle.prototype.dblclick;\n/** @type {?} */\nCircle.prototype.drag;\n/** @type {?} */\nCircle.prototype.dragend;\n/** @type {?} */\nCircle.prototype.dragstart;\n/** @type {?} */\nCircle.prototype.mousedown;\n/** @type {?} */\nCircle.prototype.mousemove;\n/** @type {?} */\nCircle.prototype.mouseout;\n/** @type {?} */\nCircle.prototype.mouseover;\n/** @type {?} */\nCircle.prototype.mouseup;\n/** @type {?} */\nCircle.prototype.radiusChanged;\n/** @type {?} */\nCircle.prototype.rightclick;\n/** @type {?} */\nCircle.prototype.mapObject;\n/** @type {?} */\nCircle.prototype.objectOptions;\n/** @type {?} */\nCircle.prototype.nguiMapComp;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive } from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst /** @type {?} */ INPUTS = ['controlPosition', 'controls', 'drawingMode', 'featureFactory', 'style', 'geoJson', 'geoJsonUrl'];\nconst /** @type {?} */ OUTPUTS = [\n  'addfeature', 'click', 'dblclick', 'mousedown', 'mouseout', 'mouseover',\n  'mouseup', 'removefeature', 'removeproperty', 'rightclick', 'setgeometry', 'setproperty'\n];\nexport class DataLayer extends BaseMapDirective {\npublic controlPosition: any;\npublic controls: any;\npublic drawingMode: any;\npublic featureFactory: any;\npublic style: any;\npublic geoJson: any;\npublic geoJsonUrl: any;\npublic addfeature: any;\npublic click: any;\npublic dblclick: any;\npublic mousedown: any;\npublic mouseout: any;\npublic mouseover: any;\npublic mouseup: any;\npublic removefeature: any;\npublic removeproperty: any;\npublic rightclick: any;\npublic setgeometry: any;\npublic setproperty: any;\n/**\n * @param {?} nguiMapComponent\n */\nconstructor(nguiMapComponent: NguiMapComponent) {\n    super(nguiMapComponent, 'Data', INPUTS, OUTPUTS);\n  }\n/**\n * @return {?}\n */\ninitialize(): void {\n    if (this['geoJson']) {\n      // addGeoJson from an object\n\n      this.nguiMapComponent.map.data.addGeoJson(this['geoJson']);\n    } else if (this['geoJsonUrl']) {\n      // loadGeoJson from a URL\n\n      this.nguiMapComponent.map.data.loadGeoJson(this['geoJsonUrl']);\n    }\n    else {\n      this.objectOptions = this.optionBuilder.googlizeAllInputs(this.inputs, this);\n\n      this.nguiMapComponent.map.data.add(this.objectOptions);\n    }\n\n    // unlike others, data belongs to map. e.g., map.data.loadGeoJson(), map.data.add()\n    this.mapObject = this.nguiMapComponent.map.data;\n\n    // set google events listeners and emits to this outputs listeners\n    this.nguiMap.setObjectEvents(this.outputs, this, 'mapObject');\n\n    this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName, this.mapObject);\n    this.initialized$.emit(this.mapObject);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'ngui-map > data-layer',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NguiMapComponent, },\n];\n}\n\nfunction DataLayer_tsickle_Closure_declarations() {\n/** @type {?} */\nDataLayer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDataLayer.ctorParameters;\n/** @type {?} */\nDataLayer.prototype.controlPosition;\n/** @type {?} */\nDataLayer.prototype.controls;\n/** @type {?} */\nDataLayer.prototype.drawingMode;\n/** @type {?} */\nDataLayer.prototype.featureFactory;\n/** @type {?} */\nDataLayer.prototype.style;\n/** @type {?} */\nDataLayer.prototype.geoJson;\n/** @type {?} */\nDataLayer.prototype.geoJsonUrl;\n/** @type {?} */\nDataLayer.prototype.addfeature;\n/** @type {?} */\nDataLayer.prototype.click;\n/** @type {?} */\nDataLayer.prototype.dblclick;\n/** @type {?} */\nDataLayer.prototype.mousedown;\n/** @type {?} */\nDataLayer.prototype.mouseout;\n/** @type {?} */\nDataLayer.prototype.mouseover;\n/** @type {?} */\nDataLayer.prototype.mouseup;\n/** @type {?} */\nDataLayer.prototype.removefeature;\n/** @type {?} */\nDataLayer.prototype.removeproperty;\n/** @type {?} */\nDataLayer.prototype.rightclick;\n/** @type {?} */\nDataLayer.prototype.setgeometry;\n/** @type {?} */\nDataLayer.prototype.setproperty;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Input, Directive, SimpleChanges, OnChanges, OnDestroy } from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\nimport { NavigatorGeolocation } from '../services/navigator-geolocation';\n\nconst /** @type {?} */ INPUTS = [\n  'directions', 'draggable', 'hideRouteList', 'infoWindow', 'panel', 'markerOptions',\n  'polylineOptions', 'preserveViewport', 'routeIndex', 'suppressBicyclingLayer',\n  'suppressInfoWindows', 'suppressMarkers', 'suppressPolylines'\n];\nconst /** @type {?} */ OUTPUTS = ['directions_changed'];\nexport class DirectionsRenderer extends BaseMapDirective implements OnChanges, OnDestroy {\npublic directions: any;\npublic draggable: any;\npublic hideRouteList: any;\npublic infoWindow: any;\npublic panel: any;\npublic markerOptions: any;\npublic polylineOptions: any;\npublic preserveViewport: any;\npublic routeIndex: any;\npublic suppressBicyclingLayer: any;\npublic suppressInfoWindows: any;\npublic suppressMarkers: any;\npublic suppressPolylines: any;\npublic directions_changed: any; // generated by ngc-pre-compiler.js\n\n  // tslint:disable-next-line\n   directionsRequest: google.maps.DirectionsRequest;\n\n  directionsService: google.maps.DirectionsService;\n  directionsRenderer: google.maps.DirectionsRenderer;\n/**\n * @param {?} nguiMapComponent\n * @param {?} geolocation\n */\nconstructor(\n    nguiMapComponent: NguiMapComponent,\npublic geolocation: NavigatorGeolocation\n  ) {\n    super(nguiMapComponent, 'DirectionsRenderer', INPUTS, OUTPUTS);\n  }\n/**\n * @return {?}\n */\ninitialize(): void {\n    this.objectOptions = this.optionBuilder.googlizeAllInputs(this.inputs, this);\n    if (typeof this.objectOptions['panel'] === 'string') { // find a Node for panel\n      this.objectOptions['panel'] = document.querySelector(this.objectOptions['panel']);\n    }\n\n\n\n    this.directionsService = new google.maps.DirectionsService();\n    this.directionsRenderer = new google.maps.DirectionsRenderer(this.objectOptions);\n\n    this.directionsRenderer.setMap(this.nguiMapComponent.map);\n\n    // set google events listeners and emidirectionsRenderer to this outputs listeners\n    this.showDirections(this.directionsRequest);\n\n    this.nguiMap.setObjectEvents(this.outputs, this, 'directionsRenderer');\n\n    this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName, this.mapObject);\n    this.initialized$.emit(this.directionsRenderer);\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    let /** @type {?} */ newOptions = {};\n    for (let /** @type {?} */ key in changes) {\n      if (this.inputs.indexOf(key) !== -1) {\n        newOptions[key] = this.optionBuilder.googlize(changes[key].currentValue);\n      }\n    }\n    if (changes['directionsRequest'] && this.directionsRenderer) {\n      this.directionsService && this.showDirections(this.directionsRequest);\n    }\n  }\n/**\n * @param {?} directionsRequest\n * @return {?}\n */\nshowDirections(directionsRequest: google.maps.DirectionsRequest) {\n    this.directionsService.route(directionsRequest,\n      (response: any, status: any) =>  {\n        if (status === google.maps.DirectionsStatus.OK) {\n          this.directionsRenderer.setDirections(response);\n        } else {\n          console.error('Directions request failed due to ' + status);\n        }\n      }\n    );\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    super.ngOnDestroy();\n    this.nguiMap.clearObjectEvents(this.outputs, this, 'directionsRenderer');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'ngui-map > directions-renderer',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NguiMapComponent, },\n{type: NavigatorGeolocation, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'directionsRequest': [{ type: Input, args: ['directions-request', ] },],\n};\n}\n\nfunction DirectionsRenderer_tsickle_Closure_declarations() {\n/** @type {?} */\nDirectionsRenderer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDirectionsRenderer.ctorParameters;\n/** @type {?} */\nDirectionsRenderer.propDecorators;\n/** @type {?} */\nDirectionsRenderer.prototype.directions;\n/** @type {?} */\nDirectionsRenderer.prototype.draggable;\n/** @type {?} */\nDirectionsRenderer.prototype.hideRouteList;\n/** @type {?} */\nDirectionsRenderer.prototype.infoWindow;\n/** @type {?} */\nDirectionsRenderer.prototype.panel;\n/** @type {?} */\nDirectionsRenderer.prototype.markerOptions;\n/** @type {?} */\nDirectionsRenderer.prototype.polylineOptions;\n/** @type {?} */\nDirectionsRenderer.prototype.preserveViewport;\n/** @type {?} */\nDirectionsRenderer.prototype.routeIndex;\n/** @type {?} */\nDirectionsRenderer.prototype.suppressBicyclingLayer;\n/** @type {?} */\nDirectionsRenderer.prototype.suppressInfoWindows;\n/** @type {?} */\nDirectionsRenderer.prototype.suppressMarkers;\n/** @type {?} */\nDirectionsRenderer.prototype.suppressPolylines;\n/** @type {?} */\nDirectionsRenderer.prototype.directions_changed;\n/** @type {?} */\nDirectionsRenderer.prototype.directionsRequest;\n/** @type {?} */\nDirectionsRenderer.prototype.directionsService;\n/** @type {?} */\nDirectionsRenderer.prototype.directionsRenderer;\n/** @type {?} */\nDirectionsRenderer.prototype.geolocation;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive } from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst /** @type {?} */ INPUTS = [\n  'options',\n  'circleOptions', 'drawingControl', 'drawingControlOptions', 'drawingMode',\n  'map', 'markerOptions', 'polygonOptions', 'polylineOptions', 'rectangleOptions'\n];\nconst /** @type {?} */ OUTPUTS = [\n  'circlecomplete', 'markercomplete', 'overlaycomplete',\n  'polygoncomplete', 'polylinecomplete', 'rectanglecomplete'\n];\nexport class DrawingManager extends BaseMapDirective {\npublic options: any;\npublic circleOptions: any;\npublic drawingControl: any;\npublic drawingControlOptions: any;\npublic drawingMode: any;\npublic map: any;\npublic markerOptions: any;\npublic polygonOptions: any;\npublic polylineOptions: any;\npublic rectangleOptions: any;\npublic circlecomplete: any;\npublic markercomplete: any;\npublic overlaycomplete: any;\npublic polygoncomplete: any;\npublic polylinecomplete: any;\npublic rectanglecomplete: any;\n/**\n * @param {?} nguiMapComp\n */\nconstructor(nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'DrawingManager', INPUTS, OUTPUTS);\n    this.libraryName = 'drawing';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'ngui-map > drawing-manager',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NguiMapComponent, },\n];\n}\n\nfunction DrawingManager_tsickle_Closure_declarations() {\n/** @type {?} */\nDrawingManager.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDrawingManager.ctorParameters;\n/** @type {?} */\nDrawingManager.prototype.options;\n/** @type {?} */\nDrawingManager.prototype.circleOptions;\n/** @type {?} */\nDrawingManager.prototype.drawingControl;\n/** @type {?} */\nDrawingManager.prototype.drawingControlOptions;\n/** @type {?} */\nDrawingManager.prototype.drawingMode;\n/** @type {?} */\nDrawingManager.prototype.map;\n/** @type {?} */\nDrawingManager.prototype.markerOptions;\n/** @type {?} */\nDrawingManager.prototype.polygonOptions;\n/** @type {?} */\nDrawingManager.prototype.polylineOptions;\n/** @type {?} */\nDrawingManager.prototype.rectangleOptions;\n/** @type {?} */\nDrawingManager.prototype.circlecomplete;\n/** @type {?} */\nDrawingManager.prototype.markercomplete;\n/** @type {?} */\nDrawingManager.prototype.overlaycomplete;\n/** @type {?} */\nDrawingManager.prototype.polygoncomplete;\n/** @type {?} */\nDrawingManager.prototype.polylinecomplete;\n/** @type {?} */\nDrawingManager.prototype.rectanglecomplete;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive } from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst /** @type {?} */ INPUTS = [ 'url', 'bounds', 'clickable', 'opacity' ];\nconst /** @type {?} */ OUTPUTS = [ 'click', 'dblclick' ];\nexport class GroundOverlay extends BaseMapDirective {\npublic url: any;\npublic bounds: any;\npublic clickable: any;\npublic opacity: any;\npublic click: any;\npublic dblclick: any;\npublic mapObject: google.maps.GroundOverlay;\npublic objectOptions: google.maps.GroundOverlayOptions = /** @type {?} */(( <google.maps.GroundOverlayOptions>{}));\n/**\n * @param {?} nguiMapComp\n */\nconstructor(nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'GroundOverlay', INPUTS, OUTPUTS);\n  }\n/**\n * @return {?}\n */\ninitialize(): void {\n    // url, bounds are not the options of GroundOverlay\n    this.objectOptions = this.optionBuilder.googlizeAllInputs(['clickable', 'opacity'], this);\n\n\n    // noinspection TypeScriptUnresolvedFunction\n    this.mapObject = new google.maps.GroundOverlay(this['url'], this['bounds'], this.objectOptions);\n    this.mapObject.setMap(this.nguiMapComponent.map);\n    this.mapObject['mapObjectName'] = this.mapObjectName;\n\n    // set google events listeners and emits to this outputs listeners\n    this.nguiMap.setObjectEvents(this.outputs, this, 'mapObject');\n\n    this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName, this.mapObject);\n    this.initialized$.emit(this.mapObject);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'ngui-map > ground-overlay',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NguiMapComponent, },\n];\n}\n\nfunction GroundOverlay_tsickle_Closure_declarations() {\n/** @type {?} */\nGroundOverlay.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGroundOverlay.ctorParameters;\n/** @type {?} */\nGroundOverlay.prototype.url;\n/** @type {?} */\nGroundOverlay.prototype.bounds;\n/** @type {?} */\nGroundOverlay.prototype.clickable;\n/** @type {?} */\nGroundOverlay.prototype.opacity;\n/** @type {?} */\nGroundOverlay.prototype.click;\n/** @type {?} */\nGroundOverlay.prototype.dblclick;\n/** @type {?} */\nGroundOverlay.prototype.mapObject;\n/** @type {?} */\nGroundOverlay.prototype.objectOptions;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive } from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst /** @type {?} */ INPUTS = [ 'data', 'dissipating', 'gradient', 'maxIntensity', 'opacity', 'radius', 'options' ];\nconst /** @type {?} */ OUTPUTS = [];\nexport class HeatmapLayer extends BaseMapDirective {\npublic data: any;\npublic dissipating: any;\npublic gradient: any;\npublic maxIntensity: any;\npublic opacity: any;\npublic radius: any;\npublic options: any;\npublic libraryName = 'visualization';\n/**\n * @param {?} nguiMapComp\n */\nconstructor(nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'HeatmapLayer', INPUTS, OUTPUTS);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'ngui-map > heatmap-layer',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NguiMapComponent, },\n];\n}\n\nfunction HeatmapLayer_tsickle_Closure_declarations() {\n/** @type {?} */\nHeatmapLayer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHeatmapLayer.ctorParameters;\n/** @type {?} */\nHeatmapLayer.prototype.data;\n/** @type {?} */\nHeatmapLayer.prototype.dissipating;\n/** @type {?} */\nHeatmapLayer.prototype.gradient;\n/** @type {?} */\nHeatmapLayer.prototype.maxIntensity;\n/** @type {?} */\nHeatmapLayer.prototype.opacity;\n/** @type {?} */\nHeatmapLayer.prototype.radius;\n/** @type {?} */\nHeatmapLayer.prototype.options;\n/** @type {?} */\nHeatmapLayer.prototype.libraryName;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive } from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst /** @type {?} */ INPUTS = [ 'clickable', 'preserveViewport', 'screenOverlays', 'suppressInfoWindows', 'url', 'zIndex', 'options' ];\nconst /** @type {?} */ OUTPUTS = [ 'click', 'defaultviewport_changed', 'status_changed' ];\nexport class KmlLayer extends BaseMapDirective {\npublic clickable: any;\npublic preserveViewport: any;\npublic screenOverlays: any;\npublic suppressInfoWindows: any;\npublic url: any;\npublic zIndex: any;\npublic options: any;\npublic click: any;\npublic defaultviewport_changed: any;\npublic status_changed: any;\n/**\n * @param {?} nguiMapComp\n */\nconstructor(nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'KmlLayer', INPUTS, OUTPUTS);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'ngui-map > kml-layer',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NguiMapComponent, },\n];\n}\n\nfunction KmlLayer_tsickle_Closure_declarations() {\n/** @type {?} */\nKmlLayer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nKmlLayer.ctorParameters;\n/** @type {?} */\nKmlLayer.prototype.clickable;\n/** @type {?} */\nKmlLayer.prototype.preserveViewport;\n/** @type {?} */\nKmlLayer.prototype.screenOverlays;\n/** @type {?} */\nKmlLayer.prototype.suppressInfoWindows;\n/** @type {?} */\nKmlLayer.prototype.url;\n/** @type {?} */\nKmlLayer.prototype.zIndex;\n/** @type {?} */\nKmlLayer.prototype.options;\n/** @type {?} */\nKmlLayer.prototype.click;\n/** @type {?} */\nKmlLayer.prototype.defaultviewport_changed;\n/** @type {?} */\nKmlLayer.prototype.status_changed;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Directive, OnInit} from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst /** @type {?} */ INPUTS = [\n  'anchorPoint', 'animation', 'clickable', 'cursor', 'draggable', 'icon', 'label', 'opacity',\n  'optimized', 'place', 'position', 'shape', 'title', 'visible', 'zIndex', 'options',\n  // ngui-map specific inputs\n  'geoFallbackPosition'\n];\nconst /** @type {?} */ OUTPUTS = [\n  'animationChanged', 'click', 'clickableChanged', 'cursorChanged', 'dblclick', 'drag', 'dragend', 'draggableChanged',\n  'dragstart', 'flatChanged', 'iconChanged', 'mousedown', 'mouseout', 'mouseover', 'mouseup', 'positionChanged', 'rightclick',\n  'shapeChanged', 'titleChanged', 'visibleChanged', 'zindexChanged'\n];\nexport class Marker extends BaseMapDirective implements OnInit {\npublic anchorPoint: any;\npublic animation: any;\npublic clickable: any;\npublic cursor: any;\npublic draggable: any;\npublic icon: any;\npublic label: any;\npublic opacity: any;\npublic optimized: any;\npublic place: any;\npublic position: any;\npublic shape: any;\npublic title: any;\npublic visible: any;\npublic zIndex: any;\npublic options: any;\npublic geoFallbackPosition: any;\npublic animationChanged: any;\npublic click: any;\npublic clickableChanged: any;\npublic cursorChanged: any;\npublic dblclick: any;\npublic drag: any;\npublic dragend: any;\npublic draggableChanged: any;\npublic dragstart: any;\npublic flatChanged: any;\npublic iconChanged: any;\npublic mousedown: any;\npublic mouseout: any;\npublic mouseover: any;\npublic mouseup: any;\npublic positionChanged: any;\npublic rightclick: any;\npublic shapeChanged: any;\npublic titleChanged: any;\npublic visibleChanged: any;\npublic zindexChanged: any;\npublic mapObject: google.maps.Marker;\npublic objectOptions: google.maps.MarkerOptions = /** @type {?} */(( <google.maps.MarkerOptions>{}));\n/**\n * @param {?} nguiMapComp\n */\nconstructor(private nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'Marker', INPUTS, OUTPUTS);\n\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.nguiMapComponent.mapIdledOnce) { // map is ready already\n      this.initialize();\n    } else {\n      this.nguiMapComponent.mapReady$.subscribe(map => this.initialize());\n    }\n  }\n/**\n * @return {?}\n */\ninitialize(): void {\n    super.initialize();\n    this.setPosition();\n  }\n/**\n * @return {?}\n */\nsetPosition(): void {\n    if (!this['position']) {\n      this._subscriptions.push(this.nguiMapComp.geolocation.getCurrentPosition().subscribe(\n        position => {\n\n          let /** @type {?} */ latLng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);\n          this.mapObject.setPosition(latLng);\n        },\n        error => {\n          console.error('ngui-map, error finding the current location');\n          this.mapObject.setPosition(this.objectOptions['geoFallbackPosition'] || new google.maps.LatLng(0, 0));\n        }\n      ));\n    } else if (typeof this['position'] === 'string') {\n      this._subscriptions.push(this.nguiMapComp.geoCoder.geocode({address: this['position']}).subscribe(\n        results => {\n\n          this.mapObject.setPosition(results[0].geometry.location);\n        },\n        error => {\n          console.error('ngui-map, error finding the location from', this['position']);\n          this.mapObject.setPosition(this.objectOptions['geoFallbackPosition'] || new google.maps.LatLng(0, 0));\n        }\n      ));\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'ngui-map > marker',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NguiMapComponent, },\n];\n}\n\nfunction Marker_tsickle_Closure_declarations() {\n/** @type {?} */\nMarker.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMarker.ctorParameters;\n/** @type {?} */\nMarker.prototype.anchorPoint;\n/** @type {?} */\nMarker.prototype.animation;\n/** @type {?} */\nMarker.prototype.clickable;\n/** @type {?} */\nMarker.prototype.cursor;\n/** @type {?} */\nMarker.prototype.draggable;\n/** @type {?} */\nMarker.prototype.icon;\n/** @type {?} */\nMarker.prototype.label;\n/** @type {?} */\nMarker.prototype.opacity;\n/** @type {?} */\nMarker.prototype.optimized;\n/** @type {?} */\nMarker.prototype.place;\n/** @type {?} */\nMarker.prototype.position;\n/** @type {?} */\nMarker.prototype.shape;\n/** @type {?} */\nMarker.prototype.title;\n/** @type {?} */\nMarker.prototype.visible;\n/** @type {?} */\nMarker.prototype.zIndex;\n/** @type {?} */\nMarker.prototype.options;\n/** @type {?} */\nMarker.prototype.geoFallbackPosition;\n/** @type {?} */\nMarker.prototype.animationChanged;\n/** @type {?} */\nMarker.prototype.click;\n/** @type {?} */\nMarker.prototype.clickableChanged;\n/** @type {?} */\nMarker.prototype.cursorChanged;\n/** @type {?} */\nMarker.prototype.dblclick;\n/** @type {?} */\nMarker.prototype.drag;\n/** @type {?} */\nMarker.prototype.dragend;\n/** @type {?} */\nMarker.prototype.draggableChanged;\n/** @type {?} */\nMarker.prototype.dragstart;\n/** @type {?} */\nMarker.prototype.flatChanged;\n/** @type {?} */\nMarker.prototype.iconChanged;\n/** @type {?} */\nMarker.prototype.mousedown;\n/** @type {?} */\nMarker.prototype.mouseout;\n/** @type {?} */\nMarker.prototype.mouseover;\n/** @type {?} */\nMarker.prototype.mouseup;\n/** @type {?} */\nMarker.prototype.positionChanged;\n/** @type {?} */\nMarker.prototype.rightclick;\n/** @type {?} */\nMarker.prototype.shapeChanged;\n/** @type {?} */\nMarker.prototype.titleChanged;\n/** @type {?} */\nMarker.prototype.visibleChanged;\n/** @type {?} */\nMarker.prototype.zindexChanged;\n/** @type {?} */\nMarker.prototype.mapObject;\n/** @type {?} */\nMarker.prototype.objectOptions;\n/** @type {?} */\nMarker.prototype.nguiMapComp;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Input,\n  Output,\n  Directive,\n  EventEmitter,\n  ElementRef,\n} from '@angular/core';\n\nimport { NgMapApiLoader } from '../services/api-loader';\nimport { OptionBuilder } from '../services/option-builder';\nexport class PlacesAutoComplete {\n   bounds: any;\n   componentRestrictions: any;\n   types: string[];\n\n   place_changed: EventEmitter<any> = new EventEmitter();\n   initialized$: EventEmitter<any> = new EventEmitter();\npublic objectOptions: any;\npublic autocomplete: google.maps.places.Autocomplete;\n/**\n * @param {?} optionBuilder\n * @param {?} elementRef\n * @param {?} apiLoader\n */\nconstructor(\npublic optionBuilder: OptionBuilder,\npublic elementRef: ElementRef,\npublic apiLoader: NgMapApiLoader,\n  ) {\n    apiLoader.load();\n    apiLoader.api$.subscribe(() => this.initialize());\n  }\n\n  // only called when map is ready\n  initialize = (): void => {\n    this.objectOptions =\n      this.optionBuilder.googlizeAllInputs(['bounds', 'componentRestrictions', 'types'], this);\n\n\n    this.autocomplete = new google.maps.places.Autocomplete(\n      this.elementRef.nativeElement,\n      this.objectOptions\n    );\n\n\n    this.autocomplete.addListener('place_changed', place => {\n      this.place_changed.emit(this.autocomplete.getPlace());\n    });\n\n    this.initialized$.emit(this.autocomplete);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[places-auto-complete]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: OptionBuilder, },\n{type: ElementRef, },\n{type: NgMapApiLoader, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'bounds': [{ type: Input, args: ['bounds', ] },],\n'componentRestrictions': [{ type: Input, args: ['componentRestrictions', ] },],\n'types': [{ type: Input, args: ['types', ] },],\n'place_changed': [{ type: Output, args: ['place_changed', ] },],\n'initialized$': [{ type: Output },],\n};\n}\n\nfunction PlacesAutoComplete_tsickle_Closure_declarations() {\n/** @type {?} */\nPlacesAutoComplete.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPlacesAutoComplete.ctorParameters;\n/** @type {?} */\nPlacesAutoComplete.propDecorators;\n/** @type {?} */\nPlacesAutoComplete.prototype.bounds;\n/** @type {?} */\nPlacesAutoComplete.prototype.componentRestrictions;\n/** @type {?} */\nPlacesAutoComplete.prototype.types;\n/** @type {?} */\nPlacesAutoComplete.prototype.place_changed;\n/** @type {?} */\nPlacesAutoComplete.prototype.initialized$;\n/** @type {?} */\nPlacesAutoComplete.prototype.objectOptions;\n/** @type {?} */\nPlacesAutoComplete.prototype.autocomplete;\n/** @type {?} */\nPlacesAutoComplete.prototype.initialize;\n/** @type {?} */\nPlacesAutoComplete.prototype.optionBuilder;\n/** @type {?} */\nPlacesAutoComplete.prototype.elementRef;\n/** @type {?} */\nPlacesAutoComplete.prototype.apiLoader;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive } from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst /** @type {?} */ INPUTS = [\n  'clickable', 'draggable', 'editable', 'fillColor', 'fillOpacity', 'geodesic', 'paths',\n  'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight', 'visible', 'zIndex', 'options',\n];\nconst /** @type {?} */ OUTPUTS = [\n  'click', 'dblclick', 'drag', 'dragend', 'dragstart', 'mousedown',\n  'mousemove', 'mouseout', 'mouseover', 'mouseup', 'rightclick',\n];\nexport class Polygon extends BaseMapDirective {\npublic clickable: any;\npublic draggable: any;\npublic editable: any;\npublic fillColor: any;\npublic fillOpacity: any;\npublic geodesic: any;\npublic paths: any;\npublic strokeColor: any;\npublic strokeOpacity: any;\npublic strokePosition: any;\npublic strokeWeight: any;\npublic visible: any;\npublic zIndex: any;\npublic options: any;\npublic click: any;\npublic dblclick: any;\npublic drag: any;\npublic dragend: any;\npublic dragstart: any;\npublic mousedown: any;\npublic mousemove: any;\npublic mouseout: any;\npublic mouseover: any;\npublic mouseup: any;\npublic rightclick: any;\n/**\n * @param {?} nguiMapComp\n */\nconstructor(nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'Polygon', INPUTS, OUTPUTS);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'ngui-map>polygon, ngui-map>map-polygon',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NguiMapComponent, },\n];\n}\n\nfunction Polygon_tsickle_Closure_declarations() {\n/** @type {?} */\nPolygon.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPolygon.ctorParameters;\n/** @type {?} */\nPolygon.prototype.clickable;\n/** @type {?} */\nPolygon.prototype.draggable;\n/** @type {?} */\nPolygon.prototype.editable;\n/** @type {?} */\nPolygon.prototype.fillColor;\n/** @type {?} */\nPolygon.prototype.fillOpacity;\n/** @type {?} */\nPolygon.prototype.geodesic;\n/** @type {?} */\nPolygon.prototype.paths;\n/** @type {?} */\nPolygon.prototype.strokeColor;\n/** @type {?} */\nPolygon.prototype.strokeOpacity;\n/** @type {?} */\nPolygon.prototype.strokePosition;\n/** @type {?} */\nPolygon.prototype.strokeWeight;\n/** @type {?} */\nPolygon.prototype.visible;\n/** @type {?} */\nPolygon.prototype.zIndex;\n/** @type {?} */\nPolygon.prototype.options;\n/** @type {?} */\nPolygon.prototype.click;\n/** @type {?} */\nPolygon.prototype.dblclick;\n/** @type {?} */\nPolygon.prototype.drag;\n/** @type {?} */\nPolygon.prototype.dragend;\n/** @type {?} */\nPolygon.prototype.dragstart;\n/** @type {?} */\nPolygon.prototype.mousedown;\n/** @type {?} */\nPolygon.prototype.mousemove;\n/** @type {?} */\nPolygon.prototype.mouseout;\n/** @type {?} */\nPolygon.prototype.mouseover;\n/** @type {?} */\nPolygon.prototype.mouseup;\n/** @type {?} */\nPolygon.prototype.rightclick;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive } from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst /** @type {?} */ INPUTS = [\n  'clickable', 'draggable', 'editable', 'geodesic', 'icons', 'path', 'strokeColor',\n  'strokeOpacity', 'strokeWeight', 'visible', 'zIndex', 'options'\n];\nconst /** @type {?} */ OUTPUTS = [\n  'click', 'dblclick', 'drag', 'dragend', 'dragstart', 'mousedown',\n  'mousemove', 'mouseout', 'mouseover', 'mouseup', 'rightclick'\n];\nexport class Polyline extends BaseMapDirective {\npublic clickable: any;\npublic draggable: any;\npublic editable: any;\npublic geodesic: any;\npublic icons: any;\npublic path: any;\npublic strokeColor: any;\npublic strokeOpacity: any;\npublic strokeWeight: any;\npublic visible: any;\npublic zIndex: any;\npublic options: any;\npublic click: any;\npublic dblclick: any;\npublic drag: any;\npublic dragend: any;\npublic dragstart: any;\npublic mousedown: any;\npublic mousemove: any;\npublic mouseout: any;\npublic mouseover: any;\npublic mouseup: any;\npublic rightclick: any;\n/**\n * @param {?} nguiMapComp\n */\nconstructor(nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'Polyline', INPUTS, OUTPUTS);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'ngui-map > polyline',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NguiMapComponent, },\n];\n}\n\nfunction Polyline_tsickle_Closure_declarations() {\n/** @type {?} */\nPolyline.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPolyline.ctorParameters;\n/** @type {?} */\nPolyline.prototype.clickable;\n/** @type {?} */\nPolyline.prototype.draggable;\n/** @type {?} */\nPolyline.prototype.editable;\n/** @type {?} */\nPolyline.prototype.geodesic;\n/** @type {?} */\nPolyline.prototype.icons;\n/** @type {?} */\nPolyline.prototype.path;\n/** @type {?} */\nPolyline.prototype.strokeColor;\n/** @type {?} */\nPolyline.prototype.strokeOpacity;\n/** @type {?} */\nPolyline.prototype.strokeWeight;\n/** @type {?} */\nPolyline.prototype.visible;\n/** @type {?} */\nPolyline.prototype.zIndex;\n/** @type {?} */\nPolyline.prototype.options;\n/** @type {?} */\nPolyline.prototype.click;\n/** @type {?} */\nPolyline.prototype.dblclick;\n/** @type {?} */\nPolyline.prototype.drag;\n/** @type {?} */\nPolyline.prototype.dragend;\n/** @type {?} */\nPolyline.prototype.dragstart;\n/** @type {?} */\nPolyline.prototype.mousedown;\n/** @type {?} */\nPolyline.prototype.mousemove;\n/** @type {?} */\nPolyline.prototype.mouseout;\n/** @type {?} */\nPolyline.prototype.mouseover;\n/** @type {?} */\nPolyline.prototype.mouseup;\n/** @type {?} */\nPolyline.prototype.rightclick;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Directive, OnDestroy} from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst /** @type {?} */ INPUTS = [\n  'selector', 'options',\n  'addressControl', 'addressControlOptions', 'clickToGo', 'disableDefaultUI', 'disableDoubleClickZoom',\n  'enableCloseButton', 'fullscreenControl', 'fullscreenControlOptions', 'imageDateControl', 'linksControl',\n  'motionTracking', 'motionTrackingControl', 'panControl', 'panControlOptions', 'pano',\n  'position', 'pov', 'scrollwheel', 'showRoadLabels', 'visible', 'zoomControl', 'zoomControlOptions'\n];\nconst /** @type {?} */ OUTPUTS = [\n  'closeclick', 'pano_changed', 'position_changed', 'pov_changed', 'resize', 'status_changed',\n  'visible_changed', 'zoom_changed'\n];\nexport class StreetViewPanorama extends BaseMapDirective implements OnDestroy {\npublic selector: any;\npublic options: any;\npublic addressControl: any;\npublic addressControlOptions: any;\npublic clickToGo: any;\npublic disableDefaultUI: any;\npublic disableDoubleClickZoom: any;\npublic enableCloseButton: any;\npublic fullscreenControl: any;\npublic fullscreenControlOptions: any;\npublic imageDateControl: any;\npublic linksControl: any;\npublic motionTracking: any;\npublic motionTrackingControl: any;\npublic panControl: any;\npublic panControlOptions: any;\npublic pano: any;\npublic position: any;\npublic pov: any;\npublic scrollwheel: any;\npublic showRoadLabels: any;\npublic visible: any;\npublic zoomControl: any;\npublic zoomControlOptions: any;\npublic closeclick: any;\npublic pano_changed: any;\npublic position_changed: any;\npublic pov_changed: any;\npublic resize: any;\npublic status_changed: any;\npublic visible_changed: any;\npublic zoom_changed: any;\n/**\n * @param {?} nguiMapComp\n */\nconstructor(nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'StreetViewPanorama', INPUTS, OUTPUTS);\n  }\n/**\n * @return {?}\n */\ninitialize(): void {\n    this.objectOptions = this.optionBuilder.googlizeAllInputs(this.inputs, this);\n\n\n    let /** @type {?} */ element: HTMLElement;\n    if (this.objectOptions.selector) {\n      // noinspection TypeScriptValidateTypes\n      element = document.querySelector(this['selector']);\n      delete this.objectOptions.selector;\n    } else {\n      element = this.nguiMapComponent.el;\n    }\n\n    // will be set after geocoded\n    typeof this.objectOptions.position === 'string' && (delete this.objectOptions.position);\n\n    this.mapObject = new google.maps[this.mapObjectName](element, this.objectOptions);\n    this.mapObject['mapObjectName'] = this.mapObjectName;\n    this.mapObject['nguiMapComponent'] = this.nguiMapComponent;\n\n    // set google events listeners and emits to this outputs listeners\n    this.nguiMap.setObjectEvents(this.outputs, this, 'mapObject');\n\n    this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName, this.mapObject);\n    this.initialized$.emit(this.mapObject);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this.nguiMapComponent.el) {\n      this.nguiMap.clearObjectEvents(this.outputs, this, 'mapObject');\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'ngui-map > street-view-panorama',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NguiMapComponent, },\n];\n}\n\nfunction StreetViewPanorama_tsickle_Closure_declarations() {\n/** @type {?} */\nStreetViewPanorama.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStreetViewPanorama.ctorParameters;\n/** @type {?} */\nStreetViewPanorama.prototype.selector;\n/** @type {?} */\nStreetViewPanorama.prototype.options;\n/** @type {?} */\nStreetViewPanorama.prototype.addressControl;\n/** @type {?} */\nStreetViewPanorama.prototype.addressControlOptions;\n/** @type {?} */\nStreetViewPanorama.prototype.clickToGo;\n/** @type {?} */\nStreetViewPanorama.prototype.disableDefaultUI;\n/** @type {?} */\nStreetViewPanorama.prototype.disableDoubleClickZoom;\n/** @type {?} */\nStreetViewPanorama.prototype.enableCloseButton;\n/** @type {?} */\nStreetViewPanorama.prototype.fullscreenControl;\n/** @type {?} */\nStreetViewPanorama.prototype.fullscreenControlOptions;\n/** @type {?} */\nStreetViewPanorama.prototype.imageDateControl;\n/** @type {?} */\nStreetViewPanorama.prototype.linksControl;\n/** @type {?} */\nStreetViewPanorama.prototype.motionTracking;\n/** @type {?} */\nStreetViewPanorama.prototype.motionTrackingControl;\n/** @type {?} */\nStreetViewPanorama.prototype.panControl;\n/** @type {?} */\nStreetViewPanorama.prototype.panControlOptions;\n/** @type {?} */\nStreetViewPanorama.prototype.pano;\n/** @type {?} */\nStreetViewPanorama.prototype.position;\n/** @type {?} */\nStreetViewPanorama.prototype.pov;\n/** @type {?} */\nStreetViewPanorama.prototype.scrollwheel;\n/** @type {?} */\nStreetViewPanorama.prototype.showRoadLabels;\n/** @type {?} */\nStreetViewPanorama.prototype.visible;\n/** @type {?} */\nStreetViewPanorama.prototype.zoomControl;\n/** @type {?} */\nStreetViewPanorama.prototype.zoomControlOptions;\n/** @type {?} */\nStreetViewPanorama.prototype.closeclick;\n/** @type {?} */\nStreetViewPanorama.prototype.pano_changed;\n/** @type {?} */\nStreetViewPanorama.prototype.position_changed;\n/** @type {?} */\nStreetViewPanorama.prototype.pov_changed;\n/** @type {?} */\nStreetViewPanorama.prototype.resize;\n/** @type {?} */\nStreetViewPanorama.prototype.status_changed;\n/** @type {?} */\nStreetViewPanorama.prototype.visible_changed;\n/** @type {?} */\nStreetViewPanorama.prototype.zoom_changed;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive } from '@angular/core';\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst /** @type {?} */ INPUTS = ['autoRefresh', 'options' ];\nconst /** @type {?} */ OUTPUTS = [ ];\nexport class TrafficLayer extends BaseMapDirective {\npublic autoRefresh: any;\npublic options: any;\n/**\n * @param {?} nguiMapComp\n */\nconstructor(nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'TrafficLayer', INPUTS, OUTPUTS);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'ngui-map > traffic-layer',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NguiMapComponent, },\n];\n}\n\nfunction TrafficLayer_tsickle_Closure_declarations() {\n/** @type {?} */\nTrafficLayer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTrafficLayer.ctorParameters;\n/** @type {?} */\nTrafficLayer.prototype.autoRefresh;\n/** @type {?} */\nTrafficLayer.prototype.options;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive } from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst /** @type {?} */ INPUTS = [];\nconst /** @type {?} */ OUTPUTS = [ ];\nexport class TransitLayer extends BaseMapDirective {\n/**\n * @param {?} nguiMapComp\n */\nconstructor(nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'TransitLayer', INPUTS, OUTPUTS);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'ngui-map > transit-layer',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NguiMapComponent, },\n];\n}\n\nfunction TransitLayer_tsickle_Closure_declarations() {\n/** @type {?} */\nTransitLayer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTransitLayer.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OptionBuilder } from './services/option-builder';\nimport { GeoCoder } from './services/geo-coder';\nimport { NavigatorGeolocation } from './services/navigator-geolocation';\nimport { NG_MAP_CONFIG_TOKEN, ConfigOption } from './services/config';\nimport { NgMapApiLoader, NgMapAsyncCallbackApiLoader } from './services/api-loader';\n\nimport { NguiMapComponent } from './components/ngui-map.component';\nimport { InfoWindow } from './components/info-window';\nimport { CustomMarker } from './components/custom-marker';\n\nimport { BicyclingLayer } from './directives/bicycling-layer';\nimport { Circle } from './directives/circle';\nimport { DataLayer } from './directives/data-layer';\nimport { DirectionsRenderer } from './directives/directions-renderer';\nimport { DrawingManager } from './directives/drawing-manager';\nimport { GroundOverlay } from './directives/ground-overlay';\nimport { HeatmapLayer } from './directives/heatmap-layer';\nimport { KmlLayer } from './directives/kml-layer';\nimport { Marker } from './directives/marker';\nimport { NguiMap } from './services/ngui-map';\nimport { PlacesAutoComplete } from './directives/places-auto-complete';\nimport { Polygon } from './directives/polygon';\nimport { Polyline } from './directives/polyline';\nimport { StreetViewPanorama } from './directives/street-view-panorama';\nimport { TrafficLayer } from './directives/traffic-layer';\nimport { TransitLayer } from './directives/transit-layer';\n\nconst /** @type {?} */ COMPONENTS_DIRECTIVES = [\n  NguiMapComponent, InfoWindow,\n  Marker, Circle, CustomMarker, Polygon, InfoWindow, Polyline, GroundOverlay,\n  TransitLayer, TrafficLayer, HeatmapLayer, BicyclingLayer, KmlLayer, DataLayer,\n  StreetViewPanorama, PlacesAutoComplete, DirectionsRenderer,\n  DrawingManager,\n];\nexport class NguiMapModule {\n/**\n * @param {?=} config\n * @return {?}\n */\nstatic forRoot(config: ConfigOption = {}): ModuleWithProviders {\n    return {\n      ngModule: NguiMapModule,\n      providers: [\n        { provide: NG_MAP_CONFIG_TOKEN, useValue: config }\n      ],\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [ CommonModule ],\n  declarations: COMPONENTS_DIRECTIVES,\n  exports: [COMPONENTS_DIRECTIVES],\n  providers: [\n    GeoCoder,\n    NavigatorGeolocation,\n    NguiMap,\n    OptionBuilder,\n    {provide: NgMapApiLoader, useClass: NgMapAsyncCallbackApiLoader},\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NguiMapModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNguiMapModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNguiMapModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["toCamelCase","str","replace","letter","index","toLowerCase","toUpperCase","isMapsApiLoaded","google","maps","BaseMapDirective","nguiMapComponent","mapObjectName","inputs","outputs","_this","this","initialized$","EventEmitter","_subscriptions","nguiMap","optionBuilder","forEach","output","prototype","ngOnInit","mapIdledOnce","initialize","mapReady$","subscribe","map","objectOptions","googlizeAllInputs","position","center","libraryName","mapObject","setMap","setObjectEvents","addToMapObjectGroup","emit","ngOnChanges","changes","updateGoogleObject","ngOnDestroy","subscription","unsubscribe","removeFromMapObjectGroup","clearObjectEvents","propDecorators","type","Output","OptionBuilder","definedInputs","userInputs","options","console","log","onlyOptionsGiven","error","input","undefined","googlize","key","googlizeMultiple","val","match","getJSONParsed","getAnyMapObject","getAnyMapConstant","getDateObject","Array","LatLngBounds","getMapIcons","getLatLng","Object","getMarkerIcon","getMapControlOption","constructor","el","LatLng","isNaN","parseFloat","isFinite","JSON","parse","e","_","$1","jsonize","getJSON","newOptions","Function","matches","capitalizedKey","charAt","slice","controlOptions","newControlOptions","value","MapTypeId","objName","ControlPosition","Date","icon","path","SymbolPath","arr","Point","Size","i","length","decorators","Injectable","ctorParameters","NavigatorGeolocation","getCurrentPosition","geoLocationOptions","timeout","Observable","responseObserver","navigator","geolocation","next","complete","evt","NG_MAP_CONFIG_TOKEN","InjectionToken","NgMapApiLoader","config","api$","first","call","ReplaySubject","apiUrl","load","NgMapAsyncCallbackApiLoader","_super","zone","__extends","window","document","querySelector","push","componentFn","addGoogleMapsApi","nguiMapRef","run","splice","script","createElement","id","indexOf","src","appendChild","NgZone","Optional","Inject","args","NgMapAsyncApiLoader","async","onload","GeoCoder","apiLoader","apiLoaderSubs","geocode","requestGeocode","sub","observer","Geocoder","results","status","GeocoderStatus","OK","NguiMap","geoCoder","object","currentValue","setMethodName","x","address","geometry","location","definedEvents","thisObj","prefix","definedEvent","eventName","runOutsideAngular","addListener","event","param","target","clearListeners","INPUTS","OUTPUTS","NguiMapComponent","elementRef","mapOptions","inputChanges$","Subject","infoWindows","initializeMapAfterDisplayed","ngAfterViewInit","apiLoaderSub","initializeMap","ngAfterViewChecked","offsetWidth","nativeElement","zoom","Map","setCenter","setTimeout","debounceTime","latLng","coords","latitude","longitude","openInfoWindow","anchor","open","closeInfoWindow","close","groupName","Component","selector","providers","styles","encapsulation","ViewEncapsulation","None","template","ElementRef","BicyclingLayer","nguiMapComp","Directive","InfoWindow","style","display","infoWindow","setContent","element","ViewChild","read","ViewContainerRef","CustomMarker","htmlEl","CustomMarkerOverlayView","visible","setPosition","visibility","name","lng","getProjection","positionOnMap_1","posPixel","fromLatLngToDivPixel","Math","round","y","offsetHeight","left","top","onAdd","getPanes","overlayMouseTarget","draw","setZIndex","zIndex","setVisible","onRemove","getPosition","OverlayView","getCustomMarkerOverlayView","Circle","DataLayer","data","addGeoJson","loadGeoJson","add","DirectionsRenderer","directionsService","DirectionsService","directionsRenderer","showDirections","directionsRequest","route","response","DirectionsStatus","setDirections","Input","DrawingManager","GroundOverlay","HeatmapLayer","KmlLayer","Marker","PlacesAutoComplete","place_changed","autocomplete","places","Autocomplete","place","getPlace","bounds","componentRestrictions","types","Polygon","Polyline","StreetViewPanorama","TrafficLayer","TransitLayer","COMPONENTS_DIRECTIVES","NguiMapModule","forRoot","ngModule","provide","useValue","NgModule","imports","CommonModule","declarations","exports","useClass"],"mappings":"knBAuDA,SAAAA,EAHCC,GAIC,OAHOA,EAAIC,QAAQ,sBAAuB,SAAAC,EAAiBC,GAIzD,OAHiB,IAAVA,EAAcD,EAAOE,cAAgBF,EAAOG,gBAClDJ,QAAQ,OAAQ,IAQrB,SAAAK,IACE,MALyB,iBAAXC,QAA8C,iBAAhBA,OAAOC,4UCnDrDC,EAAA,WAeA,SAAAA,EALcC,EACHC,EACGC,EACAC,GAEd,IAAAC,EAAAC,KALcA,KAAdL,iBAAcA,EACHK,KAAXJ,cAAWA,EACGI,KAAdH,OAAcA,EACAG,KAAdF,QAAcA,EAXXE,KAAHC,aAHqC,IAAIC,EAAAA,aAQ7BF,KAAZG,kBAcIH,KAAKI,QAAUJ,KAAKL,iBAA0B,QAC9CK,KAAKK,cAAgBL,KAAKL,iBAAgC,cAE1DK,KAAKF,QAAQQ,QAAQ,SAAAC,GAAU,OAAAR,EAAKQ,GAAU,IAAIL,EAAAA,eAClDF,KAAKJ,cAAgBA,SAKzBF,EAAAc,UAAAC,SAAA,WAAA,IAAAV,EAAAC,KACQA,KAPKL,iBAAiBe,aAQxBV,KAPKW,aASLX,KAPKL,iBAAiBiB,UAAUC,UAAU,SAAAC,GAAO,OAAAf,EAAKY,gBAa5DjB,EAAAc,UAAAG,WAAA,WACIX,KARKe,cAAgBf,KAAKK,cAAcW,kBAAkBhB,KAAKH,OAAQG,MAIhC,iBAAhCA,KAAKe,cAAcE,iBAAiCjB,KAAKe,cAAcE,SACzC,iBAA9BjB,KAAKe,cAAcG,eAA+BlB,KAAKe,cAAcG,OAWxElB,KARKmB,YASPnB,KARKoB,UAAY,IAAI5B,OAAOC,KAAKO,KAAKmB,aAAanB,KAAKJ,eAAeI,KAAKe,eAU5Ef,KARKoB,UAAY,IAAI5B,OAAOC,KAAKO,KAAKJ,eAAeI,KAAKe,eAU5Df,KARKoB,UAAUC,OAAOrB,KAAKL,iBAAiBmB,KAS5Cd,KARKoB,UAAW,cAAkBpB,KAAKJ,cASvCI,KARKoB,UAAW,iBAAqBpB,KAAKL,iBAW1CK,KARKI,QAAQkB,gBAAgBtB,KAAKF,QAASE,KAAM,aAUjDA,KARKL,iBAAiB4B,oBAAoBvB,KAAKJ,cAAeI,KAAKoB,WASnEpB,KARKC,aAAauB,KAAKxB,KAAKoB,YAchC1B,EAAAc,UAAAiB,YAAA,SATGC,GAWC1B,KATKI,QAAQuB,mBAAmB3B,KAAKoB,UAAWM,IAcpDhC,EAAAc,UAAAoB,YAAA,WAFE5B,KAPOG,eAAeW,IAAI,SAAAe,GAAgB,OAAAA,EAAaC,gBAWrD9B,KAVKL,iBAAiBoC,yBAAyB/B,KAAKJ,cAAeI,KAAKoB,WAYpEpB,KAVKoB,WAWPpB,KAVKI,QAAQ4B,kBAAkBhC,KAAKF,QAASE,KAAM,gBAtEzD,GAyEON,EAAPuC,gBAWAhC,eAVmBiC,KAAMC,EAAAA,UC5EzB,IAAAC,EAAA,WAAA,SAAAA,YAMAA,EAAA5B,UAAAQ,kBAAA,SAFGqB,EAAAC,GAEH,IAAAvC,EAAAC,KADQuC,KAkBJ,OAbID,EAFWC,SAGbC,QAFQC,IAAI,uCAAwCH,EAAWC,SAG/DA,EAFUD,EAAWC,QAChBvC,KAAK0C,iBAAiBL,EAAeC,IAGxCE,QAFQG,MAAM,uDAKhBN,EAFc/B,QAAQ,SAAAsC,GAGhBN,EAFWM,KAAWC,YAGxBN,EAFQK,GAAS7C,EAAK+C,SAASR,EAAWM,IAAQG,IAAMH,OAIvDL,GASXH,EAAA5B,UAAAwC,iBAAA,SANGnD,EAAA0C,GAOCA,EANUA,MAOV,IAAK,IANIQ,KAAOlD,EAAQ,CAOtB,IANIoD,EAAMpD,EAAOkD,GAEE,iBAARE,EAOTV,EANQQ,GAAOE,EAENV,EAAS,2BAA+BU,EAAIC,MAAM,cAO3DX,EANQQ,GAAO/C,KAAK8C,SAASG,GAAKF,IAAMA,KAS5C,OANOR,GAaXH,EAAA5B,UAAAsC,SAAA,SAVGF,EAAAL,GAWCA,EAVUA,MAWV,IAVIhC,EAAcqC,EAkClB,GAjCqB,iBAAVA,IAYPrC,EAXY,UAUVqC,IARiB,MAAdA,EACI,EAcP5C,KAVKmD,cAAcP,EAAOL,IAGvBvC,KAAKoD,gBAAgBR,IAGrB5C,KAAKqD,kBAAkBT,EAAOL,IAG9BvC,KAAKsD,cAAcV,IAEnBA,IAcLL,EAVS,IAAO,CAWlB,IAVIQ,EAAsBR,EAAc,IAWpChC,aAVkBgD,MACR,WAURR,EACFxC,EAVS,IAAIf,OAAOC,KAAK+D,aAAajD,EAAO,GAAIA,EAAO,IACvC,UAAZwC,EAWLxC,EAVSP,KAAKyD,YAAYlD,IACT,aAAZwC,GAA0BA,EAAIG,MAAM,mBAWzC3C,EAVSP,KAAK0D,UAAUnD,IAErBA,aAAsBoD,SACf,SAURZ,EACFxC,EAVSP,KAAK4D,cAAcrD,GAEzBwC,EAAQG,MAAM,qBAWjB3C,EAVSP,KAAK6D,oBAAoBtD,KAmBxC,cAbOA,EAAQ,iCACRA,EAAQ,IAERA,GAGR6B,EAAH5B,UAAAkD,UAAG,SAAAd,GAcC,IAbIrC,EAmBJ,OALIqC,EAbM,GAAGkB,cAAgBP,MAc3BhD,EAbS,EAAeO,IAAI,SAACiD,GAAiB,OAAA,IAAIvE,OAAOC,KAAKuE,OAAOD,EAAG,GAAIA,EAAG,OACrEE,MAAMC,WAAWtB,EAAM,MAAQuB,SAASvB,EAAM,MAcxDrC,EAbS,IAAIf,OAAOC,KAAKuE,OAAOpB,EAAM,GAAIA,EAAM,KAE3CrC,GAGR6B,EAAH5B,UAAA2C,cAAG,SAAAP,EAAAL,GAkBC,IAjBIhC,EAkBJ,IAEE,IADAA,EFnGN,SAJCqC,GAKC,GAJqB,iBAAVA,EAST,OAHIA,EAJMM,MADC,8CAMTN,EAJQ,IAAMA,EAAQ,KAEjBwB,KAAKC,MAzBhB,SAHCpF,GAIC,IACE,OAFOA,EACP,MAAAqF,GAIA,OAHOrF,EAIJC,QAHQ,iBAIP,SAASqF,EAHQC,GAIf,MAHO,IAAMA,EAAK,OAMrBtF,QAHQ,aAIP,SAASqF,EAHQC,GAIf,MAHO,IAAMA,EAAK,OAeNC,CAAQ7B,IAM1B,OAJOA,EE8EI8B,CAAQ9B,cACKW,MAoBhBhD,EAjBO,GAAGuD,cAAgBH,SAkB5BpD,EAjBSP,KAAK0D,UAAUnD,SAIvB,GAAAA,IAAeoD,OAAOpD,GAAS,CAmBlC,IAjBIoE,EAAapC,EAkBjBoC,EAjBY,2BAA8B,EAkB1CpE,EAjBSP,KAAKgD,iBAAiBzC,EAAQoE,IAEzC,MAAAL,IAmBF,OAjBO/D,GAGR6B,EAAH5B,UAAA4C,gBAAG,SAAAR,GAqBC,IApBIrC,EAqBJ,GAAIqC,EApBMM,MAAM,6BAqBd,IACE3C,EApBSqE,SAAS,0BAAChC,EAoB3B,IApBiBgC,GACT,MAAAN,IAsBJ,OApBO/D,GAGR6B,EAAH5B,UAAA6C,kBAAG,SAAAT,EAAAL,GAyBC,IAxBIhC,EA0BJ,GAAIqC,EAxBMM,MAAM,mCAyBd,IACE,IAxBI2B,EAAUjC,EAAMM,MAAM,mCAyB1B3C,EAxBSf,OAAOC,KAAKoF,EAAQ,IAAIA,EAAQ,IACzC,MAAAP,SACG,GAAA1B,EAAUM,MAAM,YAyBrB,IACE,IAxBI4B,EAA0BvC,EAAc,IAAEwC,OAAO,GAAGzF,cAC7CiD,EAAc,IAAEyC,MAAM,GAyBjCzE,EAxBSf,OAAOC,KAAKqF,GAAgBlC,GACrC,MAAA0B,IA0BJ,OAxBO/D,GAMR6B,EAAH5B,UAAAqD,oBAAG,SAAAoB,GA0BC,IAzBIC,EAA2BD,EA2B/B,IAAK,IAzBIlC,KAAOmC,EA0Bd,GAAIA,EAzBkBnC,GAAM,CA0B1B,IAzBIoC,EAAQD,EAAkBnC,GAwC9B,GAtCqB,iBAAVoC,EA0BTA,EAzBQ,EAAgB7F,cAET,eAAZyD,IA0BHoC,EAzBQ,EAAerE,IAAI,SAAC7B,GA0B1B,OAAIA,EAzBIiE,MAAM,YACL1D,OAAOC,KAAK2F,UAAUnG,EAAIK,eAE1BL,KAKD,UAyBR8D,EAzBiB,CA0BnB,IAzBIsC,EAAUtC,EAAI7D,QAAQ,WAAY,IAAM,QA0B5CgG,EAzBkBnC,GAAOvD,OAAOC,KAAK4F,GAAQ,QA4B7CH,EAzBkBnC,GADH,aAAZA,EACsBvD,OAAOC,KAAK6F,gBAAC,GAGbH,EA8B/B,OAzBOD,GAGR9C,EAAH5B,UAAA8C,cAAG,SAAAV,GA6BC,IA5BIrC,EA8BJ,GAAIqC,EA5BMM,MAAM,qEA6Bd,IACE3C,EA5BS,IAAIgF,KAAK3C,GAClB,MAAA0B,IA8BJ,OA5BO/D,GAGR6B,EAAH5B,UAAAiD,YAAG,SAAAb,GAgCC,OA/BOA,EAAM9B,IAAI,SAAAiD,GAmCf,OAHIA,EA/BGyB,KAAKC,KAAKvC,MAAM,eAgCrBa,EA/BGyB,KAAKC,KAAOjG,OAAOC,KAAKiG,WAAW3B,EAAGyB,KAAKC,OAEzC1B,KAIV3B,EAAH5B,UAAAoD,cAAG,SAAAhB,GAmCC,IAlCIrC,EAASqC,GAER,GAAKrC,EAAOkF,MAAMvC,MAAM,eAmC3B3C,EAlCOkF,KAAOjG,OAAOC,KAAKiG,WAAWnF,EAAOkF,OAqC9C,IAAK,IAlCI1C,KAAOxC,EAAQ,CAmCtB,IAlCIoF,EAAMpF,EAAOwC,GACL,WAkCRA,GAlC4B,WAARA,GAA4B,gBAARA,EAmC1CxC,EAlCOwC,GAAO,IAAIvD,OAAOC,KAAKmG,MAAMD,EAAI,GAAIA,EAAI,IACjC,SAAZ5C,GAA8B,eAARA,IAmCzBxC,EAlCOwC,GAAO,IAAIvD,OAAOC,KAAKoG,KAAKF,EAAI,GAAIA,EAAI,KAsCnD,OAlCOpF,GAGR6B,EAAH5B,UAAAkC,iBAAG,SAAAL,EAAAC,GAuCC,IAAK,IAtCIwD,EAAI,EAAGA,EAAIzD,EAAc0D,OAAQD,IAAK,CAuC7C,IAtCIlD,EAAQP,EAAcyD,GAuC1B,GAtCc,YAsCVlD,GAtCoD,oBAAtBN,EAAWM,GAuC3C,OAtCO,EAyCX,OAtCO,KA9OX,GAgPOR,EAAP4D,aACE9D,KAAM+D,EAAAA,aAGP7D,EAAD8D,eAAC,WAAA,UCnPD,IAAAC,EAAA,WAAA,SAAAA,YAKAA,EAAA3F,UAAA4F,mBAAA,SADGC,GAIC,OAFAA,EADqBA,IAAwBC,QAAS,KAE/C,IAAIC,EAAAA,WAAe,SAAEC,GAEtBC,UADUC,YAEZD,UADUC,YAAYN,mBAEpB,SAACnF,GACCuF,EADiBG,KAAK1F,GAEtBuF,EADiBI,YAGnB,SAACC,GADQ,OAAAL,EAAiB7D,MAAMkE,IAEhCR,GAGFG,EADiB7D,MAAM,4CAlB/B,GAsBOwD,EAAPH,aACE9D,KAAM+D,EAAAA,aAGPE,EAADD,eAAC,WAAA,UC/BM,IAAMY,EAAsB,IAAIC,EAAAA,eAA4B,uBCMnEC,EAAA,WAUA,SAAAA,EARwBC,GAAAjH,KAAxBiH,OAAwBA,EADtBjH,KAAFkH,KAF6BC,EAAAA,MAAMC,KAAK,IAAIC,EAAAA,cAAc,IAYtDrH,KAAKiH,OAASjH,KAAKiH,SAAWK,OAAQ,uCAQ1C,OAbAN,EAAAxG,UAAA+G,KAAA,aAUAP,EAAAxG,UAAAoB,YAAA,WACI5B,KAVKkH,KAAKN,YAYdI,EAnBA,GAqBAQ,EAAA,SAAAC,GAYA,SAAAD,EApBwBE,EAAcT,GAoBtC,IAAAlH,EACI0H,EADJL,KAAApH,KACUiH,IADVjH,YApBwBD,EAAxB2H,KAAwBA,WADvBC,EAADH,EAAAC,GA2BAD,EAAAhH,UAAA+G,KAAA,WAAA,IAAAxH,EAAAC,KArB0B,oBAAX4H,SA0BPrI,IACFS,KAtBKkH,KAAKP,KAAKnH,OAAOC,MACZoI,SAASC,cAAc,mBAuBjC,OAtBe,WAAe,OAAe,eAuB7C,OAtBe,WAAaC,MAAOL,KAAM1H,KAAK0H,KAAMM,YAAa,WAAM,OAAAjI,EAAKmH,KAAKP,KAAKnH,OAAOC,SAuB7FO,KAtBKiI,sBAIRT,EAAHhH,UAAAyH,iBAAG,WAyBC,OAxBe,YAAgB,OAAe,aAAiB,WAyB7D,OAxBe,WAAa3H,QAAQ,SAAA4H,GAyBlCA,EAxBWR,KAAKS,IAAI,WAAaD,EAAWF,kBA0B9C,OAxBe,WAAaI,OAAO,EAAG,OAAe,WAAarC,SA2BpE,IAxBIsC,EAASR,SAASS,cAAe,UAyBrCD,EAxBOE,GAAK,eA2BZ,IAxBIjB,EAAStH,KAAKiH,OAAOK,OAyBzBA,IAxBkC,IAAxBA,EAAOkB,QAAQ,KAAc,IAAM,IAyB7CH,EAxBOI,IAAMnB,EAAS,uBAyBtBO,SAxBSC,cAAc,QAAQY,YAAYL,MAzB/C,CATCrB,GAoCMQ,EAAPxB,aACE9D,KAAM+D,EAAAA,aAGPuB,EAADtB,eAAC,WAAA,QA2BAhE,KAAMyG,EAAAA,SACNzG,KAAMW,UAAWmD,aAAe9D,KAAM0G,EAAAA,WAAc1G,KAAM2G,EAAAA,OAAQC,MAAOhC,QAI1E,IAAAiC,EAAA,SAAAtB,GAgBA,SAAAsB,EAxCe9B,GAyCf,OAAIQ,EAAJL,KAAApH,KAAUiH,IAAVjH,YA1CC2H,EAADoB,EAAAtB,GA+CAsB,EAAAvI,UAAA+G,KAAA,WAAA,IAAAxH,EAAAC,KACI,GA1CsB,oBAAX4H,OA8CX,GAAIrI,IACFS,KA1CKkH,KAAKP,KAAKnH,OAAOC,WACjB,IAAKoI,SAASC,cAAc,iBAAkB,CA2CnD,IA1CIO,EAASR,SAASS,cAAc,UA2CpCD,EA1COE,GAAK,eA4CZF,EA1COW,OAAQ,EA2CfX,EA1COY,OAAS,WAAM,OAAAlJ,EAAKmH,KAAKP,KAAKnH,OAAOC,OA2C5C4I,EA1COI,IAAMzI,KAAKiH,OAAOK,OA2CzBO,SA1CSC,cAAc,QAAQY,YAAYL,OAMjD,CAzBCrB,GAsBM+B,EAAP/C,aACE9D,KAAM+D,EAAAA,aAGP8C,EAAD7C,eAAC,WAAA,QA6CAhE,KAAMW,UAAWmD,aAAe9D,KAAM0G,EAAAA,WAAc1G,KAAM2G,EAAAA,OAAQC,MAAOhC,QClI1E,IAAAoC,EAAA,WAKA,SAAAA,EAAsBC,GAAAnJ,KAAtBmJ,UAAsBA,EADZnJ,KAAVoJ,wBAMAF,EAAA1I,UAAA6I,QAAA,SAHG9G,GAGH,IAAAxC,EAAAC,KACI,OAHO,IAAIuG,EAAAA,WAAW,SAACC,GAInBzG,EAHKqJ,cAAcrB,KAAKhI,EAAKoJ,UAAUjC,KAIpCrG,UAHU,WAAM,OAAAd,EAAKuJ,eAAe/G,EAASiE,SASxD0C,EAAA1I,UAAAoB,YAAA,WACI5B,KALKoJ,cAActI,IAAI,SAAAyI,GAAO,OAAAA,EAAIzH,iBAGnCoH,EAAH1I,UAAA8I,eAAG,SAAA/G,EAAAiH,IACkB,IAAIhK,OAAOC,KAAKgK,UACxBJ,QAAQ9G,EAAS,SAAAmH,EAAmBC,GAUvCA,IATWnK,OAAOC,KAAKmK,eAAeC,IAUxCL,EATS7C,KAAK+C,GAUdF,EATS5C,YAWT4C,EATS7G,MAAM+G,QAzBvB,GA6BOR,EAAPlD,aACE9D,KAAM+D,EAAAA,aAGPiD,EAADhD,eAAC,WAAA,QAYAhE,KAAM8E,KC/CP,IAAA8C,EAAA,WAMA,SAAAA,EADYC,EACA1J,EACAqH,GADZ,IAAA3H,EAAAC,KADYA,KAAZ+J,SAAYA,EACA/J,KAAZK,cAAYA,EACAL,KAAZ0H,KAAYA,EAwDV1H,KAAF2B,mBAZuB,SAAAqI,EAActI,GAajC,IAZIuB,EAAUgH,EAAmBC,EAajC,GAAIF,EACF,IAAK,IAZIjH,KAAOrB,EAadwI,EAZgB,MAAAnH,EAAU7D,QAAQ,SAAU,SAAAiL,GAAK,OAAAA,EAAE7K,gBAanD2K,EAZevI,EAAQqB,GAAKkH,cACgB,KAAvC,WAAY,UAAUzB,QAAQzF,IAAuC,iBAAjBkH,EAcvD,SAZEC,GAaAnK,EAZKgK,SAASV,SAASe,QAASH,IAAepJ,UAAU,SAAA6I,GAClB,mBAA1BM,EAAOE,GAahBF,EAZOE,GAAeR,EAAQ,GAAGW,SAASC,UAc1C9H,QAZQG,MAaN,0KANR,CADGuH,IAcHjH,EAZMlD,EAAMM,cAAcyC,SAASmH,GACE,mBAA1BD,EAAOE,GAahBF,EAZOE,GAAejH,GActBT,QAZQG,MAaN,iLAxEdmH,EAAAtJ,UAAAc,gBAAA,SAPGiJ,EAAAC,EAAAC,GAOH,IAAA1K,EAAAC,KACIuK,EAPcjK,QAAQ,SAAAoK,GAQpB,IAPIC,EAAYD,EAQbxL,QAPQ,WAAY,SAAAsF,GAAQ,MAAA,IAAAA,EAAOnF,gBAQnCH,QAPQ,QAAS,IAEhBwI,EAAO3H,EAAK2H,KAQhBA,EAPKkD,kBAAkB,WAQrBJ,EAPQC,GAAQI,YAAYF,EAAW,SAAAG,GAQrC,IAPIC,EAAaD,MAQjBC,EAPMC,OAAShL,KAQf0H,EAPKS,IAAI,WAAM,OAAAqC,EAAQE,GAAclJ,KAAKuJ,YAkBpDjB,EAAAtJ,UAAAwB,kBAAA,SAZGuI,EAAAC,EAAAC,GAYH,IAAA1K,EAAAC,KACIuK,EAZcjK,QAAQ,SAAAoK,GAapB,IAZIC,EAAYD,EAabxL,QAZQ,WAAY,SAAAsF,GAAQ,MAAA,IAAAA,EAAOnF,gBAanCH,QAZQ,QAAS,IAcpBa,EAZK2H,KAAKkD,kBAAkB,WAatBJ,EAZQC,IAaVjL,OAZOC,KAAKqL,MAAMG,eAAeT,EAAQC,GAASE,OAiBpDH,EAZQC,KAaND,EAZQC,GAAQpJ,QAalBmJ,EAZQC,GAAQpJ,OAAO,aAGlBmJ,EAAQC,GAAQ9K,wBAChB6K,EAAQC,OA9CrB,GAqFOX,EAAP9D,aACE9D,KAAM+D,EAAAA,aAGP6D,EAAD5D,eAAC,WAAA,QAeAhE,KAAMgH,IACNhH,KAAME,IACNF,KAAMyG,EAAAA,UC3FP,IAAMuC,GACJ,kBAAmB,SAAU,mBAAoB,yBAA0B,YAAa,kBACxF,iBAAkB,UAAW,oBAAqB,WAAY,iBAAkB,YAAa,UAAW,UACxG,UAAW,qBAAsB,aAAc,oBAAqB,gBAAiB,eAAgB,cACrG,aAAc,SAAU,OAAQ,OAAQ,oBAAqB,cAAe,qBAAsB,wBAClG,4BAA6B,uBAAwB,sBAAuB,2BAA4B,oBAAqB,2BAC7H,UAEA,qBAGIC,GACJ,iBAAkB,iBAAkB,QAAS,WAAY,OAAQ,UAAW,YAAa,kBAAmB,OAC5G,iBAAkB,YAAa,WAAY,YAAa,qBAAsB,SAAU,aACxF,cAAe,eAAgB,eAE/B,WAAY,eAAgB,cAAe,eAAgB,UAAW,aAAc,gBAEtFC,EAAA,WAkFA,SAAAA,EAMW/K,EACAgL,EACA3E,EACAqD,EACA3J,EACA+I,EACAzB,GAZX,IAAA3H,EAAAC,KAMWA,KAAXK,cAAWA,EACAL,KAAXqL,WAAWA,EACArL,KAAX0G,YAAWA,EACA1G,KAAX+J,SAAWA,EACA/J,KAAXI,QAAWA,EACAJ,KAAXmJ,UAAWA,EACAnJ,KAAX0H,KAAWA,EAxBD1H,KAAVY,UAAyC,IAAIV,EAAAA,aAIpCF,KAATsL,cAEStL,KAATuL,cAAyB,IAAIC,EAAAA,QAGpBxL,KAATyL,eAGSzL,KAATU,cAAiC,EAEvBV,KAAV0L,6BAAwC,EAOpCvC,EAAU5B,OAIV4D,EAAQ7K,QAAQ,SAAAC,GAAU,OAAAR,EAAKQ,GAAU,IAAIL,EAAAA,sBAKjDkL,EAAA5K,UAAAmL,gBAAA,WAAA,IAAA5L,EAAAC,KACIA,KAGK4L,aAAe5L,KAAKmJ,UAAUjC,KAAKrG,UAAU,WAAM,OAAAd,EAAK8L,mBAEjET,EAAA5K,UAAAsL,mBAAA,WACU9L,KACK0L,6BAA+B1L,KAAK+D,IAAM/D,KAAK+D,GAAGgI,YAAc,GAAvE/L,KACK6L,iBAMbT,EAAA5K,UAAAiB,YAAA,SAFGC,GAGC1B,KAFKuL,cAAc5E,KAAKjF,IAO5B0J,EAAA5K,UAAAqL,cAAA,WAAA,IAAA9L,EAAAC,KACIA,KAJK+D,GAAK/D,KAAKqL,WAAWW,cAAclE,cAAc,eAKlD9H,KAJK+D,IAA8B,IAAxB/D,KAAK+D,GAAGgI,YAKnB/L,KAJK0L,6BAA8B,GAQvC1L,KAJK0L,6BAA8B,EAKnC1L,KAJKsL,WAAatL,KAAKK,cAAcW,kBAAkBkK,EAAQlL,MAO/DA,KAJKsL,WAAWW,KAAOjM,KAAKsL,WAAWW,MAAQ,GACb,iBAA3BjM,KAAKsL,WAAWpK,eAA+BlB,KAAKsL,WAAWpK,OAMtElB,KAJK0H,KAAKkD,kBAAkB,WAK1B7K,EAJKe,IAAM,IAAItB,OAAOC,KAAKyM,IAAInM,EAAKgE,GAAIhE,EAAKuL,YAK7CvL,EAJKe,IAAK,cAAkB,mBAEvBf,EAAKuL,WAAWpK,QAKnBnB,EAJKoM,YAQPpM,EAJKK,QAAQkB,gBAAgB6J,EAASpL,EAAM,OAM5CA,EAJKe,IAAI+J,YAAY,OAAQ,WACtB9K,EAAKW,eAKRX,EAJKW,cAAe,EAKpB0L,WAJW,WAKTrM,EAJKa,UAAUY,KAAKzB,EAAKe,UAU/BuL,EAAAA,aAJajF,KAAKrH,EAAKwL,cAAe,KAKnC1K,UAJU,SAACa,GAA2B,OAAA3B,EAAKK,QAAQuB,mBAAmB5B,EAAKe,IAAKY,KAE7D,oBAAXkG,QAA0B,OAAe,aAMlD,OAJe,WAAa9G,IAAMf,EAAKe,SAW/CsK,EAAA5K,UAAA2L,UAAA,WAAA,IAAApM,EAAAC,KALSA,KAAM,OAawB,iBAAnBA,KAAM,QAOpBA,KANK+J,SAASV,SAASe,QAASpK,KAAM,SAAWa,UAO/C,SAAA6I,GAEE3J,EANKe,IAAIqL,UAAUzC,EAAQ,GAAGW,SAASC,WAQzC,SAAA3H,GACE5C,EANKe,IAAIqL,UAAUpM,EAAKuL,WAAY,mBAAuB,IAAI9L,OAAOC,KAAKuE,OAAO,EAAG,MAbzFhE,KANK0G,YAAYN,qBAAqBvF,UAOpC,SAAAI,GAEE,IANIqL,EAAS,IAAI9M,OAAOC,KAAKuE,OAAO/C,EAASsL,OAAOC,SAAUvL,EAASsL,OAAOE,WAO9E1M,EANKe,IAAIqL,UAAUG,IAQrB,SAAA3J,GACEH,QANQG,MAAM,gDAOd5C,EANKe,IAAIqL,UAAUpM,EAAKuL,WAAY,mBAAuB,IAAI9L,OAAOC,KAAKuE,OAAO,EAAG,OA0B/FoH,EAAA5K,UAAAkM,eAAA,SAVGnE,EAAAoE,GAWC3M,KAVKyL,YAAYlD,GAAIqE,KAAKD,IAgB9BvB,EAAA5K,UAAAqM,gBAAA,SAbGtE,GAeKvI,KAbKyL,YAAYlD,IAcnBvI,KAbKyL,YAAYlD,GAAIuE,SAkB3B1B,EAAA5K,UAAAoB,YAAA,WACI5B,KAfKuL,cAAc3E,WAgBf5G,KAfK+D,KAAM/D,KAAM0L,6BAgBnB1L,KAfKI,QAAQ4B,kBAAkBmJ,EAASnL,KAAM,OAiB5CA,KAfK4L,cAgBP5L,KAfK4L,aAAa9J,eAuBxBsJ,EAAA5K,UAAAe,oBAAA,SAlBG3B,EAAAwB,GAmBC,IAlBI2L,EAAY/N,EAAYY,EAAcP,eAAiB,IAmB3DW,KAlBKc,IAAIiM,GAAa/M,KAAKc,IAAIiM,OAmB/B/M,KAlBKc,IAAIiM,GAAWhF,KAAK3G,IAyB7BgK,EAAA5K,UAAAuB,yBAAA,SAtBGnC,EAAAwB,GAuBC,IAtBI2L,EAAY/N,EAAYY,EAAcP,eAAiB,IAuB3D,GAAIW,KAtBKc,KAAOd,KAAKc,IAAIiM,GAAY,CAuBnC,IAtBI3N,EAAQY,KAAKc,IAAIiM,GAAWvE,QAAQpH,GAwBvChC,GAtBQ,GAAOY,KAAKc,IAAIiM,GAAW3E,OAAOhJ,EAAO,OA5NxD,GA+NOgM,EAAPpF,aACE9D,KAAM8K,EAAAA,UAAWlE,OAuBjBmE,SAtBU,WAuBVC,WAtBWpD,EAAU1H,EAAe8G,EAAU/C,GAuB9CgH,QAtBQ,oGAURtN,OANQqL,EAuBRpL,QAtBSqL,EAuBTiC,cAtBeC,EAAAA,kBAAkBC,KAuBjCC,SAtBU,8EAOXnC,EAADlF,eAAC,WAAA,QAyBAhE,KAAME,IACNF,KAAMsL,EAAAA,aACNtL,KAAMiE,IACNjE,KAAMgH,IACNhH,KAAM4H,IACN5H,KAAM8E,IACN9E,KAAMyG,EAAAA,UAtBAyC,EAAPnJ,gBAyBArB,YAxBgBsB,KAAMC,EAAAA,UC7RtB,IAAM+I,KACAC,KACNsC,EAAA,SAAAhG,GAIA,SAAAgG,EAKGC,GAJH,OAAIjG,EAAJL,KAAApH,KAAU0N,EAAa,iBAAkBxC,EAAQC,IAAjDnL,YAHC2H,EAAD8F,EAAAhG,KAFA,CAEC/H,GAUM+N,EAAPzH,aACE9D,KAAMyL,EAAAA,UAAW7E,OAJjBmE,SAKU,6BAJVpN,OAKQqL,EAJRpL,QAKSqL,MAIVsC,EAADvH,eAAC,WAAA,QAFAhE,KAAMkJ,KCZP,IAAMF,GACJ,UAAW,iBAAkB,WAAY,cAAe,WAAY,SAAU,WAE1EC,GACJ,aAAc,kBAAmB,WAAY,mBAAoB,kBAEnEyC,EAAA,WAwBA,SAAAA,EAGYvC,EACAjL,EACAT,GALZ,IAAAI,EAAAC,KAGYA,KAAZqL,WAAYA,EACArL,KAAZI,QAAYA,EACAJ,KAAZL,iBAAYA,EAfTK,KAAHC,aAKqC,IAAIC,EAAAA,aAGhCF,KAATe,iBACSf,KAATuL,cAAyB,IAAIC,EAAAA,QAMzBxL,KAAKqL,WAAWW,cAAc6B,MAAMC,QAAU,OAC9C3C,EAAQ7K,QAAQ,SAAAC,GAAU,OAAAR,EAAKQ,GAAU,IAAIL,EAAAA,sBAKjD0N,EAAApN,UAAAC,SAAA,WAAA,IAAAV,EAAAC,KACQA,KACKL,iBAAiBe,aAAxBV,KACKW,aACLX,KACKL,iBAAiBiB,UAAUC,UAAU,SAAAC,GAAO,OAAAf,EAAKY,gBAM5DiN,EAAApN,UAAAiB,YAAA,SAFGC,GAGC1B,KAFKuL,cAAc5E,KAAKjF,IAO5BkM,EAAApN,UAAAG,WAAA,WAAA,IAAAZ,EAAAC,KAGIA,KAHKe,cAAgBf,KAAKL,iBAAiBU,cAAcW,kBAAkBkK,EAAQlL,MAInFA,KAHK+N,WAAa,IAAIvO,OAAOC,KAAKmO,WAAW5N,KAAKe,eAIlDf,KAHK+N,WAAY,cAAkB,aAO/B/N,KAHKqL,WAAWW,cAAczD,GAIhCvI,KAHKL,iBAAiB8L,YAAYzL,KAAKqL,WAAWW,cAAczD,IAAMvI,KAKtEwC,QAHQG,MAAM,mDAOhB3C,KAHKI,QAAQkB,gBAAgB6J,EAASnL,KAAM,cAM5CqM,EAAAA,aAHajF,KAAKpH,KAAKuL,cAAe,KAInC1K,UAHU,SAACa,GAA2B,OAAA3B,EAAKK,QAAQuB,mBAAmB5B,EAAKgO,WAAYrM,KAK1F1B,KAHKL,iBAAiB4B,oBAAoB,aAAcvB,KAAK+N,YAI7D/N,KAHKC,aAAauB,KAAKxB,KAAK+N,aAShCH,EAAApN,UAAAoM,KAAA,SANGD,GAQC3M,KANK+N,WAAWC,WAAWhO,KAAKuN,SAASU,QAAQjC,eAOjDhM,KANK+N,WAAWnB,KAAK5M,KAAKL,iBAAiBmB,IAAK6L,IAWpDiB,EAAApN,UAAAsM,MAAA,WAEQ9M,KATK+N,YAUP/N,KATK+N,WAAWjB,SActBc,EAAApN,UAAAoB,YAAA,WACI5B,KAZKuL,cAAc3E,WAaf5G,KAZK+N,aAaP/N,KAZKI,QAAQ4B,kBAAkBmJ,EAASnL,KAAM,qBACvCA,KAAK+N,eAzFlB,GA4FOH,EAAP5H,aACE9D,KAAM8K,EAAAA,UAAWlE,OAajBmE,SAZU,yBAaVpN,OAZQqL,EAaRpL,QAZSqL,EAaToC,SAZU,qDAIXK,EAAD1H,eAAC,WAAA,QAeAhE,KAAMsL,EAAAA,aACNtL,KAAM4H,IACN5H,KAAMkJ,KAZAwC,EAAP3L,gBAeAhC,eAdmBiC,KAAMC,EAAAA,SAezBoL,WAderL,KAAMgM,EAAAA,UAAWpF,MAAM,YAAaqF,KAAOC,EAAAA,sBClH1D,IAIMjD,GACJ,mBAAoB,QAAS,mBAAoB,gBAAiB,WAAY,OAAQ,UAAW,mBACjG,YAAa,cAAe,cAAe,YAAa,WAAY,YAAa,UAAW,kBAAmB,aAC/G,eAAgB,eAAgB,iBAAkB,gBAClD,YAAa,gBAAiB,eAAgB,cAAe,gBAAiB,WAAY,eA6H5FkD,EAAA,WAwCA,SAAAA,EA3BsB1O,EACA0L,EACAjL,GAyBtB,IAAAL,EAAAC,KA3BsBA,KAAtBL,iBAAsBA,EACAK,KAAtBqL,WAAsBA,EACArL,KAAtBI,QAAsBA,EAgBnBJ,KAAHC,aAzBqC,IAAIC,EAAAA,aAEhCF,KAATuL,cAAyB,IAAIC,EAAAA,QAmCzBxL,KAAKqL,WAAWW,cAAc6B,MAAMC,QAAU,OAC9C3C,EAAQ7K,QAAQ,SAAAC,GAAU,OAAAR,EAAKQ,GAAU,IAAIL,EAAAA,sBAKjDmO,EAAA7N,UAAAC,SAAA,WAAA,IAAAV,EAAAC,KACQA,KA5BKL,iBAAiBe,aA6BxBV,KA5BKW,aA8BLX,KA5BKL,iBAAiBiB,UAAUC,UAAU,SAAAC,GAAO,OAAAf,EAAKY,gBAmC5D0N,EAAA7N,UAAAiB,YAAA,SA/BGC,GAgCC1B,KA/BKuL,cAAc5E,KAAKjF,IAoC5B2M,EAAA7N,UAAAoB,YAAA,WACI5B,KAjCKuL,cAAc3E,WAkCnB5G,KAjCKL,iBAAiBoC,yBAAyB,eAAgB/B,KAAKoB,WAmChEpB,KAjCKoB,WAkCPpB,KAjCKI,QAAQ4B,kBAAkBmJ,EAASnL,KAAM,cAIjDqO,EAAH7N,UAAAG,WAAG,WAAA,IAAHZ,EAAAC,KAyBEA,KAvBO+D,GAAK/D,KAAKqL,WAAWW,cAqC1BhM,KAnCKoB,UAlKT,SAFCkN,EAAArN,GAsGD,OAjBS,IAlFT,SAAAwG,GASA,SAAA8G,EAHKD,EAAgCrN,GAGrC,IAAAlB,EACM0H,EADNL,KAAApH,OAAAA,YALYD,EAAZyO,SAA+B,EAwC3BzO,EAAJ0O,YAXkB,SAAAxN,GA+BZ,GAnBAlB,EAXKuO,OAAOT,MAAMa,WAAa,SAEG,UAW9BzN,EAXS6C,YAAY6K,KAYvB5O,EAXKkB,SAAW,IAAIzB,OAAOC,KAAKuE,OAAO/C,EAAS,GAAIA,EAAS,IAChC,iBAAbA,GACD,IAAIzB,OAAOC,KAAKgK,UAEtBJ,SAASe,QAASnJ,GAAW,SAAAyI,EAAUC,GAY1CA,IAXWnK,OAAOC,KAAKmK,eAAeC,IAaxC9J,EAXK0O,YAAY/E,EAAQ,GAAGW,SAASC,YAKpCrJ,GAAwC,mBAAjBA,EAAS2N,MAYrC7O,EAXKkB,SAAWA,GAcdlB,EAXK8O,iBAAgD,mBAAtB9O,EAAKkB,SAAS2N,IAAoB,CAYnE,IAXIE,EAAgB,WAYlB,IAXIC,EAAWhP,EAAK8O,gBAAgBG,qBAAqBjP,EAAKkB,UAC1DkJ,EAAI8E,KAAKC,MAAMH,EAAS5E,EAAIpK,EAAMuO,OAAOvC,YAAc,GACvDoD,EAAIF,KAAKC,MAAMH,EAASI,EAAIpP,EAAKuO,OAAOc,aAAe,GAY3DrP,EAXKuO,OAAOT,MAAMwB,KAAOlF,EAAI,KAY7BpK,EAXKuO,OAAOT,MAAMyB,IAAMH,EAAI,KAY5BpP,EAXKuO,OAAOT,MAAMa,WAAa,WAc7B3O,EAXKuO,OAAOvC,aAAehM,EAAKuO,OAAOc,aAYzCN,IAEA1C,WAXW,WAAM,OAAA0C,QAvDrB/O,EAAKuO,OAASA,EACdvO,EAAKkB,SAAWA,IAqFtB,OAlGG0G,EAAH4G,EAAA9G,GAkBA8G,EAAA/N,UAAA+O,MAAA,WACMvP,KALKwP,WAAWC,mBAAmB/G,YAAY1I,KAAKsO,QAQpDtO,KALKsO,OAAOT,MAAM5M,SAAW,YAUnCsN,EAAA/N,UAAAkP,KAAA,WACM1P,KAPKyO,YAAYzO,KAAKiB,UAQtBjB,KAPK2P,UAAU3P,KAAK4P,QAQpB5P,KAPK6P,WAAW7P,KAAKwO,UAY3BD,EAAA/N,UAAAsP,SAAA,aAMAvB,EAAA/N,UAAAuP,YAAA,WACM,OAXO/P,KAAKiB,UAuDlBsN,EAAA/N,UAAAmP,UAAA,SAdKC,GAeCA,IAdU5P,KAAM4P,OAASA,GAezB5P,KAdKsO,OAAOT,MAAM+B,OAAS5P,KAAK4P,QAoBtCrB,EAAA/N,UAAAqP,WAAA,SAjBKrB,GAkBCxO,KAjBKsO,OAAOT,MAAMC,QAAUU,EAAU,eAAiB,OAkBvDxO,KAjBKwO,QAAUA,GAmBrBD,EAjGA,CADG/O,OAAAC,KAAAuQ,aAmFM,CAA4B1B,EAAQrN,GA+ExBgP,CAA2BjQ,KAAK+D,GAAI/D,KAAM,UAoC3DA,KAnCKoB,UAAUC,OAAOrB,KAAKL,iBAAiBmB,KAsC5Cd,KAnCKI,QAAQkB,gBAAgB6J,EAASnL,KAAM,aAsC5CqM,EAAAA,aAnCajF,KAAKpH,KAAKuL,cAAe,KAoCnC1K,UAnCU,SAACa,GAA2B,OAAA3B,EAAKK,QAAQuB,mBAAmB5B,EAAKqB,UAAWM,KAqCzF1B,KAnCKL,iBAAiB4B,oBAAoB,eAAgBvB,KAAKoB,WAoC/DpB,KAnCKC,aAAauB,KAAKxB,KAAKoB,cAzDhC,GA4DOiN,EAAPrI,aACE9D,KAAM8K,EAAAA,UAAWlE,OAoCjBmE,SAnCU,2BAoCVpN,QAtOA,YAuOAC,QAnCSqL,EAoCToC,SAnCU,0CAMXc,EAADnI,eAAC,WAAA,QAsCAhE,KAAMkJ,IACNlJ,KAAMsL,EAAAA,aACNtL,KAAM4H,KAnCAuE,EAAPpM,gBAsCAhC,eArCmBiC,KAAMC,EAAAA,UC1NzB,IAAM+I,GACJ,SAAU,YAAa,YAAa,WAAY,YAAa,cAAe,MAAO,SACnF,cAAe,gBAAiB,iBAAkB,eAAgB,UAAW,SAAU,UAEvF,qBAEIC,GACJ,gBAAiB,QAAS,WAAY,OAAQ,UAAW,YACzD,YAAa,YAAa,WAAY,YAAa,UAAW,gBAAiB,cAEjF+E,EAAA,SAAAzI,GAmCA,SAAAyI,EAIsBxC,GAJtB,IAAA3N,EACI0H,EADJL,KAAApH,KACU0N,EAAa,SAAUxC,EAAQC,IADzCnL,YAIsBD,EAAtB2N,YAAsBA,EAFb3N,EAATgB,0BAnCC4G,EAADuI,EAAAzI,GAuCAyI,EAAA1P,UAAAG,WAAA,WACI8G,EAAJjH,UAEUG,WAFVyG,KAAApH,MACIA,KAEKmM,aAGT+D,EAAA1P,UAAA2L,UAAA,WAAA,IAAApM,EAAAC,KACSA,KAAM,OAY0B,iBAAnBA,KAAM,QACtBA,KAAKG,eAAe4H,KAAK/H,KAAK0N,YAAY3D,SAASV,SAASe,QAASpK,KAAM,SAAWa,UACpF,SAAA6I,GAEE3J,EAAKqB,UAAU+K,UAAUzC,EAAQ,GAAGW,SAASC,WAE/C,SAAA3H,GACEH,QAAQG,MAAM,2CAA4C5C,EAAM,QAChEA,EAAKqB,UAAU+K,UAAUpM,EAAKgB,cAAe,mBAAuB,IAAIvB,OAAOC,KAAKuE,OAAO,EAAG,OAnBlGhE,KAAKG,eAAe4H,KAAK/H,KAAK0N,YAAYhH,YAAYN,qBAAqBvF,UACzE,SAAAK,GAEE,IAAIoL,EAAS,IAAI9M,OAAOC,KAAKuE,OAAO9C,EAAOqL,OAAOC,SAAUtL,EAAOqL,OAAOE,WAC1E1M,EAAKqB,UAAU+K,UAAUG,IAE3B,SAAA3J,GACEH,QAAQG,MAAM,mDACd5C,EAAKqB,UAAU+K,UAAUpM,EAAKgB,cAAe,mBAAuB,IAAIvB,OAAOC,KAAKuE,OAAO,EAAG,UA1DxG,CAECtE,GAwEMwQ,EAAPlK,aACE9D,KAAMyL,EAAAA,UAAW7E,OACjBmE,SAAU,uCACVpN,OAAQqL,EACRpL,QAASqL,MAIV+E,EAADhK,eAAC,WAAA,QAGAhE,KAPCkJ,KCxFF,IAAMF,GAAS,kBAAoB,WAAY,cAAe,iBAAkB,QAAS,UAAW,cAC9FC,GACJ,aAAc,QAAS,WAAY,YAAa,WAAY,YAC5D,UAAW,gBAAiB,iBAAkB,aAAc,cAAe,eAE7EgF,EAAA,SAAA1I,GAuBA,SAAA0I,EAGGxQ,GAFH,OAAI8H,EAAJL,KAAApH,KAAUL,EAAkB,OAAQuL,EAAQC,IAA5CnL,YAtBC2H,EAADwI,EAAA1I,GA2BA0I,EAAA3P,UAAAG,WAAA,WACQX,KAEM,QACRA,KAEKL,iBAAiBmB,IAAIsP,KAAKC,WAAWrQ,KAAM,SAC3CA,KAAU,WACfA,KAEKL,iBAAiBmB,IAAIsP,KAAKE,YAAYtQ,KAAM,aACjDA,KAEKe,cAAgBf,KAAKK,cAAcW,kBAAkBhB,KAAKH,OAAQG,MAAvEA,KAEKL,iBAAiBmB,IAAIsP,KAAKG,IAAIvQ,KAAKe,gBAE1Cf,KAEKoB,UAAYpB,KAAKL,iBAAiBmB,IAAIsP,KAC3CpQ,KAEKI,QAAQkB,gBAAgBtB,KAAKF,QAASE,KAAM,aAAjDA,KAEKL,iBAAiB4B,oBAAoBvB,KAAKJ,cAAeI,KAAKoB,WADnEpB,KAEKC,aAAauB,KAAKxB,KAAKoB,cAtDhC,CAEC1B,GAsDMyQ,EAAPnK,aACE9D,KAAMyL,EAAAA,UAAW7E,OADjBmE,SAEU,wBADVpN,OAEQqL,EADRpL,QAESqL,MAIVgF,EAADjK,eAAC,WAAA,QACAhE,KAAMkJ,KCrEP,IAAMF,GACJ,aAAc,YAAa,gBAAiB,aAAc,QAAS,gBACnE,kBAAmB,mBAAoB,aAAc,yBACrD,sBAAuB,kBAAmB,qBAEtCC,GAAU,sBAChBqF,EAAA,SAAA/I,GAyBA,SAAA+I,EACI7Q,EAGO+G,GAJX,IAAA3G,EAII0H,EAJJL,KAAApH,KAIUL,EAAkB,qBAAsBuL,EAAQC,IAJ1DnL,YAIWD,EAAX2G,YAAWA,WA3BViB,EAAD6I,EAAA/I,GAgCA+I,EAAAhQ,UAAAG,WAAA,WACIX,KACKe,cAAgBf,KAAKK,cAAcW,kBAAkBhB,KAAKH,OAAQG,MAC5B,iBAAhCA,KAAKe,cAAe,QAA7Bf,KACKe,cAAe,MAAU8G,SAASC,cAAc9H,KAAKe,cAAe,QAI3Ef,KACKyQ,kBAAoB,IAAIjR,OAAOC,KAAKiR,kBAAzC1Q,KACK2Q,mBAAqB,IAAInR,OAAOC,KAAK+Q,mBAAmBxQ,KAAKe,eAClEf,KACK2Q,mBAAmBtP,OAAOrB,KAAKL,iBAAiBmB,KAErDd,KACK4Q,eAAe5Q,KAAK6Q,mBACzB7Q,KACKI,QAAQkB,gBAAgBtB,KAAKF,QAASE,KAAM,sBACjDA,KACKL,iBAAiB4B,oBAAoBvB,KAAKJ,cAAeI,KAAKoB,WAAnEpB,KACKC,aAAauB,KAAKxB,KAAK2Q,qBAKhCH,EAAAhQ,UAAAiB,YAAA,SADGC,GAEC,IADIiD,KAEJ,IAAK,IADI5B,KAAOrB,GACmB,IAC7B1B,KADKH,OAAO2I,QAAQzF,KAEtB4B,EADW5B,GAAO/C,KAAKK,cAAcyC,SAASpB,EAAQqB,GAAKkH,eAI3DvI,EADS,mBAAuB1B,KAAK2Q,oBAEvC3Q,KADKyQ,mBAAqBzQ,KAAK4Q,eAAe5Q,KAAK6Q,oBAQzDL,EAAAhQ,UAAAoQ,eAAA,SAJGC,GAIH,IAAA9Q,EAAAC,KACIA,KAJKyQ,kBAAkBK,MAAMD,EAK3B,SAACE,EAJepH,GAKVA,IAJWnK,OAAOC,KAAKuR,iBAAiBnH,GAK1C9J,EAJK4Q,mBAAmBM,cAAcF,GAMtCvO,QAJQG,MAAM,oCAAsCgH,MAY9D6G,EAAAhQ,UAAAoB,YAAA,WACI6F,EAAJjH,UANUoB,YAMVwF,KAAApH,MACIA,KANKI,QAAQ4B,kBAAkBhC,KAAKF,QAASE,KAAM,yBApFvD,CAECN,GAoFM8Q,EAAPxK,aACE9D,KAAMyL,EAAAA,UAAW7E,OAOjBmE,SANU,iCAOVpN,OANQqL,EAORpL,QANSqL,MAIVqF,EAADtK,eAAC,WAAA,QASAhE,KAAMkJ,IACNlJ,KAAMiE,KANAqK,EAAPvO,gBASA4O,oBARwB3O,KAAMgP,EAAAA,MAAOpI,MAAM,yBC1G3C,IAAMoC,GACJ,UACA,gBAAiB,iBAAkB,wBAAyB,cAC5D,MAAO,gBAAiB,iBAAkB,kBAAmB,oBAEzDC,GACJ,iBAAkB,iBAAkB,kBACpC,kBAAmB,mBAAoB,qBAEzCgG,EAAA,SAAA1J,GAoBA,SAAA0J,EAGGzD,GAHH,IAAA3N,EACI0H,EADJL,KAAApH,KACU0N,EAAa,iBAAkBxC,EAAQC,IADjDnL,YAEID,EAAKoB,YAAc,mBApBtBwG,EAADwJ,EAAA1J,KAFA,CAEC/H,GAyBMyR,EAAPnL,aACE9D,KAAMyL,EAAAA,UAAW7E,OAFjBmE,SAGU,6BAFVpN,OAGQqL,EAFRpL,QAGSqL,MAIVgG,EAADjL,eAAC,WAAA,QAAAhE,KAAMkJ,KC5CP,IAAMF,GAAW,MAAO,SAAU,YAAa,WACzCC,GAAY,QAAS,YAC3BiG,EAAA,SAAA3J,GAYA,SAAA2J,EAIG1D,GAJH,IAAA3N,EACI0H,EADJL,KAAApH,KACU0N,EAAa,gBAAiBxC,EAAQC,IADhDnL,YAESD,EAATgB,0BAZC4G,EAADyJ,EAAA3J,GAgBA2J,EAAA5Q,UAAAG,WAAA,WAEIX,KAGKe,cAAgBf,KAAKK,cAAcW,mBAAmB,YAAa,WAAYhB,MACpFA,KAGKoB,UAAY,IAAI5B,OAAOC,KAAK2R,cAAcpR,KAAM,IAAOA,KAAM,OAAUA,KAAKe,eAFjFf,KAGKoB,UAAUC,OAAOrB,KAAKL,iBAAiBmB,KAF5Cd,KAGKoB,UAAW,cAAkBpB,KAAKJ,cAAvCI,KAGKI,QAAQkB,gBAAgBtB,KAAKF,QAASE,KAAM,aADjDA,KAGKL,iBAAiB4B,oBAAoBvB,KAAKJ,cAAeI,KAAKoB,WAFnEpB,KAGKC,aAAauB,KAAKxB,KAAKoB,cAnChC,CAEC1B,GAmCM0R,EAAPpL,aACE9D,KAAMyL,EAAAA,UAAW7E,OAFjBmE,SAGU,4BAFVpN,OAGQqL,EAFRpL,QAGSqL,MAIViG,EAADlL,eAAC,WAAA,QAAAhE,KAAMkJ,KC/CP,IAAMF,GAAW,OAAQ,cAAe,WAAY,eAAgB,UAAW,SAAU,WACnFC,KACNkG,EAAA,SAAA5J,GAYA,SAAA4J,EAKG3D,GALH,IAAA3N,EACI0H,EADJL,KAAApH,KACU0N,EAAa,eAAgBxC,EAAQC,IAD/CnL,YAGSD,EAAToB,YAAuB,yBAbtBwG,EAAD0J,EAAA5J,KAFA,CAEC/H,GAkBM2R,EAAPrL,aACE9D,KAAMyL,EAAAA,UAAW7E,OAJjBmE,SAKU,2BAJVpN,OAKQqL,EAJRpL,QAKSqL,MAIVkG,EAADnL,eAAC,WAAA,QAFAhE,KAAMkJ,KC5BP,IAAMF,GAAW,YAAa,mBAAoB,iBAAkB,sBAAuB,MAAO,SAAU,WACtGC,GAAY,QAAS,0BAA2B,kBACtDmG,EAAA,SAAA7J,GAcA,SAAA6J,EAGG5D,GAFH,OAAIjG,EAAJL,KAAApH,KAAU0N,EAAa,WAAYxC,EAAQC,IAA3CnL,YAbC2H,EAAD2J,EAAA7J,KAFA,CAEC/H,GAkBM4R,EAAPtL,aACE9D,KAAMyL,EAAAA,UAAW7E,OAFjBmE,SAGU,uBAFVpN,OAGQqL,EAFRpL,QAGSqL,MAIVmG,EAADpL,eAAC,WAAA,QAAAhE,KAAMkJ,KC9BP,IAAMF,GACJ,cAAe,YAAa,YAAa,SAAU,YAAa,OAAQ,QAAS,UACjF,YAAa,QAAS,WAAY,QAAS,QAAS,UAAW,SAAU,UAEzE,uBAEIC,GACJ,mBAAoB,QAAS,mBAAoB,gBAAiB,WAAY,OAAQ,UAAW,mBACjG,YAAa,cAAe,cAAe,YAAa,WAAY,YAAa,UAAW,kBAAmB,aAC/G,eAAgB,eAAgB,iBAAkB,iBAEpDoG,GAAA,SAAA9J,GA4CA,SAAA8J,EAIsB7D,GAJtB,IAAA3N,EACI0H,EADJL,KAAApH,KACU0N,EAAa,SAAUxC,EAAQC,IADzCnL,YAIsBD,EAAtB2N,YAAsBA,EAFb3N,EAATgB,0BA5CC4G,EAAD4J,EAAA9J,GAiDA8J,EAAA/Q,UAAAC,SAAA,WAAA,IAAAV,EAAAC,KACQA,KAGKL,iBAAiBe,aAFxBV,KAGKW,aADLX,KAGKL,iBAAiBiB,UAAUC,UAAU,SAAAC,GAAO,OAAAf,EAAKY,gBAG5D4Q,EAAA/Q,UAAAG,WAAA,WACI8G,EAAJjH,UACUG,WADVyG,KAAApH,MACIA,KACKyO,eAIT8C,EAAA/Q,UAAAiO,YAAA,WAAA,IAAA1O,EAAAC,KAASA,KAAM,SAY4B,iBAArBA,KAAM,UAEtBA,KADKG,eAAe4H,KAAK/H,KAAK0N,YAAY3D,SAASV,SAASe,QAASpK,KAAM,WAAaa,UAEtF,SAAA6I,GAEE3J,EADKqB,UAAUqN,YAAY/E,EAAQ,GAAGW,SAASC,WAGjD,SAAA3H,GACEH,QADQG,MAAM,4CAA6C5C,EAAM,UAEjEA,EADKqB,UAAUqN,YAAY1O,EAAKgB,cAAe,qBAAyB,IAAIvB,OAAOC,KAAKuE,OAAO,EAAG,OAlBtGhE,KADKG,eAAe4H,KAAK/H,KAAK0N,YAAYhH,YAAYN,qBAAqBvF,UAEzE,SAAAI,GAEE,IADIqL,EAAS,IAAI9M,OAAOC,KAAKuE,OAAO/C,EAASsL,OAAOC,SAAUvL,EAASsL,OAAOE,WAE9E1M,EADKqB,UAAUqN,YAAYnC,IAG7B,SAAA3J,GACEH,QADQG,MAAM,gDAEd5C,EADKqB,UAAUqN,YAAY1O,EAAKgB,cAAe,qBAAyB,IAAIvB,OAAOC,KAAKuE,OAAO,EAAG,UA7E5G,CAECtE,GA2FM6R,GAAPvL,aACE9D,KAAMyL,EAAAA,UAAW7E,OAEjBmE,SADU,oBAEVpN,OADQqL,EAERpL,QADSqL,MAIVoG,GAADrL,eAAC,WAAA,QAIAhE,KAAMkJ,KC/GP,IAAAoG,GAAA,kBAcA,SAAWnR,EACAgL,EACAlC,GAFX,IAAApJ,EAAAC,KAAWA,KAAXK,cAAWA,EACAL,KAAXqL,WAAWA,EACArL,KAAXmJ,UAAWA,EAXRnJ,KAAHyR,cAEsC,IAAIvR,EAAAA,aADvCF,KAAHC,aAEqC,IAAIC,EAAAA,aAgBvCF,KAAFW,WADe,WAEXZ,EADKgB,cAEHhB,EADKM,cAAcW,mBAAmB,SAAU,wBAAyB,SAAUjB,GAIrFA,EADK2R,aAAe,IAAIlS,OAAOC,KAAKkS,OAAOC,aAEzC7R,EADKsL,WAAWW,cAEhBjM,EADKgB,eAKPhB,EADK2R,aAAa7G,YAAY,gBAAiB,SAAAgH,GAE7C9R,EADK0R,cAAcjQ,KAAKzB,EAAK2R,aAAaI,cAI5C/R,EADKE,aAAauB,KAAKzB,EAAK2R,eAnB5BvI,EAAU5B,OACV4B,EAAUjC,KAAKrG,UAAU,WAAM,OAAAd,EAAKY,gBApBxC,GAwCO6Q,GAAPxL,aACE9D,KAAMyL,EAAAA,UAAW7E,OAEjBmE,SADU,6BAIXuE,GAADtL,eAAC,WAAA,QAIAhE,KAAME,IACNF,KAAMsL,EAAAA,aACNtL,KAAM8E,KADAwK,GAAPvP,gBAIA8P,SAHa7P,KAAMgP,EAAAA,MAAOpI,MAAM,YAIhCkJ,wBAH4B9P,KAAMgP,EAAAA,MAAOpI,MAAM,2BAI/CmJ,QAHY/P,KAAMgP,EAAAA,MAAOpI,MAAM,WAI/B2I,gBAHoBvP,KAAMC,EAAAA,OAAQ2G,MAAM,mBAIxC7I,eAHmBiC,KAAMC,EAAAA,UC7DzB,IAAM+I,IACJ,YAAa,YAAa,WAAY,YAAa,cAAe,WAAY,QAC9E,cAAe,gBAAiB,iBAAkB,eAAgB,UAAW,SAAU,WAEnFC,IACJ,QAAS,WAAY,OAAQ,UAAW,YAAa,YACrD,YAAa,WAAY,YAAa,UAAW,cAEnD+G,GAAA,SAAAzK,GA6BA,SAAAyK,EAGGxE,GAFH,OAAIjG,EAAJL,KAAApH,KAAU0N,EAAa,UAAWxC,GAAQC,KAA1CnL,YA5BC2H,EAADuK,EAAAzK,KAFA,CAEC/H,GAiCMwS,GAAPlM,aACE9D,KAAMyL,EAAAA,UAAW7E,OAFjBmE,SAGU,yCAFVpN,OAGQqL,GAFRpL,QAGSqL,OAIV+G,GAADhM,eAAC,WAAA,QAAAhE,KAAMkJ,KCnDP,IAAMF,IACJ,YAAa,YAAa,WAAY,WAAY,QAAS,OAAQ,cACnE,gBAAiB,eAAgB,UAAW,SAAU,WAElDC,IACJ,QAAS,WAAY,OAAQ,UAAW,YAAa,YACrD,YAAa,WAAY,YAAa,UAAW,cAEnDgH,GAAA,SAAA1K,GA2BA,SAAA0K,EAGGzE,GAFH,OAAIjG,EAAJL,KAAApH,KAAU0N,EAAa,WAAYxC,GAAQC,KAA3CnL,YA1BC2H,EAADwK,EAAA1K,KAFA,CAEC/H,GA+BMyS,GAAPnM,aACE9D,KAAMyL,EAAAA,UAAW7E,OAFjBmE,SAGU,sBAFVpN,OAGQqL,GAFRpL,QAGSqL,OAIVgH,GAADjM,eAAC,WAAA,QAAAhE,KAAMkJ,KCjDP,IAAMF,IACJ,WAAY,UACZ,iBAAkB,wBAAyB,YAAa,mBAAoB,yBAC5E,oBAAqB,oBAAqB,2BAA4B,mBAAoB,eAC1F,iBAAkB,wBAAyB,aAAc,oBAAqB,OAC9E,WAAY,MAAO,cAAe,iBAAkB,UAAW,cAAe,sBAE1EC,IACJ,aAAc,eAAgB,mBAAoB,cAAe,SAAU,iBAC3E,kBAAmB,gBAErBiH,GAAA,SAAA3K,GAoCA,SAAA2K,EAGG1E,GAFH,OAAIjG,EAAJL,KAAApH,KAAU0N,EAAa,qBAAsBxC,GAAQC,KAArDnL,YAnCC2H,EAADyK,EAAA3K,GAwCA2K,EAAA5R,UAAAG,WAAA,WACIX,KAEKe,cAAgBf,KAAKK,cAAcW,kBAAkBhB,KAAKH,OAAQG,MACvE,IAEIiO,EADAjO,KAEKe,cAAckM,UAArBgB,EAEUpG,SAASC,cAAc9H,KAAM,iBAChCA,KAAKe,cAAckM,UAA1BgB,EAEUjO,KAAKL,iBAAiBoE,GAIK,iBAAhC/D,KAAKe,cAAcE,iBAAiCjB,KAAKe,cAAcE,SAA9EjB,KAEKoB,UAAY,IAAI5B,OAAOC,KAAKO,KAAKJ,eAAeqO,EAASjO,KAAKe,eADnEf,KAEKoB,UAAW,cAAkBpB,KAAKJ,cADvCI,KAEKoB,UAAW,iBAAqBpB,KAAKL,iBAC1CK,KAEKI,QAAQkB,gBAAgBtB,KAAKF,QAASE,KAAM,aAAjDA,KAEKL,iBAAiB4B,oBAAoBvB,KAAKJ,cAAeI,KAAKoB,WADnEpB,KAEKC,aAAauB,KAAKxB,KAAKoB,YAGhCgR,EAAA5R,UAAAoB,YAAA,WACQ5B,KACKL,iBAAiBoE,IAAxB/D,KACKI,QAAQ4B,kBAAkBhC,KAAKF,QAASE,KAAM,gBA1EzD,CAECN,GA2EM0S,GAAPpM,aACE9D,KAAMyL,EAAAA,UAAW7E,OAAjBmE,SACU,kCAAVpN,OACQqL,GAARpL,QACSqL,OAIViH,GAADlM,eAAC,WAAA,QAEAhE,KAAMkJ,KCnGP,IAAMF,IAAS,cAAgB,WACzBC,MACNkH,GAAA,SAAA5K,GAMA,SAAA4K,EAIG3E,GAHH,OAAIjG,EAAJL,KAAApH,KAAU0N,EAAa,eAAgBxC,GAAQC,KAA/CnL,YALC2H,EAAD0K,EAAA5K,KAFA,CAEC/H,GAWM2S,GAAPrM,aACE9D,KAAMyL,EAAAA,UAAW7E,OAHjBmE,SAIU,2BAHVpN,OAIQqL,GAHRpL,QAISqL,OAIVkH,GAADnM,eAAC,WAAA,QADAhE,KAAMkJ,KCrBP,IAAMF,MACAC,MACNmH,GAAA,SAAA7K,GAIA,SAAA6K,EAKG5E,GAJH,OAAIjG,EAAJL,KAAApH,KAAU0N,EAAa,eAAgBxC,GAAQC,KAA/CnL,YAHC2H,EAAD2K,EAAA7K,KAFA,CAEC/H,GAUM4S,GAAPtM,aACE9D,KAAMyL,EAAAA,UAAW7E,OAJjBmE,SAKU,2BAJVpN,OAKQqL,GAJRpL,QAKSqL,OAIVmH,GAADpM,eAAC,WAAA,QAFAhE,KAAMkJ,KCKP,IAAMmH,IACJnH,EAAkBwC,EAClB2D,GAAQrB,EAAQ7B,EAAc6D,GAAStE,EAAYuE,GAAUf,EAC7DkB,GAAcD,GAAchB,EAAc5D,EAAgB6D,EAAUnB,EACpEiC,GAAoBZ,GAAoBhB,EACxCW,GAEFqB,GAAA,WAAA,SAAAA,YAGGA,EAAHC,QAEA,SAFGxL,GAGC,YAHJ,IAAAA,IAAGA,OAIGyL,SAFUF,EAGVtF,YADIyF,QAAS7L,EAAqB8L,SAAU3L,QAPlD,GAWOuL,GAAPxM,aACE9D,KAAM2Q,EAAAA,SAAU/J,OAGhBgK,SAFWC,EAAAA,cAGXC,aAFcT,GAGdU,SAFSV,IAGTrF,WACEhE,EACA/C,EACA2D,EACA1H,GACCuQ,QAFS3L,EAAgBkM,SAAU1L,QAKvCgL,GAADtM,eAAC,WAAA"}
