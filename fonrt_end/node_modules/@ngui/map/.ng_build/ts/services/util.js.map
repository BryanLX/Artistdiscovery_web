{"version":3,"sources":["../tmp/services/util.ts"],"names":[],"mappings":"AACA;;;;GAIG;AACH,MAHC,kBAAA,GAAA;IAIC,IAHI,CAAA;QAIF,IAAI,CAHC,KAAC,CAAK,GAAC,CAAG,CAAC;QAIhB,MAAM,CAHC,GAAA,CAAI;IAIb,CAAC;IAHC,KAAA,CAAA,CAAA,CAAQ,CAAC,CAAC,CAAA;QAIV,MAAM,CAHC,GAAA;aAIJ,OAHC,CAAO,gBAAC,EAAiB,iCAAA;QAIzB,UAAS,CAHG,EAAK,EAAI;YAInB,MAAM,CAHC,GAAA,GAAM,EAAA,GAAK,IAAA,CAAK;QAIzB,CAAC,CACF;aACA,OAHC,CAAO,YAAC,EAAa,yCAAA;QAIrB,UAAS,CAHG,EAAK,EAAI;YAInB,MAAM,CAHC,GAAA,GAAM,EAAA,GAAK,GAAA,CAAI;QAIxB,CAAC,CACF,CAHC;IAIN,CAAC;AACH,CAAC;AACD;;;;GAIG;AACH,MAJC,kBAAA,KAAA;IAKC,EAAE,CAAC,CAAC,OAJO,KAAA,KAAU,QAAA,CAAS,CAAC,CAAA;QAK7B,MAAM,gBAAgB,CAJhB,EAAA,GAAK,0CAAA,CAA2C,CAAC,UAAA;QAKvD,EAAE,CAAC,CAAC,KAJC,CAAK,KAAC,CAAK,EAAC,CAAE,CAAC,CAAC,CAAA;YAKnB,KAAK,GAJG,GAAA,GAAM,KAAA,GAAQ,GAAA,CAAI;QAK5B,CAAC;QACD,MAAM,CAJC,IAAA,CAAK,KAAC,CAAK,OAAC,CAAO,KAAC,CAAK,CAAC,CAAC;IAKpC,CAAC;IAJC,IAAA,CAAK,CAAA;QAKL,MAAM,CAJC,KAAA,CAAM;IAKf,CAAC;AACH,CAAC;AAWD;;;;GAIG;AACH,MAHC,sBAAA,GAAA;IAIC,MAAM,CAHC,GAAA,CAAI,OAAC,CAAO,qBAAC,EAAsB,UAAA,MAAU,EAAO,KAAA;QAIzD,MAAM,CAHC,KAAA,KAAU,CAAA,CAAE,CAAA,CAAE,MAAA,CAAO,WAAC,EAAW,CAAE,CAAA,CAAE,MAAA,CAAO,WAAC,EAAW,CAAE;IAInE,CAAC,CAHC,CAAC,OAAC,CAAO,MAAC,EAAO,EAAA,CAAG,CAAC;AAIzB,CAAC;AACD;;GAEG;AACH,MALC;IAMC,MAAM,CALC,OAAO,MAAA,KAAW,QAAA,IAAY,OAAO,MAAA,CAAO,IAAC,KAAQ,QAAA,CAAS;AAMvE,CAAC","file":"util.js","sourceRoot":"","sourcesContent":["\n/**\n * return json string from json-like string\n * @param {?} str\n * @return {?}\n */\nexport function jsonize(str: string): string {\n  try {       // if parsable already, return as it is\n    JSON.parse(str);\n    return str;\n  } catch ( /** @type {?} */e) { // if not parsable, change little\n    return str\n      .replace(/([\\$\\w]+)\\s*:/g, // wrap keys without double quote\n        function(_: any, $1: any) {\n          return '\"' + $1 + '\":';\n        }\n      )\n      .replace(/'([^']+)'/g,   // replacing single quote to double quote\n        function(_: any, $1: any) {\n          return '\"' + $1 + '\"';\n        }\n      );\n  }\n}\n/**\n * Returns string to an object by using JSON.parse()\n * @param {?} input\n * @return {?}\n */\nexport function getJSON(input: any): any {\n  if (typeof input === 'string') {\n    const /** @type {?} */ re = /^[\\+\\-]?[0-9\\.]+,[ ]*\\ ?[\\+\\-]?[0-9\\.]+$/; // lat,lng\n    if (input.match(re)) {\n      input = '[' + input + ']';\n    }\n    return JSON.parse(jsonize(input));\n  } else {\n    return input;\n  }\n}\n\n/**\n * json type definition\n */\n/* tslint:disable */\n//interface IJsonArray extends Array<string|number|boolean|Date|IJson|IJsonArray> { }\nexport interface IJson {\n  //[x: string]: string|number|boolean|Date|IJson|IJsonArray;\n  [x: string]: string|number|boolean|Date|IJson|Array<string|number|boolean|Date|IJson>;\n}\n/**\n * Returns camel-cased from string 'Foo Bar' to 'fooBar'\n * @param {?} str\n * @return {?}\n */\nexport function toCamelCase(str: string): string {\n  return str.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function(letter, index) {\n    return index === 0 ? letter.toLowerCase() : letter.toUpperCase();\n  }).replace(/\\s+/g, '');\n}\n/**\n * @return {?}\n */\nexport function isMapsApiLoaded() {\n  return typeof google === 'object' && typeof google.maps === 'object';\n}\n"]}