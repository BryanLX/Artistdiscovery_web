import { Directive } from '@angular/core';
import { BaseMapDirective } from './base-map-directive';
import { NguiMapComponent } from '../components/ngui-map.component';
const /** @type {?} */ INPUTS = [
    'center', 'clickable', 'draggable', 'editable', 'fillColor', 'fillOpacity', 'map', 'radius',
    'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight', 'visible', 'zIndex', 'options',
    // ngui-map specific inputs
    'geoFallbackCenter'
];
const /** @type {?} */ OUTPUTS = [
    'centerChanged', 'click', 'dblclick', 'drag', 'dragend', 'dragstart',
    'mousedown', 'mousemove', 'mouseout', 'mouseover', 'mouseup', 'radiusChanged', 'rightclick',
];
export class Circle extends BaseMapDirective {
    /**
     * @param {?} nguiMapComp
     */
    constructor(nguiMapComp) {
        super(nguiMapComp, 'Circle', INPUTS, OUTPUTS);
        this.nguiMapComp = nguiMapComp;
        this.objectOptions = ({});
    }
    /**
     * @return {?}
     */
    initialize() {
        super.initialize();
        this.setCenter();
    }
    /**
     * @return {?}
     */
    setCenter() {
        if (!this['center']) {
            this._subscriptions.push(this.nguiMapComp.geolocation.getCurrentPosition().subscribe(center => {
                let /** @type {?} */ latLng = new google.maps.LatLng(center.coords.latitude, center.coords.longitude);
                this.mapObject.setCenter(latLng);
            }, error => {
                console.error('ngui-map, error in finding the current position');
                this.mapObject.setCenter(this.objectOptions['geoFallbackCenter'] || new google.maps.LatLng(0, 0));
            }));
        }
        else if (typeof this['center'] === 'string') {
            this._subscriptions.push(this.nguiMapComp.geoCoder.geocode({ address: this['center'] }).subscribe(results => {
                this.mapObject.setCenter(results[0].geometry.location);
            }, error => {
                console.error('ngui-map, error in finding location from', this['center']);
                this.mapObject.setCenter(this.objectOptions['geoFallbackCenter'] || new google.maps.LatLng(0, 0));
            }));
        }
    }
}
Circle.decorators = [
    { type: Directive, args: [{
                selector: 'ngui-map>circle, ngui-map>map-circle',
                inputs: INPUTS,
                outputs: OUTPUTS,
            },] },
];
/**
 * @nocollapse
 */
Circle.ctorParameters = () => [
    { type: NguiMapComponent, },
];
function Circle_tsickle_Closure_declarations() {
    /** @type {?} */
    Circle.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    Circle.ctorParameters;
    /** @type {?} */
    Circle.prototype.center;
    /** @type {?} */
    Circle.prototype.clickable;
    /** @type {?} */
    Circle.prototype.draggable;
    /** @type {?} */
    Circle.prototype.editable;
    /** @type {?} */
    Circle.prototype.fillColor;
    /** @type {?} */
    Circle.prototype.fillOpacity;
    /** @type {?} */
    Circle.prototype.map;
    /** @type {?} */
    Circle.prototype.radius;
    /** @type {?} */
    Circle.prototype.strokeColor;
    /** @type {?} */
    Circle.prototype.strokeOpacity;
    /** @type {?} */
    Circle.prototype.strokePosition;
    /** @type {?} */
    Circle.prototype.strokeWeight;
    /** @type {?} */
    Circle.prototype.visible;
    /** @type {?} */
    Circle.prototype.zIndex;
    /** @type {?} */
    Circle.prototype.options;
    /** @type {?} */
    Circle.prototype.geoFallbackCenter;
    /** @type {?} */
    Circle.prototype.centerChanged;
    /** @type {?} */
    Circle.prototype.click;
    /** @type {?} */
    Circle.prototype.dblclick;
    /** @type {?} */
    Circle.prototype.drag;
    /** @type {?} */
    Circle.prototype.dragend;
    /** @type {?} */
    Circle.prototype.dragstart;
    /** @type {?} */
    Circle.prototype.mousedown;
    /** @type {?} */
    Circle.prototype.mousemove;
    /** @type {?} */
    Circle.prototype.mouseout;
    /** @type {?} */
    Circle.prototype.mouseover;
    /** @type {?} */
    Circle.prototype.mouseup;
    /** @type {?} */
    Circle.prototype.radiusChanged;
    /** @type {?} */
    Circle.prototype.rightclick;
    /** @type {?} */
    Circle.prototype.mapObject;
    /** @type {?} */
    Circle.prototype.objectOptions;
    /** @type {?} */
    Circle.prototype.nguiMapComp;
}
//# sourceMappingURL=circle.js.map