!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/core"),require("rxjs/Observable"),require("rxjs/ReplaySubject"),require("rxjs/operator/first"),require("rxjs/Subject"),require("rxjs/operator/debounceTime"),require("@angular/common")):"function"==typeof define&&define.amd?define(["exports","@angular/core","rxjs/Observable","rxjs/ReplaySubject","rxjs/operator/first","rxjs/Subject","rxjs/operator/debounceTime","@angular/common"],e):e(t.map={},t.ng.core,t.Rx,t.Rx,t.Rx.Observable.prototype,t.Rx,t.Rx.Observable.prototype,t.ng.common)}(this,function(t,e,o,n,i,r,s,a){"use strict";function p(t){return t.replace(/(?:^\w|[A-Z]|\b\w)/g,function(t,e){return 0===e?t.toLowerCase():t.toUpperCase()}).replace(/\s+/g,"")}function c(){return"object"==typeof google&&"object"==typeof google.maps}var u=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])};return function(e,o){function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),l=function(){function t(t,o,n,i){var r=this;this.nguiMapComponent=t,this.mapObjectName=o,this.inputs=n,this.outputs=i,this.initialized$=new e.EventEmitter,this._subscriptions=[],this.nguiMap=this.nguiMapComponent.nguiMap,this.optionBuilder=this.nguiMapComponent.optionBuilder,this.outputs.forEach(function(t){return r[t]=new e.EventEmitter}),this.mapObjectName=o}return t.prototype.ngOnInit=function(){var t=this;this.nguiMapComponent.mapIdledOnce?this.initialize():this.nguiMapComponent.mapReady$.subscribe(function(e){return t.initialize()})},t.prototype.initialize=function(){this.objectOptions=this.optionBuilder.googlizeAllInputs(this.inputs,this),"string"==typeof this.objectOptions.position&&delete this.objectOptions.position,"string"==typeof this.objectOptions.center&&delete this.objectOptions.center,this.libraryName?this.mapObject=new google.maps[this.libraryName][this.mapObjectName](this.objectOptions):this.mapObject=new google.maps[this.mapObjectName](this.objectOptions),this.mapObject.setMap(this.nguiMapComponent.map),this.mapObject.mapObjectName=this.mapObjectName,this.mapObject.nguiMapComponent=this.nguiMapComponent,this.nguiMap.setObjectEvents(this.outputs,this,"mapObject"),this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName,this.mapObject),this.initialized$.emit(this.mapObject)},t.prototype.ngOnChanges=function(t){this.nguiMap.updateGoogleObject(this.mapObject,t)},t.prototype.ngOnDestroy=function(){this._subscriptions.map(function(t){return t.unsubscribe()}),this.nguiMapComponent.removeFromMapObjectGroup(this.mapObjectName,this.mapObject),this.mapObject&&this.nguiMap.clearObjectEvents(this.outputs,this,"mapObject")},t}();l.propDecorators={initialized$:[{type:e.Output}]};var g=function(){function t(){}return t.prototype.googlizeAllInputs=function(t,e){var o=this,n={};return e.options?(console.log("userInputs.options .................",e.options),n=e.options,this.onlyOptionsGiven(t,e)||console.error('when "options" are used, other options are ignored')):t.forEach(function(t){e[t]!==undefined&&(n[t]=o.googlize(e[t],{key:t}))}),n},t.prototype.googlizeMultiple=function(t,e){e=e||{};for(var o in t){var n=t[o];"string"!=typeof n?e[o]=n:e.doNotConverStringToNumber&&n.match(/^[0-9]+$/)||(e[o]=this.googlize(n,{key:o}))}return e},t.prototype.googlize=function(t,e){e=e||{};var o=t;if("string"==typeof t&&(o="false"!==t&&("0"===t?0:this.getJSONParsed(t,e)||this.getAnyMapObject(t)||this.getAnyMapConstant(t,e)||this.getDateObject(t)||t)),e.key){var n=e.key;o instanceof Array?"bounds"===n?o=new google.maps.LatLngBounds(o[0],o[1]):"icons"===n?o=this.getMapIcons(o):("position"===n||n.match(/^geoFallback/))&&(o=this.getLatLng(o)):o instanceof Object&&("icon"===n?o=this.getMarkerIcon(o):n.match(/ControlOptions$/)&&(o=this.getMapControlOption(o)))}return delete o.doNotConverStringToNumber,delete o.key,o},t.prototype.getLatLng=function(t){var e;return t[0].constructor===Array?e=t.map(function(t){return new google.maps.LatLng(t[0],t[1])}):!isNaN(parseFloat(t[0]))&&isFinite(t[0])&&(e=new google.maps.LatLng(t[0],t[1])),e},t.prototype.getJSONParsed=function(t,e){var o;try{if((o=function(t){if("string"==typeof t)return t.match(/^[\+\-]?[0-9\.]+,[ ]*\ ?[\+\-]?[0-9\.]+$/)&&(t="["+t+"]"),JSON.parse(function(t){try{return t}catch(e){return t.replace(/([\$\w]+)\s*:/g,function(t,e){return'"'+e+'":'}).replace(/'([^']+)'/g,function(t,e){return'"'+e+'"'})}}(t));return t}(t))instanceof Array)o[0].constructor!==Object&&(o=this.getLatLng(o));else if(o===Object(o)){var n=e;n.doNotConverStringToNumber=!0,o=this.googlizeMultiple(o,n)}}catch(i){}return o},t.prototype.getAnyMapObject=function(t){var e;if(t.match(/^[A-Z][a-zA-Z0-9]+\(.*\)$/))try{e=Function("return new google.maps."+t+";")()}catch(o){}return e},t.prototype.getAnyMapConstant=function(t,e){var o;if(t.match(/^([A-Z][a-zA-Z0-9]+)\.([A-Z]+)$/))try{var n=t.match(/^([A-Z][a-zA-Z0-9]+)\.([A-Z]+)$/);o=google.maps[n[1]][n[2]]}catch(r){}else if(t.match(/^[A-Z]+$/))try{var i=e.key.charAt(0).toUpperCase()+e.key.slice(1);o=google.maps[i][t]}catch(r){}return o},t.prototype.getMapControlOption=function(t){var e=t;for(var o in e)if(e[o]){var n=e[o];if("string"==typeof n?n=n.toUpperCase():"mapTypeIds"===o&&(n=n.map(function(t){return t.match(/^[A-Z]+$/)?google.maps.MapTypeId[t.toUpperCase()]:t})),"style"===o){var i=o.replace(/Options$/,"")+"Style";e[o]=google.maps[i][n]}else e[o]="position"===o?google.maps.ControlPosition[n]:n}return e},t.prototype.getDateObject=function(t){var e;if(t.match(/^(\d{4}\-\d\d\-\d\d([tT][\d:\.]*)?)([zZ]|([+\-])(\d\d):?(\d\d))?$/))try{e=new Date(t)}catch(o){}return e},t.prototype.getMapIcons=function(t){return t.map(function(t){return t.icon.path.match(/^[A-Z_]+$/)&&(t.icon.path=google.maps.SymbolPath[t.icon.path]),t})},t.prototype.getMarkerIcon=function(t){var e=t;(""+e.path).match(/^[A-Z_]+$/)&&(e.path=google.maps.SymbolPath[e.path]);for(var o in e){var n=e[o];"anchor"===o||"origin"===o||"labelOrigin"===o?e[o]=new google.maps.Point(n[0],n[1]):"size"!==o&&"scaledSize"!==o||(e[o]=new google.maps.Size(n[0],n[1]))}return e},t.prototype.onlyOptionsGiven=function(t,e){for(var o=0;o<t.length;o++){var n=t[o];if("options"!==n&&"undefined"!=typeof e[n])return!1}return!0},t}();g.decorators=[{type:e.Injectable}],g.ctorParameters=function(){return[]};var h=function(){function t(){}return t.prototype.getCurrentPosition=function(t){return t=t||{timeout:5e3},new o.Observable(function(e){navigator.geolocation?navigator.geolocation.getCurrentPosition(function(t){e.next(t),e.complete()},function(t){return e.error(t)},t):e.error("Browser Geolocation service failed.")})},t}();h.decorators=[{type:e.Injectable}],h.ctorParameters=function(){return[]};var d=new e.InjectionToken("NG_MAP_CONFIG_TOKEN"),m=function(){function t(t){this.config=t,this.api$=i.first.call(new n.ReplaySubject(1)),this.config=this.config||{apiUrl:"https://maps.google.com/maps/api/js"}}return t.prototype.load=function(){},t.prototype.ngOnDestroy=function(){this.api$.complete()},t}(),f=function(t){function e(e,o){var n=t.call(this,o)||this;return n.zone=e,n}return u(e,t),e.prototype.load=function(){var t=this;"undefined"!=typeof window&&(c()?this.api$.next(google.maps):document.querySelector("#ngui-map-api")||(window.nguiMapRef=window.nguiMapRef||[],window.nguiMapRef.push({zone:this.zone,componentFn:function(){return t.api$.next(google.maps)}}),this.addGoogleMapsApi()))},e.prototype.addGoogleMapsApi=function(){window.initNguiMap=window.initNguiMap||function(){window.nguiMapRef.forEach(function(t){t.zone.run(function(){t.componentFn()})}),window.nguiMapRef.splice(0,window.nguiMapRef.length)};var t=document.createElement("script");t.id="ngui-map-api";var e=this.config.apiUrl;e+=-1!==e.indexOf("?")?"&":"?",t.src=e+"callback=initNguiMap",document.querySelector("body").appendChild(t)},e}(m);f.decorators=[{type:e.Injectable}],f.ctorParameters=function(){return[{type:e.NgZone},{type:undefined,decorators:[{type:e.Optional},{type:e.Inject,args:[d]}]}]};var y=function(t){function e(e){return t.call(this,e)||this}return u(e,t),e.prototype.load=function(){var t=this;if("undefined"!=typeof window)if(c())this.api$.next(google.maps);else if(!document.querySelector("#ngui-map-api")){var e=document.createElement("script");e.id="ngui-map-api",e.async=!0,e.onload=function(){return t.api$.next(google.maps)},e.src=this.config.apiUrl,document.querySelector("body").appendChild(e)}},e}(m);y.decorators=[{type:e.Injectable}],y.ctorParameters=function(){return[{type:undefined,decorators:[{type:e.Optional},{type:e.Inject,args:[d]}]}]};var b=function(){function t(t){this.apiLoader=t,this.apiLoaderSubs=[]}return t.prototype.geocode=function(t){var e=this;return new o.Observable(function(o){e.apiLoaderSubs.push(e.apiLoader.api$.subscribe(function(){return e.requestGeocode(t,o)}))})},t.prototype.ngOnDestroy=function(){this.apiLoaderSubs.map(function(t){return t.unsubscribe()})},t.prototype.requestGeocode=function(t,e){(new google.maps.Geocoder).geocode(t,function(t,o){o===google.maps.GeocoderStatus.OK?(e.next(t),e.complete()):e.error(t)})},t}();b.decorators=[{type:e.Injectable}],b.ctorParameters=function(){return[{type:m}]};var O=function(){function t(t,e,o){var n=this;this.geoCoder=t,this.optionBuilder=e,this.zone=o,this.updateGoogleObject=function(t,e){var o,i,r;if(t)for(var s in e)r="set"+s.replace(/^[a-z]/,function(t){return t.toUpperCase()}),i=e[s].currentValue,-1!==["position","center"].indexOf(s)&&"string"==typeof i?function(e){n.geoCoder.geocode({address:i}).subscribe(function(o){"function"==typeof t[e]?t[e](o[0].geometry.location):console.error('Not all options are dynamically updatable according to Googles Maps API V3 documentation.\nPlease check Google Maps API documentation, and use "setOptions" instead.')})}(r):(o=n.optionBuilder.googlize(i),"function"==typeof t[r]?t[r](o):console.error('Not all options are dynamically updatable according to Googles Maps API V3 documentation.\nPlease check Google Maps API documentation, and use "setOptions" instead.'))}}return t.prototype.setObjectEvents=function(t,e,o){var n=this;t.forEach(function(t){var i=t.replace(/([A-Z])/g,function(t){return"_"+t.toLowerCase()}).replace(/^map_/,""),r=n.zone;r.runOutsideAngular(function(){e[o].addListener(i,function(o){var n=o||{};n.target=this,r.run(function(){return e[t].emit(n)})})})})},t.prototype.clearObjectEvents=function(t,e,o){var n=this;t.forEach(function(t){var i=t.replace(/([A-Z])/g,function(t){return"_"+t.toLowerCase()}).replace(/^map_/,"");n.zone.runOutsideAngular(function(){e[o]&&google.maps.event.clearListeners(e[o],i)})}),e[o]&&(e[o].setMap&&e[o].setMap(null),delete e[o].nguiMapComponent,delete e[o])},t}();O.decorators=[{type:e.Injectable}],O.ctorParameters=function(){return[{type:b},{type:g},{type:e.NgZone}]};var v=["backgroundColor","center","disableDefaultUI","disableDoubleClickZoom","draggable","draggableCursor","draggingCursor","heading","keyboardShortcuts","mapMaker","mapTypeControl","mapTypeId","maxZoom","minZoom","noClear","overviewMapControl","panControl","panControlOptions","rotateControl","scaleControl","scrollwheel","streetView","styles","tilt","zoom","streetViewControl","zoomControl","zoomControlOptions","mapTypeControlOptions","overviewMapControlOptions","rotateControlOptions","scaleControlOptions","streetViewControlOptions","fullscreenControl","fullscreenControlOptions","options","geoFallbackCenter"],C=["bounds_changed","center_changed","click","dblclick","drag","dragend","dragstart","heading_changed","idle","typeid_changed","mousemove","mouseout","mouseover","projection_changed","resize","rightclick","tilesloaded","tile_changed","zoom_changed","mapClick","mapMouseover","mapMouseout","mapMousemove","mapDrag","mapDragend","mapDragstart"],j=function(){function t(t,o,n,i,s,a,p){var c=this;this.optionBuilder=t,this.elementRef=o,this.geolocation=n,this.geoCoder=i,this.nguiMap=s,this.apiLoader=a,this.zone=p,this.mapReady$=new e.EventEmitter,this.mapOptions={},this.inputChanges$=new r.Subject,this.infoWindows={},this.mapIdledOnce=!1,this.initializeMapAfterDisplayed=!1,a.load(),C.forEach(function(t){return c[t]=new e.EventEmitter})}return t.prototype.ngAfterViewInit=function(){var t=this;this.apiLoaderSub=this.apiLoader.api$.subscribe(function(){return t.initializeMap()})},t.prototype.ngAfterViewChecked=function(){this.initializeMapAfterDisplayed&&this.el&&this.el.offsetWidth>0&&this.initializeMap()},t.prototype.ngOnChanges=function(t){this.inputChanges$.next(t)},t.prototype.initializeMap=function(){var t=this;this.el=this.elementRef.nativeElement.querySelector(".google-map"),this.el&&0===this.el.offsetWidth?this.initializeMapAfterDisplayed=!0:(this.initializeMapAfterDisplayed=!1,this.mapOptions=this.optionBuilder.googlizeAllInputs(v,this),this.mapOptions.zoom=this.mapOptions.zoom||15,"string"==typeof this.mapOptions.center&&delete this.mapOptions.center,this.zone.runOutsideAngular(function(){t.map=new google.maps.Map(t.el,t.mapOptions),t.map.mapObjectName="NguiMapComponent",t.mapOptions.center||t.setCenter(),t.nguiMap.setObjectEvents(C,t,"map"),t.map.addListener("idle",function(){t.mapIdledOnce||(t.mapIdledOnce=!0,setTimeout(function(){t.mapReady$.emit(t.map)}))}),s.debounceTime.call(t.inputChanges$,1e3).subscribe(function(e){return t.nguiMap.updateGoogleObject(t.map,e)}),"undefined"!=typeof window&&window.nguiMapRef&&(window.nguiMapRef.map=t.map)}))},t.prototype.setCenter=function(){var t=this;this.center?"string"==typeof this.center&&this.geoCoder.geocode({address:this.center}).subscribe(function(e){t.map.setCenter(e[0].geometry.location)},function(e){t.map.setCenter(t.mapOptions.geoFallbackCenter||new google.maps.LatLng(0,0))}):this.geolocation.getCurrentPosition().subscribe(function(e){var o=new google.maps.LatLng(e.coords.latitude,e.coords.longitude);t.map.setCenter(o)},function(e){console.error("ngui-map: Error finding the current position"),t.map.setCenter(t.mapOptions.geoFallbackCenter||new google.maps.LatLng(0,0))})},t.prototype.openInfoWindow=function(t,e){this.infoWindows[t].open(e)},t.prototype.closeInfoWindow=function(t){this.infoWindows[t]&&this.infoWindows[t].close()},t.prototype.ngOnDestroy=function(){this.inputChanges$.complete(),this.el&&!this.initializeMapAfterDisplayed&&this.nguiMap.clearObjectEvents(C,this,"map"),this.apiLoaderSub&&this.apiLoaderSub.unsubscribe()},t.prototype.addToMapObjectGroup=function(t,e){var o=p(t.toLowerCase())+"s";this.map[o]=this.map[o]||[],this.map[o].push(e)},t.prototype.removeFromMapObjectGroup=function(t,e){var o=p(t.toLowerCase())+"s";if(this.map&&this.map[o]){var n=this.map[o].indexOf(e);n>-1&&this.map[o].splice(n,1)}},t}();j.decorators=[{type:e.Component,args:[{selector:"ngui-map",providers:[O,g,b,h],styles:["\n    ngui-map {display: block; height: 300px;}\n    .google-map {width: 100%; height: 100%}\n  "],inputs:v,outputs:C,encapsulation:e.ViewEncapsulation.None,template:'\n    <div class="google-map"></div>\n    <ng-content></ng-content>\n  '}]}],j.ctorParameters=function(){return[{type:g},{type:e.ElementRef},{type:h},{type:b},{type:O},{type:m},{type:e.NgZone}]},j.propDecorators={mapReady$:[{type:e.Output}]};var M=[],w=[],z=function(t){function e(e){return t.call(this,e,"BicyclingLayer",M,w)||this}return u(e,t),e}(l);z.decorators=[{type:e.Directive,args:[{selector:"ngui-map > bicycling-layer",inputs:M,outputs:w}]}],z.ctorParameters=function(){return[{type:j}]};var k=["content","disableAutoPan","maxWidth","pixelOffset","position","zIndex","options"],P=["closeclick","content_changed","domready","position_changed","zindex_changed"],E=function(){function t(t,o,n){var i=this;this.elementRef=t,this.nguiMap=o,this.nguiMapComponent=n,this.initialized$=new e.EventEmitter,this.objectOptions={},this.inputChanges$=new r.Subject,this.elementRef.nativeElement.style.display="none",P.forEach(function(t){return i[t]=new e.EventEmitter})}return t.prototype.ngOnInit=function(){var t=this;this.nguiMapComponent.mapIdledOnce?this.initialize():this.nguiMapComponent.mapReady$.subscribe(function(e){return t.initialize()})},t.prototype.ngOnChanges=function(t){this.inputChanges$.next(t)},t.prototype.initialize=function(){var t=this;this.objectOptions=this.nguiMapComponent.optionBuilder.googlizeAllInputs(k,this),this.infoWindow=new google.maps.InfoWindow(this.objectOptions),this.infoWindow.mapObjectName="InfoWindow",this.elementRef.nativeElement.id?this.nguiMapComponent.infoWindows[this.elementRef.nativeElement.id]=this:console.error('An InfoWindow must have an id. e.g. id="detail"'),this.nguiMap.setObjectEvents(P,this,"infoWindow"),s.debounceTime.call(this.inputChanges$,1e3).subscribe(function(e){return t.nguiMap.updateGoogleObject(t.infoWindow,e)}),this.nguiMapComponent.addToMapObjectGroup("InfoWindow",this.infoWindow),this.initialized$.emit(this.infoWindow)},t.prototype.open=function(t){this.infoWindow.setContent(this.template.element.nativeElement),this.infoWindow.open(this.nguiMapComponent.map,t)},t.prototype.close=function(){this.infoWindow&&this.infoWindow.close()},t.prototype.ngOnDestroy=function(){this.inputChanges$.complete(),this.infoWindow&&(this.nguiMap.clearObjectEvents(P,this,"infoWindow"),delete this.infoWindow)},t}();E.decorators=[{type:e.Component,args:[{selector:"ngui-map > info-window",inputs:k,outputs:P,template:"<div #template><ng-content></ng-content></div>"}]}],E.ctorParameters=function(){return[{type:e.ElementRef},{type:O},{type:j}]},E.propDecorators={initialized$:[{type:e.Output}],template:[{type:e.ViewChild,args:["template",{read:e.ViewContainerRef}]}]};var I=["animationChanged","click","clickableChanged","cursorChanged","dblclick","drag","dragend","draggableChanged","dragstart","flatChanged","iconChanged","mousedown","mouseout","mouseover","mouseup","positionChanged","rightclick","shapeChanged","titleChanged","visibleChanged","zindexChanged","map_click","map_mouseover","map_mouseout","map_mouseup","map_mousedown","map_drag","map_dragend"],L=function(){function t(t,o,n){var i=this;this.nguiMapComponent=t,this.elementRef=o,this.nguiMap=n,this.initialized$=new e.EventEmitter,this.inputChanges$=new r.Subject,this.elementRef.nativeElement.style.display="none",I.forEach(function(t){return i[t]=new e.EventEmitter})}return t.prototype.ngOnInit=function(){var t=this;this.nguiMapComponent.mapIdledOnce?this.initialize():this.nguiMapComponent.mapReady$.subscribe(function(e){return t.initialize()})},t.prototype.ngOnChanges=function(t){this.inputChanges$.next(t)},t.prototype.ngOnDestroy=function(){this.inputChanges$.complete(),this.nguiMapComponent.removeFromMapObjectGroup("CustomMarker",this.mapObject),this.mapObject&&this.nguiMap.clearObjectEvents(I,this,"mapObject")},t.prototype.initialize=function(){var t=this;this.el=this.elementRef.nativeElement,this.mapObject=function(t,e){return new(function(t){function e(e,o){var n=t.call(this)||this;return n.visible=!0,n.setPosition=function(t){if(n.htmlEl.style.visibility="hidden","Array"===t.constructor.name?n.position=new google.maps.LatLng(t[0],t[1]):"string"==typeof t?(new google.maps.Geocoder).geocode({address:t},function(t,e){e===google.maps.GeocoderStatus.OK&&n.setPosition(t[0].geometry.location)}):t&&"function"==typeof t.lng&&(n.position=t),n.getProjection()&&"function"==typeof n.position.lng){var e=function(){var t=n.getProjection().fromLatLngToDivPixel(n.position),e=Math.round(t.x-n.htmlEl.offsetWidth/2),o=Math.round(t.y-n.htmlEl.offsetHeight/2);n.htmlEl.style.left=e+"px",n.htmlEl.style.top=o+"px",n.htmlEl.style.visibility="visible"};n.htmlEl.offsetWidth&&n.htmlEl.offsetHeight?e():setTimeout(function(){return e()})}},n.htmlEl=e,n.position=o,n}return u(e,t),e.prototype.onAdd=function(){this.getPanes().overlayMouseTarget.appendChild(this.htmlEl),this.htmlEl.style.position="absolute"},e.prototype.draw=function(){this.setPosition(this.position),this.setZIndex(this.zIndex),this.setVisible(this.visible)},e.prototype.onRemove=function(){},e.prototype.getPosition=function(){return this.position},e.prototype.setZIndex=function(t){t&&(this.zIndex=t),this.htmlEl.style.zIndex=this.zIndex},e.prototype.setVisible=function(t){this.htmlEl.style.display=t?"inline-block":"none",this.visible=t},e}(google.maps.OverlayView))(t,e)}(this.el,this.position),this.mapObject.setMap(this.nguiMapComponent.map),this.nguiMap.setObjectEvents(I,this,"mapObject"),s.debounceTime.call(this.inputChanges$,1e3).subscribe(function(e){return t.nguiMap.updateGoogleObject(t.mapObject,e)}),this.nguiMapComponent.addToMapObjectGroup("CustomMarker",this.mapObject),this.initialized$.emit(this.mapObject)},t}();L.decorators=[{type:e.Component,args:[{selector:"ngui-map > custom-marker",inputs:["position"],outputs:I,template:"\n    <ng-content></ng-content>\n  "}]}],L.ctorParameters=function(){return[{type:j},{type:e.ElementRef},{type:O}]},L.propDecorators={initialized$:[{type:e.Output}]};var A=["center","clickable","draggable","editable","fillColor","fillOpacity","map","radius","strokeColor","strokeOpacity","strokePosition","strokeWeight","visible","zIndex","options","geoFallbackCenter"],D=["centerChanged","click","dblclick","drag","dragend","dragstart","mousedown","mousemove","mouseout","mouseover","mouseup","radiusChanged","rightclick"],R=function(t){function e(e){var o=t.call(this,e,"Circle",A,D)||this;return o.nguiMapComp=e,o.objectOptions={},o}return u(e,t),e.prototype.initialize=function(){t.prototype.initialize.call(this),this.setCenter()},e.prototype.setCenter=function(){var t=this;this.center?"string"==typeof this.center&&this._subscriptions.push(this.nguiMapComp.geoCoder.geocode({address:this.center}).subscribe(function(e){t.mapObject.setCenter(e[0].geometry.location)},function(e){console.error("ngui-map, error in finding location from",t.center),t.mapObject.setCenter(t.objectOptions.geoFallbackCenter||new google.maps.LatLng(0,0))})):this._subscriptions.push(this.nguiMapComp.geolocation.getCurrentPosition().subscribe(function(e){var o=new google.maps.LatLng(e.coords.latitude,e.coords.longitude);t.mapObject.setCenter(o)},function(e){console.error("ngui-map, error in finding the current position"),t.mapObject.setCenter(t.objectOptions.geoFallbackCenter||new google.maps.LatLng(0,0))}))},e}(l);R.decorators=[{type:e.Directive,args:[{selector:"ngui-map>circle, ngui-map>map-circle",inputs:A,outputs:D}]}],R.ctorParameters=function(){return[{type:j}]};var _=["controlPosition","controls","drawingMode","featureFactory","style","geoJson","geoJsonUrl"],x=["addfeature","click","dblclick","mousedown","mouseout","mouseover","mouseup","removefeature","removeproperty","rightclick","setgeometry","setproperty"],N=function(t){function e(e){return t.call(this,e,"Data",_,x)||this}return u(e,t),e.prototype.initialize=function(){this.geoJson?this.nguiMapComponent.map.data.addGeoJson(this.geoJson):this.geoJsonUrl?this.nguiMapComponent.map.data.loadGeoJson(this.geoJsonUrl):(this.objectOptions=this.optionBuilder.googlizeAllInputs(this.inputs,this),this.nguiMapComponent.map.data.add(this.objectOptions)),this.mapObject=this.nguiMapComponent.map.data,this.nguiMap.setObjectEvents(this.outputs,this,"mapObject"),this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName,this.mapObject),this.initialized$.emit(this.mapObject)},e}(l);N.decorators=[{type:e.Directive,args:[{selector:"ngui-map > data-layer",inputs:_,outputs:x}]}],N.ctorParameters=function(){return[{type:j}]};var $=["directions","draggable","hideRouteList","infoWindow","panel","markerOptions","polylineOptions","preserveViewport","routeIndex","suppressBicyclingLayer","suppressInfoWindows","suppressMarkers","suppressPolylines"],G=["directions_changed"],S=function(t){function e(e,o){var n=t.call(this,e,"DirectionsRenderer",$,G)||this;return n.geolocation=o,n}return u(e,t),e.prototype.initialize=function(){this.objectOptions=this.optionBuilder.googlizeAllInputs(this.inputs,this),"string"==typeof this.objectOptions.panel&&(this.objectOptions.panel=document.querySelector(this.objectOptions.panel)),this.directionsService=new google.maps.DirectionsService,this.directionsRenderer=new google.maps.DirectionsRenderer(this.objectOptions),this.directionsRenderer.setMap(this.nguiMapComponent.map),this.showDirections(this.directionsRequest),this.nguiMap.setObjectEvents(this.outputs,this,"directionsRenderer"),this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName,this.mapObject),this.initialized$.emit(this.directionsRenderer)},e.prototype.ngOnChanges=function(t){var e={};for(var o in t)-1!==this.inputs.indexOf(o)&&(e[o]=this.optionBuilder.googlize(t[o].currentValue));t.directionsRequest&&this.directionsRenderer&&this.directionsService&&this.showDirections(this.directionsRequest)},e.prototype.showDirections=function(t){var e=this;this.directionsService.route(t,function(t,o){o===google.maps.DirectionsStatus.OK?e.directionsRenderer.setDirections(t):console.error("Directions request failed due to "+o)})},e.prototype.ngOnDestroy=function(){t.prototype.ngOnDestroy.call(this),this.nguiMap.clearObjectEvents(this.outputs,this,"directionsRenderer")},e}(l);S.decorators=[{type:e.Directive,args:[{selector:"ngui-map > directions-renderer",inputs:$,outputs:G}]}],S.ctorParameters=function(){return[{type:j},{type:h}]},S.propDecorators={directionsRequest:[{type:e.Input,args:["directions-request"]}]};var T=["options","circleOptions","drawingControl","drawingControlOptions","drawingMode","map","markerOptions","polygonOptions","polylineOptions","rectangleOptions"],W=["circlecomplete","markercomplete","overlaycomplete","polygoncomplete","polylinecomplete","rectanglecomplete"],Z=function(t){function e(e){var o=t.call(this,e,"DrawingManager",T,W)||this;return o.libraryName="drawing",o}return u(e,t),e}(l);Z.decorators=[{type:e.Directive,args:[{selector:"ngui-map > drawing-manager",inputs:T,outputs:W}]}],Z.ctorParameters=function(){return[{type:j}]};var q=["url","bounds","clickable","opacity"],B=["click","dblclick"],F=function(t){function e(e){var o=t.call(this,e,"GroundOverlay",q,B)||this;return o.objectOptions={},o}return u(e,t),e.prototype.initialize=function(){this.objectOptions=this.optionBuilder.googlizeAllInputs(["clickable","opacity"],this),this.mapObject=new google.maps.GroundOverlay(this.url,this.bounds,this.objectOptions),this.mapObject.setMap(this.nguiMapComponent.map),this.mapObject.mapObjectName=this.mapObjectName,this.nguiMap.setObjectEvents(this.outputs,this,"mapObject"),this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName,this.mapObject),this.initialized$.emit(this.mapObject)},e}(l);F.decorators=[{type:e.Directive,args:[{selector:"ngui-map > ground-overlay",inputs:q,outputs:B}]}],F.ctorParameters=function(){return[{type:j}]};var V=["data","dissipating","gradient","maxIntensity","opacity","radius","options"],U=[],J=function(t){function e(e){var o=t.call(this,e,"HeatmapLayer",V,U)||this;return o.libraryName="visualization",o}return u(e,t),e}(l);J.decorators=[{type:e.Directive,args:[{selector:"ngui-map > heatmap-layer",inputs:V,outputs:U}]}],J.ctorParameters=function(){return[{type:j}]};var K=["clickable","preserveViewport","screenOverlays","suppressInfoWindows","url","zIndex","options"],H=["click","defaultviewport_changed","status_changed"],Q=function(t){function e(e){return t.call(this,e,"KmlLayer",K,H)||this}return u(e,t),e}(l);Q.decorators=[{type:e.Directive,args:[{selector:"ngui-map > kml-layer",inputs:K,outputs:H}]}],Q.ctorParameters=function(){return[{type:j}]};var X=["anchorPoint","animation","clickable","cursor","draggable","icon","label","opacity","optimized","place","position","shape","title","visible","zIndex","options","geoFallbackPosition"],Y=["animationChanged","click","clickableChanged","cursorChanged","dblclick","drag","dragend","draggableChanged","dragstart","flatChanged","iconChanged","mousedown","mouseout","mouseover","mouseup","positionChanged","rightclick","shapeChanged","titleChanged","visibleChanged","zindexChanged"],tt=function(t){function e(e){var o=t.call(this,e,"Marker",X,Y)||this;return o.nguiMapComp=e,o.objectOptions={},o}return u(e,t),e.prototype.ngOnInit=function(){var t=this;this.nguiMapComponent.mapIdledOnce?this.initialize():this.nguiMapComponent.mapReady$.subscribe(function(e){return t.initialize()})},e.prototype.initialize=function(){t.prototype.initialize.call(this),this.setPosition()},e.prototype.setPosition=function(){var t=this;this.position?"string"==typeof this.position&&this._subscriptions.push(this.nguiMapComp.geoCoder.geocode({address:this.position}).subscribe(function(e){t.mapObject.setPosition(e[0].geometry.location)},function(e){console.error("ngui-map, error finding the location from",t.position),t.mapObject.setPosition(t.objectOptions.geoFallbackPosition||new google.maps.LatLng(0,0))})):this._subscriptions.push(this.nguiMapComp.geolocation.getCurrentPosition().subscribe(function(e){var o=new google.maps.LatLng(e.coords.latitude,e.coords.longitude);t.mapObject.setPosition(o)},function(e){console.error("ngui-map, error finding the current location"),t.mapObject.setPosition(t.objectOptions.geoFallbackPosition||new google.maps.LatLng(0,0))}))},e}(l);tt.decorators=[{type:e.Directive,args:[{selector:"ngui-map > marker",inputs:X,outputs:Y}]}],tt.ctorParameters=function(){return[{type:j}]};var et=function(){return function(t,o,n){var i=this;this.optionBuilder=t,this.elementRef=o,this.apiLoader=n,this.place_changed=new e.EventEmitter,this.initialized$=new e.EventEmitter,this.initialize=function(){i.objectOptions=i.optionBuilder.googlizeAllInputs(["bounds","componentRestrictions","types"],i),i.autocomplete=new google.maps.places.Autocomplete(i.elementRef.nativeElement,i.objectOptions),i.autocomplete.addListener("place_changed",function(t){i.place_changed.emit(i.autocomplete.getPlace())}),i.initialized$.emit(i.autocomplete)},n.load(),n.api$.subscribe(function(){return i.initialize()})}}();et.decorators=[{type:e.Directive,args:[{selector:"[places-auto-complete]"}]}],et.ctorParameters=function(){return[{type:g},{type:e.ElementRef},{type:m}]},et.propDecorators={bounds:[{type:e.Input,args:["bounds"]}],componentRestrictions:[{type:e.Input,args:["componentRestrictions"]}],types:[{type:e.Input,args:["types"]}],place_changed:[{type:e.Output,args:["place_changed"]}],initialized$:[{type:e.Output}]};var ot=["clickable","draggable","editable","fillColor","fillOpacity","geodesic","paths","strokeColor","strokeOpacity","strokePosition","strokeWeight","visible","zIndex","options"],nt=["click","dblclick","drag","dragend","dragstart","mousedown","mousemove","mouseout","mouseover","mouseup","rightclick"],it=function(t){function e(e){return t.call(this,e,"Polygon",ot,nt)||this}return u(e,t),e}(l);it.decorators=[{type:e.Directive,args:[{selector:"ngui-map>polygon, ngui-map>map-polygon",inputs:ot,outputs:nt}]}],it.ctorParameters=function(){return[{type:j}]};var rt=["clickable","draggable","editable","geodesic","icons","path","strokeColor","strokeOpacity","strokeWeight","visible","zIndex","options"],st=["click","dblclick","drag","dragend","dragstart","mousedown","mousemove","mouseout","mouseover","mouseup","rightclick"],at=function(t){function e(e){return t.call(this,e,"Polyline",rt,st)||this}return u(e,t),e}(l);at.decorators=[{type:e.Directive,args:[{selector:"ngui-map > polyline",inputs:rt,outputs:st}]}],at.ctorParameters=function(){return[{type:j}]};var pt=["selector","options","addressControl","addressControlOptions","clickToGo","disableDefaultUI","disableDoubleClickZoom","enableCloseButton","fullscreenControl","fullscreenControlOptions","imageDateControl","linksControl","motionTracking","motionTrackingControl","panControl","panControlOptions","pano","position","pov","scrollwheel","showRoadLabels","visible","zoomControl","zoomControlOptions"],ct=["closeclick","pano_changed","position_changed","pov_changed","resize","status_changed","visible_changed","zoom_changed"],ut=function(t){function e(e){return t.call(this,e,"StreetViewPanorama",pt,ct)||this}return u(e,t),e.prototype.initialize=function(){this.objectOptions=this.optionBuilder.googlizeAllInputs(this.inputs,this);var t;this.objectOptions.selector?(t=document.querySelector(this.selector),delete this.objectOptions.selector):t=this.nguiMapComponent.el,"string"==typeof this.objectOptions.position&&delete this.objectOptions.position,this.mapObject=new google.maps[this.mapObjectName](t,this.objectOptions),this.mapObject.mapObjectName=this.mapObjectName,this.mapObject.nguiMapComponent=this.nguiMapComponent,this.nguiMap.setObjectEvents(this.outputs,this,"mapObject"),this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName,this.mapObject),this.initialized$.emit(this.mapObject)},e.prototype.ngOnDestroy=function(){this.nguiMapComponent.el&&this.nguiMap.clearObjectEvents(this.outputs,this,"mapObject")},e}(l);ut.decorators=[{type:e.Directive,args:[{selector:"ngui-map > street-view-panorama",inputs:pt,outputs:ct}]}],ut.ctorParameters=function(){return[{type:j}]};var lt=["autoRefresh","options"],gt=[],ht=function(t){function e(e){return t.call(this,e,"TrafficLayer",lt,gt)||this}return u(e,t),e}(l);ht.decorators=[{type:e.Directive,args:[{selector:"ngui-map > traffic-layer",inputs:lt,outputs:gt}]}],ht.ctorParameters=function(){return[{type:j}]};var dt=[],mt=[],ft=function(t){function e(e){return t.call(this,e,"TransitLayer",dt,mt)||this}return u(e,t),e}(l);ft.decorators=[{type:e.Directive,args:[{selector:"ngui-map > transit-layer",inputs:dt,outputs:mt}]}],ft.ctorParameters=function(){return[{type:j}]};var yt=[j,E,tt,R,L,it,E,at,F,ft,ht,J,z,Q,N,ut,et,S,Z],bt=function(){function t(){}return t.forRoot=function(e){return void 0===e&&(e={}),{ngModule:t,providers:[{provide:d,useValue:e}]}},t}();bt.decorators=[{type:e.NgModule,args:[{imports:[a.CommonModule],declarations:yt,exports:[yt],providers:[b,h,O,g,{provide:m,useClass:f}]}]}],bt.ctorParameters=function(){return[]},t.BicyclingLayer=z,t.NavigatorGeolocation=h,t.OptionBuilder=g,t.NG_MAP_CONFIG_TOKEN=d,t.NgMapApiLoader=m,t.NgMapAsyncApiLoader=y,t.NgMapAsyncCallbackApiLoader=f,t.NguiMapComponent=j,t.InfoWindow=E,t.CustomMarker=L,t.Circle=R,t.DataLayer=N,t.DirectionsRenderer=S,t.DrawingManager=Z,t.GeoCoder=b,t.GroundOverlay=F,t.HeatmapLayer=J,t.KmlLayer=Q,t.Marker=tt,t.NguiMap=O,t.PlacesAutoComplete=et,t.Polygon=it,t.Polyline=at,t.StreetViewPanorama=ut,t.TrafficLayer=ht,t.TransitLayer=ft,t.NguiMapModule=bt,t.ɵa=l,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=map.umd.min.js.map
