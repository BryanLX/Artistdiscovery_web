{"version":3,"sources":["../tmp/services/option-builder.ts"],"names":[],"mappings":"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","file":"option-builder.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { getJSON, IJson } from './util';\n/**\n * change any object to google object options\n * e.g. [1,2] -> new google.maps.LatLng(1,2);\n */\nexport class OptionBuilder {\n/**\n * @param {?} definedInputs\n * @param {?} userInputs\n * @return {?}\n */\ngooglizeAllInputs(definedInputs: string[], userInputs: any) {\n    let /** @type {?} */ options: any = {};\n\n    // if options given from user, only take options and ignore other inputs\n    if (userInputs.options) {\n      console.log('userInputs.options .................', userInputs.options);\n      options = userInputs.options;\n      if (!this.onlyOptionsGiven(definedInputs, userInputs)) {\n        console.error('when \"options\" are used, other options are ignored');\n      }\n    } else { // if options not given, process all user inputs\n      definedInputs.forEach(input => {\n        if (userInputs[input] !== undefined)  {\n          options[input] = this.googlize(userInputs[input], {key: input});\n        }\n      });\n    }\n    return options;\n  }\n/**\n * @param {?} inputs\n * @param {?=} options\n * @return {?}\n */\ngooglizeMultiple(inputs: any[], options?: IJson): any {\n    options =  options || {};\n    for (let /** @type {?} */ key in inputs) {\n      let /** @type {?} */ val = inputs[key];\n      // (non-strings are fully converted)\n      if (typeof val !== 'string') {\n        options[key] = val;\n      } // sometimes '0' needed to stay as it is\n      else if (!(options['doNotConverStringToNumber'] && val.match(/^[0-9]+$/))) {\n        options[key] = this.googlize(val, {key: key});\n      }\n    } // for(var key in attrs)\n    return options;\n  }\n/**\n * @param {?} input\n * @param {?=} options\n * @return {?}\n */\ngooglize(input: any, options?: IJson): any {\n    options = options || {};\n    let /** @type {?} */ output: any = input;\n    if (typeof input === 'string') { // convert string to a google object\n      if (input === 'false') {\n        output = false;\n      } else if (input === '0') {\n        output = 0;\n      } else {\n        output =\n          // -> googlize -> getJsonParsed -> googlizeMultiple -> googlize until all elements are parsed\n          this.getJSONParsed(input, options)\n\n          /* Foo.Bar(...) -> new google.maps.Foo.Bar(...) */\n          || this.getAnyMapObject(input)\n\n          /*  MapTypeID.HYBRID -> new google.maps.MapTypeID.HYBRID */\n          || this.getAnyMapConstant(input, options)\n\n          /*  2016-06-20 -> new Date('2016-06-20') */\n          || this.getDateObject(input)\n\n          || input;\n      }\n    }\n\n    if (options['key']) {\n      let /** @type {?} */ key: string = /** @type {?} */(( <string>options['key']));\n      if (output instanceof Array) { // e.g., [1, 2]\n        if (key === 'bounds') {\n          output = new google.maps.LatLngBounds(output[0], output[1]);\n        } else if (key === 'icons') {\n          output = this.getMapIcons(output);\n        } else if (key === 'position' || key.match(/^geoFallback/) ) {\n          output = this.getLatLng(output);\n        }\n      } else if (output instanceof Object) {\n        if (key === 'icon') {\n          output = this.getMarkerIcon(output);\n        }\n        else if (key.match(/ControlOptions$/)) {\n          output = this.getMapControlOption(output);\n        }\n      }\n    }\n\n    // delete keys only for processing, not used by google\n    delete output['doNotConverStringToNumber'];\n    delete output['key'];\n\n    return output;\n  }\n/**\n * @param {?} input\n * @return {?}\n */\nprivate getLatLng(input: any): google.maps.LatLng | Array<google.maps.LatLng> {\n    let /** @type {?} */ output: google.maps.LatLng | Array<google.maps.LatLng>;\n    if (input[0].constructor === Array) { // [[1,2],[3,4]]\n      output = ( /** @type {?} */((<any[]>input))).map((el: number[]) => new google.maps.LatLng(el[0], el[1]));\n    } else if (!isNaN(parseFloat(input[0])) && isFinite(input[0])) {\n      output = new google.maps.LatLng(input[0], input[1]);\n    }\n    return output;\n  }\n/**\n * @param {?} input\n * @param {?} options\n * @return {?}\n */\nprivate getJSONParsed(input: any, options: IJson): IJson {\n    let /** @type {?} */ output: any;\n    try {\n      output = getJSON(input);\n      if (output instanceof Array) {\n        // [{a:1}] : not lat/lng ones\n\n        if (output[0].constructor !== Object) { // [[1,2],[3,4]] or [1,2]\n          output = this.getLatLng(output);\n        }\n      }\n      // JSON is an object (not array or null)\n      else if (output === Object(output)) {\n        // check for nested hashes and convert to Google API options\n        let /** @type {?} */ newOptions = options;\n        newOptions['doNotConverStringToNumber'] = true;\n        output = this.googlizeMultiple(output, newOptions);\n      }\n    } catch ( /** @type {?} */e) {\n    }\n    return output;\n  }\n/**\n * @param {?} input\n * @return {?}\n */\nprivate getAnyMapObject(input: string): any {\n    let /** @type {?} */ output: any;\n    if (input.match(/^[A-Z][a-zA-Z0-9]+\\(.*\\)$/)) {\n      try {\n        output = Function(`return new google.maps.${input};`)();\n      } catch ( /** @type {?} */e) {}\n    }\n    return output;\n  }\n/**\n * @param {?} input\n * @param {?} options\n * @return {?}\n */\nprivate getAnyMapConstant(input: string, options: IJson): any {\n    let /** @type {?} */ output: any;\n\n    if (input.match(/^([A-Z][a-zA-Z0-9]+)\\.([A-Z]+)$/)) { // e.g. MapTypeID.HYBRID\n      try {\n        let /** @type {?} */ matches = input.match(/^([A-Z][a-zA-Z0-9]+)\\.([A-Z]+)$/);\n        output = google.maps[matches[1]][matches[2]];\n      } catch ( /** @type {?} */e) {}\n    } else if (input.match(/^[A-Z]+$/)) { // e.g. HYBRID\n      try {\n        let /** @type {?} */ capitalizedKey = ( /** @type {?} */((<string>options['key']))).charAt(0).toUpperCase() +\n          ( /** @type {?} */((<string>options['key']))).slice(1);\n        output = google.maps[capitalizedKey][input];\n      } catch ( /** @type {?} */e) {}\n    }\n    return output;\n  }\n/**\n * streetviewControl, panControl, etc, not a general control\n * @param {?} controlOptions\n * @return {?}\n */\nprivate getMapControlOption(controlOptions: IJson): IJson {\n    let /** @type {?} */ newControlOptions: IJson = controlOptions;\n\n    for (let /** @type {?} */ key in newControlOptions) { // assign the right values\n      if (newControlOptions[key]) {\n        let /** @type {?} */ value = newControlOptions[key];\n\n        if (typeof value === 'string') {\n          value = ( /** @type {?} */((<string>value))).toUpperCase();\n        }\n        else if (key === 'mapTypeIds') {\n          value = ( /** @type {?} */((<any[]>value))).map(function (str) {\n            if (str.match(/^[A-Z]+$/)) { // if constant\n              return google.maps.MapTypeId[str.toUpperCase()];\n            } else { // else, custom map-type\n              return str;\n            }\n          });\n        }\n\n        if (key === 'style') {\n          let /** @type {?} */ objName = key.replace(/Options$/, '') + 'Style';\n          newControlOptions[key] = google.maps[objName][ /** @type {?} */((<any>value))];\n        }\n        else if (key === 'position') {\n          newControlOptions[key] = google.maps.ControlPosition[ /** @type {?} */((<any>value))];\n        }\n        else {\n          newControlOptions[key] = value;\n        }\n      }\n    }\n\n    return newControlOptions;\n  }\n/**\n * @param {?} input\n * @return {?}\n */\nprivate getDateObject(input: string): Date {\n    let /** @type {?} */ output: Date;\n\n    if (input.match(/^(\\d{4}\\-\\d\\d\\-\\d\\d([tT][\\d:\\.]*)?)([zZ]|([+\\-])(\\d\\d):?(\\d\\d))?$/)) {\n      try {\n        output = new Date(input);\n      } catch ( /** @type {?} */e) {}\n    }\n    return output;\n  }\n/**\n * @param {?} input\n * @return {?}\n */\nprivate getMapIcons(input: any[]): any[] {\n    return input.map(el => {\n      if (el.icon.path.match(/^[A-Z_]+$/)) {\n        el.icon.path = google.maps.SymbolPath[el.icon.path];\n      }\n      return el;\n    });\n  }\n/**\n * @param {?} input\n * @return {?}\n */\nprivate getMarkerIcon(input: any): any {\n    let /** @type {?} */ output = input;\n\n    if (('' + output.path).match(/^[A-Z_]+$/)) {\n      output.path = google.maps.SymbolPath[output.path];\n    }\n\n    for (let /** @type {?} */ key in output) {\n      let /** @type {?} */ arr = output[key];\n      if (key === 'anchor' || key === 'origin' || key === 'labelOrigin') {\n        output[key] = new google.maps.Point(arr[0], arr[1]);\n    } else if (key === 'size' || key === 'scaledSize') {\n        output[key] = new google.maps.Size(arr[0], arr[1]);\n      }\n    }\n\n    return output;\n  }\n/**\n * @param {?} definedInputs\n * @param {?} userInputs\n * @return {?}\n */\nprivate onlyOptionsGiven(definedInputs: string[], userInputs: any): boolean {\n    for (let /** @type {?} */ i = 0; i < definedInputs.length; i++) {\n      let /** @type {?} */ input = definedInputs[i];\n      if (input !== 'options' && typeof userInputs[input] !== 'undefined') {\n        return false;\n      }\n    }\n    return true;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OptionBuilder_tsickle_Closure_declarations() {\n/** @type {?} */\nOptionBuilder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOptionBuilder.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}