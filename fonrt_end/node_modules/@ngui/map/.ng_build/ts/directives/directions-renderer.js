import { Input, Directive } from '@angular/core';
import { BaseMapDirective } from './base-map-directive';
import { NguiMapComponent } from '../components/ngui-map.component';
import { NavigatorGeolocation } from '../services/navigator-geolocation';
const /** @type {?} */ INPUTS = [
    'directions', 'draggable', 'hideRouteList', 'infoWindow', 'panel', 'markerOptions',
    'polylineOptions', 'preserveViewport', 'routeIndex', 'suppressBicyclingLayer',
    'suppressInfoWindows', 'suppressMarkers', 'suppressPolylines'
];
const /** @type {?} */ OUTPUTS = ['directions_changed'];
export class DirectionsRenderer extends BaseMapDirective {
    /**
     * @param {?} nguiMapComponent
     * @param {?} geolocation
     */
    constructor(nguiMapComponent, geolocation) {
        super(nguiMapComponent, 'DirectionsRenderer', INPUTS, OUTPUTS);
        this.geolocation = geolocation;
    }
    /**
     * @return {?}
     */
    initialize() {
        this.objectOptions = this.optionBuilder.googlizeAllInputs(this.inputs, this);
        if (typeof this.objectOptions['panel'] === 'string') {
            this.objectOptions['panel'] = document.querySelector(this.objectOptions['panel']);
        }
        this.directionsService = new google.maps.DirectionsService();
        this.directionsRenderer = new google.maps.DirectionsRenderer(this.objectOptions);
        this.directionsRenderer.setMap(this.nguiMapComponent.map);
        // set google events listeners and emidirectionsRenderer to this outputs listeners
        this.showDirections(this.directionsRequest);
        this.nguiMap.setObjectEvents(this.outputs, this, 'directionsRenderer');
        this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName, this.mapObject);
        this.initialized$.emit(this.directionsRenderer);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        let /** @type {?} */ newOptions = {};
        for (let /** @type {?} */ key in changes) {
            if (this.inputs.indexOf(key) !== -1) {
                newOptions[key] = this.optionBuilder.googlize(changes[key].currentValue);
            }
        }
        if (changes['directionsRequest'] && this.directionsRenderer) {
            this.directionsService && this.showDirections(this.directionsRequest);
        }
    }
    /**
     * @param {?} directionsRequest
     * @return {?}
     */
    showDirections(directionsRequest) {
        this.directionsService.route(directionsRequest, (response, status) => {
            if (status === google.maps.DirectionsStatus.OK) {
                this.directionsRenderer.setDirections(response);
            }
            else {
                console.error('Directions request failed due to ' + status);
            }
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        super.ngOnDestroy();
        this.nguiMap.clearObjectEvents(this.outputs, this, 'directionsRenderer');
    }
}
DirectionsRenderer.decorators = [
    { type: Directive, args: [{
                selector: 'ngui-map > directions-renderer',
                inputs: INPUTS,
                outputs: OUTPUTS,
            },] },
];
/**
 * @nocollapse
 */
DirectionsRenderer.ctorParameters = () => [
    { type: NguiMapComponent, },
    { type: NavigatorGeolocation, },
];
DirectionsRenderer.propDecorators = {
    'directionsRequest': [{ type: Input, args: ['directions-request',] },],
};
function DirectionsRenderer_tsickle_Closure_declarations() {
    /** @type {?} */
    DirectionsRenderer.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    DirectionsRenderer.ctorParameters;
    /** @type {?} */
    DirectionsRenderer.propDecorators;
    /** @type {?} */
    DirectionsRenderer.prototype.directions;
    /** @type {?} */
    DirectionsRenderer.prototype.draggable;
    /** @type {?} */
    DirectionsRenderer.prototype.hideRouteList;
    /** @type {?} */
    DirectionsRenderer.prototype.infoWindow;
    /** @type {?} */
    DirectionsRenderer.prototype.panel;
    /** @type {?} */
    DirectionsRenderer.prototype.markerOptions;
    /** @type {?} */
    DirectionsRenderer.prototype.polylineOptions;
    /** @type {?} */
    DirectionsRenderer.prototype.preserveViewport;
    /** @type {?} */
    DirectionsRenderer.prototype.routeIndex;
    /** @type {?} */
    DirectionsRenderer.prototype.suppressBicyclingLayer;
    /** @type {?} */
    DirectionsRenderer.prototype.suppressInfoWindows;
    /** @type {?} */
    DirectionsRenderer.prototype.suppressMarkers;
    /** @type {?} */
    DirectionsRenderer.prototype.suppressPolylines;
    /** @type {?} */
    DirectionsRenderer.prototype.directions_changed;
    /** @type {?} */
    DirectionsRenderer.prototype.directionsRequest;
    /** @type {?} */
    DirectionsRenderer.prototype.directionsService;
    /** @type {?} */
    DirectionsRenderer.prototype.directionsRenderer;
    /** @type {?} */
    DirectionsRenderer.prototype.geolocation;
}
//# sourceMappingURL=directions-renderer.js.map