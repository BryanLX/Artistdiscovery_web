import { Input, Output, Directive, EventEmitter, ElementRef, } from '@angular/core';
import { NgMapApiLoader } from '../services/api-loader';
import { OptionBuilder } from '../services/option-builder';
export class PlacesAutoComplete {
    /**
     * @param {?} optionBuilder
     * @param {?} elementRef
     * @param {?} apiLoader
     */
    constructor(optionBuilder, elementRef, apiLoader) {
        this.optionBuilder = optionBuilder;
        this.elementRef = elementRef;
        this.apiLoader = apiLoader;
        this.place_changed = new EventEmitter();
        this.initialized$ = new EventEmitter();
        // only called when map is ready
        this.initialize = () => {
            this.objectOptions =
                this.optionBuilder.googlizeAllInputs(['bounds', 'componentRestrictions', 'types'], this);
            this.autocomplete = new google.maps.places.Autocomplete(this.elementRef.nativeElement, this.objectOptions);
            this.autocomplete.addListener('place_changed', place => {
                this.place_changed.emit(this.autocomplete.getPlace());
            });
            this.initialized$.emit(this.autocomplete);
        };
        apiLoader.load();
        apiLoader.api$.subscribe(() => this.initialize());
    }
}
PlacesAutoComplete.decorators = [
    { type: Directive, args: [{
                selector: '[places-auto-complete]'
            },] },
];
/**
 * @nocollapse
 */
PlacesAutoComplete.ctorParameters = () => [
    { type: OptionBuilder, },
    { type: ElementRef, },
    { type: NgMapApiLoader, },
];
PlacesAutoComplete.propDecorators = {
    'bounds': [{ type: Input, args: ['bounds',] },],
    'componentRestrictions': [{ type: Input, args: ['componentRestrictions',] },],
    'types': [{ type: Input, args: ['types',] },],
    'place_changed': [{ type: Output, args: ['place_changed',] },],
    'initialized$': [{ type: Output },],
};
function PlacesAutoComplete_tsickle_Closure_declarations() {
    /** @type {?} */
    PlacesAutoComplete.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    PlacesAutoComplete.ctorParameters;
    /** @type {?} */
    PlacesAutoComplete.propDecorators;
    /** @type {?} */
    PlacesAutoComplete.prototype.bounds;
    /** @type {?} */
    PlacesAutoComplete.prototype.componentRestrictions;
    /** @type {?} */
    PlacesAutoComplete.prototype.types;
    /** @type {?} */
    PlacesAutoComplete.prototype.place_changed;
    /** @type {?} */
    PlacesAutoComplete.prototype.initialized$;
    /** @type {?} */
    PlacesAutoComplete.prototype.objectOptions;
    /** @type {?} */
    PlacesAutoComplete.prototype.autocomplete;
    /** @type {?} */
    PlacesAutoComplete.prototype.initialize;
    /** @type {?} */
    PlacesAutoComplete.prototype.optionBuilder;
    /** @type {?} */
    PlacesAutoComplete.prototype.elementRef;
    /** @type {?} */
    PlacesAutoComplete.prototype.apiLoader;
}
//# sourceMappingURL=places-auto-complete.js.map