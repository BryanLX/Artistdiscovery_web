{"version":3,"sources":["../tmp/services/ngui-map.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAA2B,MAAA,EAAO,MAAA,eAAA,CAAA;AAC3C,OAAO,EAAE,aAAA,EAAc,MAAA,kBAAA,CAAA;AACvB,OAAO,EAAE,QAAA,EAAS,MAAA,aAAA,CAAA;AAClB;;GAEG;AACH,MAEC;IADD;;;;OAIG;IACH,YADY,QAAU,EACV,aAAe,EACf,IAAM;QAFN,aAAA,GAAA,QAAA,CAAU;QACV,kBAAA,GAAA,aAAA,CAAe;QACf,SAAA,GAAA,IAAA,CAAM;QAwDhB,uBAAkB,GAZG,CAAA,MAAS,EAAK,OAAS,EAAe,EAAA;YAazD,IAAI,gBAAgB,CAZhB,GAAK,EAAI,gBAAA,CAAC,YAAc,EAAI,gBAAA,CAAC,aAAe,CAAO;YAavD,EAAE,CAAC,CAAC,MAZC,CAAM,CAAC,CAAA;gBAaV,GAAG,CAAC,CAAC,IAZC,gBAAA,CAAG,GAAA,IAAO,OAAA,CAAQ,CAAC,CAAA;oBAavB,aAAa,GAZG,MAAA,GAAO,CAAG,OAAC,CAAO,QAAC,EAAS,CAAA,CAAE,EAAA,CAAG,CAAA,CAAE,WAAC,EAAW,CAAG,EAAA,CAAG;oBAarE,YAAY,GAZG,OAAA,CAAQ,GAAC,CAAG,CAAC,YAAC,CAAY;oBAazC,EAAE,CAAC,CAAC,CAZC,UAAC,EAAW,QAAA,CAAS,CAAC,OAAC,CAAO,GAAC,CAAG,KAAK,CAAA,CAAE,IAAI,OAAO,YAAA,KAAiB,QAAA,CAAS,CAAC,CAAA;wBAalF,yFAAyF;wBACzF,CAAC,CAZC,aAAC,EAAc,EAAA;4BAaf,IAAI,CAZC,QAAC,CAAQ,OAAC,CAAO,EAAC,OAAC,EAAQ,YAAA,EAAa,CAAC,CAAC,SAAC,CAAS,OAAC,CAAO,EAAA;gCAa/D,EAAE,CAAC,CAAC,OAZO,MAAA,CAAO,aAAC,CAAa,KAAK,UAAA,CAAW,CAAC,CAAA;oCAa/C,MAAM,CAZC,aAAC,CAAa,CAAC,OAAC,CAAO,CAAC,CAAC,CAAC,QAAC,CAAQ,QAAC,CAAQ,CAAC;gCAatD,CAAC;gCAZC,IAAA,CAAK,CAAA;oCAaL,OAAO,CAZC,KAAC,CAaP,6FAA6F;wCAC7F,2EAA2E,CAC5E,CAZC;gCAaJ,CAAC;4BACH,CAAC,CAZC,CAAC;wBAaL,CAAC,CAZC,CAAC,aAAC,CAAa,CAAC;oBAapB,CAAC;oBAZC,IAAA,CAAK,CAAA;wBAaL,GAAG,GAZG,IAAA,CAAM,aAAC,CAAa,QAAC,CAAQ,YAAC,CAAY,CAAC;wBAajD,EAAE,CAAC,CAAC,OAZO,MAAA,CAAO,aAAC,CAAa,KAAK,UAAA,CAAW,CAAC,CAAA;4BAa/C,MAAM,CAZC,aAAC,CAAa,CAAC,GAAC,CAAG,CAAC;wBAa7B,CAAC;wBAZC,IAAA,CAAK,CAAA;4BAaL,OAAO,CAZC,KAAC,CAaP,6FAA6F;gCAC7F,2EAA2E,CAC5E,CAZC;wBAaJ,CAAC;oBACH,CAAC;gBARP,CAAA;YAUE,CAAC;QACH,CAAC,CAAA;IAtFE,CAAC;IACN;;;;;OAKG;IACH,eAPG,CAAA,aAAA,EAAA,OAAA,EAAA,MAAA;QAQC,aAAa,CAPC,OAAC,CAAO,YAAC,CAAY,EAAA;YAQjC,IAAI,gBAAgB,CAPhB,SAAA,GAAY,YAAA;iBAQb,OAPC,CAAO,UAAC,EAAW,CAAA,EAAE,EAAG,EAAA,CAAG,IAAA,EAAK,CAAE,WAAC,EAAW,EAAE,CAAE,CAAC,sCAAA;iBAQpD,OAPC,CAAO,OAAC,EAAQ,EAAA,CAAG,CAAC,CAAC,6CAAA;YASzB,IAAI,gBAAgB,CAPhB,IAAA,GAAO,IAAA,CAAK,IAAC,CAAI;YAQrB,IAAI,CAPC,iBAAC,CAAiB,GAAG,EAAA;gBAQxB,OAAO,CAPC,MAAC,CAAM,CAAC,WAAC,CAAW,SAAC,EAAU,UAAA,KAA6B;oBAQlE,IAAI,gBAAgB,CAPhB,KAAA,GAAa,KAAA,CAAM,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,EAAA,CAAG;oBAQpC,KAAK,CAPC,MAAC,GAAQ,IAAA,CAAK;oBAQpB,IAAI,CAPC,GAAC,CAAG,GAAG,EAAA,CAAG,OAAA,CAAQ,YAAC,CAAY,CAAC,IAAC,CAAI,KAAC,CAAK,CAAC,CAAC;gBAQpD,CAAC,CAPC,CAAC;YAQL,CAAC,CAPC,CAAC;QAQL,CAAC,CAPC,CAAC;IAQL,CAAC;IACH;;;;;OAKG;IACH,iBAZG,CAAA,aAAA,EAAA,OAAA,EAAA,MAAA;QAaC,aAAa,CAZC,OAAC,CAAO,YAAC,CAAY,EAAA;YAajC,IAAI,gBAAgB,CAZhB,SAAA,GAAY,YAAA;iBAab,OAZC,CAAO,UAAC,EAAW,CAAA,EAAE,EAAG,EAAA,CAAG,IAAA,EAAK,CAAE,WAAC,EAAW,EAAE,CAAE,CAAC,sCAAA;iBAapD,OAZC,CAAO,OAAC,EAAQ,EAAA,CAAG,CAAC,CAAC,6CAAA;YAczB,IAAI,CAZC,IAAC,CAAI,iBAAC,CAAiB,GAAG,EAAA;gBAa7B,EAAE,CAAC,CAAC,OAZC,CAAO,MAAC,CAAM,CAAC,CAAC,CAAA;oBAanB,MAAM,CAZC,IAAC,CAAI,KAAC,CAAK,cAAC,CAAc,OAAC,CAAO,MAAC,CAAM,EAAE,SAAA,CAAU,CAAC;gBAa/D,CAAC;YACH,CAAC,CAZC,CAAC;QAaL,CAAC,CAZC,CAAC;QAcH,EAAE,CAAC,CAAC,OAZC,CAAO,MAAC,CAAM,CAAC,CAAC,CAAA;YAanB,EAAE,CAAC,CAAC,OAZC,CAAO,MAAC,CAAM,CAAC,MAAC,CAAM,CAAC,CAAA;gBAa1B,OAAO,CAZC,MAAC,CAAM,CAAC,MAAC,CAAM,IAAC,CAAI,CAAC;YAa/B,CAAC;YAED,OAZO,OAAA,CAAQ,MAAC,CAAM,CAAC,gBAAC,CAAgB;YAaxC,OAZO,OAAA,CAAQ,MAAC,CAAM,CAAC;QAazB,CAAC;IAEH,CAAC;;AAwBI,kBAAA,GAAoC;IAa3C,EAZE,IAAA,EAAM,UAAA,EAAW;CAalB,CAZC;AAaF;;GAEG;AAbF,sBAAA,GAAA,GAAA,EAAA,CAAA;IAeD,EAAC,IAAI,EAAE,QAAQ,GAAG;IAClB,EAAC,IAAI,EAAE,aAAa,GAAG;IACvB,EAAC,IAAI,EAAE,MAAM,GAAG;CACf,CAAC;AAGF;IACA,gBAAgB;IAChB,OAAO,CAAC,UAAU,CAAC;IACnB;;;OAGG;IACH,OAAO,CAAC,cAAc,CAAC;IACvB,gBAAgB;IAChB,OAAO,CAAC,SAAS,CAAC,kBAAkB,CAAC;IACrC,gBAAgB;IAChB,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC;IAC3B,gBAAgB;IAChB,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC;IAChC,gBAAgB;IAChB,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC;AACvB,CAAC","file":"ngui-map.js","sourceRoot":"","sourcesContent":["import { Injectable, SimpleChanges, NgZone } from '@angular/core';\nimport { OptionBuilder } from './option-builder';\nimport { GeoCoder } from './geo-coder';\n/**\n * collection of map instance-related properties and methods\n */\nexport class NguiMap {\n/**\n * @param {?} geoCoder\n * @param {?} optionBuilder\n * @param {?} zone\n */\nconstructor(\nprivate geoCoder: GeoCoder,\nprivate optionBuilder: OptionBuilder,\nprivate zone: NgZone,\n  ) {}\n/**\n * @param {?} definedEvents\n * @param {?} thisObj\n * @param {?} prefix\n * @return {?}\n */\nsetObjectEvents(definedEvents: string[], thisObj: any, prefix: string) {\n    definedEvents.forEach(definedEvent => {\n      let /** @type {?} */ eventName = definedEvent\n        .replace(/([A-Z])/g, ($1) => `_${$1.toLowerCase()}`) // positionChanged -> position_changed\n        .replace(/^map_/, '');                               // map_click -> click  to avoid DOM conflicts\n\n      let /** @type {?} */ zone = this.zone;\n      zone.runOutsideAngular(() => {\n        thisObj[prefix].addListener(eventName, function(event: google.maps.event) {\n          let /** @type {?} */ param: any = event ? event : {};\n          param.target = this;\n          zone.run(() => thisObj[definedEvent].emit(param));\n        });\n      });\n    });\n  }\n/**\n * @param {?} definedEvents\n * @param {?} thisObj\n * @param {?} prefix\n * @return {?}\n */\nclearObjectEvents(definedEvents: string[], thisObj: any, prefix: string) {\n    definedEvents.forEach(definedEvent => {\n      let /** @type {?} */ eventName = definedEvent\n        .replace(/([A-Z])/g, ($1) => `_${$1.toLowerCase()}`) // positionChanged -> position_changed\n        .replace(/^map_/, '');                               // map_click -> click  to avoid DOM conflicts\n\n      this.zone.runOutsideAngular(() => {\n        if (thisObj[prefix]) {\n          google.maps.event.clearListeners(thisObj[prefix], eventName);\n        }\n      });\n    });\n\n    if (thisObj[prefix]) {\n      if (thisObj[prefix].setMap) {\n        thisObj[prefix].setMap(null);\n      }\n\n      delete thisObj[prefix].nguiMapComponent;\n      delete thisObj[prefix];\n    }\n\n  }\n\n  updateGoogleObject = (object: any, changes: SimpleChanges)  => {\n    let /** @type {?} */ val: any, /** @type {?} */ currentValue: any, /** @type {?} */ setMethodName: string;\n    if (object) {\n      for (let /** @type {?} */ key in changes) {\n        setMethodName = `set${key.replace(/^[a-z]/, x => x.toUpperCase()) }`;\n        currentValue = changes[key].currentValue;\n        if (['position', 'center'].indexOf(key) !== -1 && typeof currentValue === 'string') {\n          // To preserve setMethod name in Observable callback, wrap it as a function, then execute\n          ((setMethodName) => {\n            this.geoCoder.geocode({address: currentValue}).subscribe(results => {\n              if (typeof object[setMethodName] === 'function') {\n                object[setMethodName](results[0].geometry.location);\n              } else {\n                console.error(\n                  'Not all options are dynamically updatable according to Googles Maps API V3 documentation.\\n' +\n                  'Please check Google Maps API documentation, and use \"setOptions\" instead.'\n                );\n              }\n            });\n          })(setMethodName);\n        } else {\n          val =  this.optionBuilder.googlize(currentValue);\n          if (typeof object[setMethodName] === 'function') {\n            object[setMethodName](val);\n          } else {\n            console.error(\n              'Not all options are dynamically updatable according to Googles Maps API V3 documentation.\\n' +\n              'Please check Google Maps API documentation, and use \"setOptions\" instead.'\n            );\n          }\n        }\n      }\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: GeoCoder, },\n{type: OptionBuilder, },\n{type: NgZone, },\n];\n}\n\nfunction NguiMap_tsickle_Closure_declarations() {\n/** @type {?} */\nNguiMap.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNguiMap.ctorParameters;\n/** @type {?} */\nNguiMap.prototype.updateGoogleObject;\n/** @type {?} */\nNguiMap.prototype.geoCoder;\n/** @type {?} */\nNguiMap.prototype.optionBuilder;\n/** @type {?} */\nNguiMap.prototype.zone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}