import { Component, ElementRef, ViewEncapsulation, EventEmitter, Output, NgZone } from '@angular/core';
import { OptionBuilder } from '../services/option-builder';
import { NavigatorGeolocation } from '../services/navigator-geolocation';
import { GeoCoder } from '../services/geo-coder';
import { NguiMap } from '../services/ngui-map';
import { NgMapApiLoader } from '../services/api-loader';
import { Subject } from 'rxjs/Subject';
import { debounceTime } from 'rxjs/operator/debounceTime';
import { toCamelCase } from '../services/util';
const /** @type {?} */ INPUTS = [
    'backgroundColor', 'center', 'disableDefaultUI', 'disableDoubleClickZoom', 'draggable', 'draggableCursor',
    'draggingCursor', 'heading', 'keyboardShortcuts', 'mapMaker', 'mapTypeControl', 'mapTypeId', 'maxZoom', 'minZoom',
    'noClear', 'overviewMapControl', 'panControl', 'panControlOptions', 'rotateControl', 'scaleControl', 'scrollwheel',
    'streetView', 'styles', 'tilt', 'zoom', 'streetViewControl', 'zoomControl', 'zoomControlOptions', 'mapTypeControlOptions',
    'overviewMapControlOptions', 'rotateControlOptions', 'scaleControlOptions', 'streetViewControlOptions', 'fullscreenControl', 'fullscreenControlOptions',
    'options',
    // ngui-map-specific inputs
    'geoFallbackCenter'
];
const /** @type {?} */ OUTPUTS = [
    'bounds_changed', 'center_changed', 'click', 'dblclick', 'drag', 'dragend', 'dragstart', 'heading_changed', 'idle',
    'typeid_changed', 'mousemove', 'mouseout', 'mouseover', 'projection_changed', 'resize', 'rightclick',
    'tilesloaded', 'tile_changed', 'zoom_changed',
    // to avoid DOM event conflicts
    'mapClick', 'mapMouseover', 'mapMouseout', 'mapMousemove', 'mapDrag', 'mapDragend', 'mapDragstart'
];
export class NguiMapComponent {
    /**
     * @param {?} optionBuilder
     * @param {?} elementRef
     * @param {?} geolocation
     * @param {?} geoCoder
     * @param {?} nguiMap
     * @param {?} apiLoader
     * @param {?} zone
     */
    constructor(optionBuilder, elementRef, geolocation, geoCoder, nguiMap, apiLoader, zone) {
        this.optionBuilder = optionBuilder;
        this.elementRef = elementRef;
        this.geolocation = geolocation;
        this.geoCoder = geoCoder;
        this.nguiMap = nguiMap;
        this.apiLoader = apiLoader;
        this.zone = zone;
        this.mapReady$ = new EventEmitter();
        this.mapOptions = {};
        this.inputChanges$ = new Subject();
        this.infoWindows = {};
        this.mapIdledOnce = false;
        this.initializeMapAfterDisplayed = false;
        apiLoader.load();
        // all outputs needs to be initialized,
        // http://stackoverflow.com/questions/37765519/angular2-directive-cannot-read-property-subscribe-of-undefined-with-outputs
        OUTPUTS.forEach(output => this[output] = new EventEmitter());
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.apiLoaderSub = this.apiLoader.api$.subscribe(() => this.initializeMap());
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        if (this.initializeMapAfterDisplayed && this.el && this.el.offsetWidth > 0) {
            this.initializeMap();
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.inputChanges$.next(changes);
    }
    /**
     * @return {?}
     */
    initializeMap() {
        this.el = this.elementRef.nativeElement.querySelector('.google-map');
        if (this.el && this.el.offsetWidth === 0) {
            this.initializeMapAfterDisplayed = true;
            return;
        }
        this.initializeMapAfterDisplayed = false;
        this.mapOptions = this.optionBuilder.googlizeAllInputs(INPUTS, this);
        this.mapOptions.zoom = this.mapOptions.zoom || 15;
        typeof this.mapOptions.center === 'string' && (delete this.mapOptions.center);
        this.zone.runOutsideAngular(() => {
            this.map = new google.maps.Map(this.el, this.mapOptions);
            this.map['mapObjectName'] = 'NguiMapComponent';
            if (!this.mapOptions.center) {
                this.setCenter();
            }
            // set google events listeners and emits to this outputs listeners
            this.nguiMap.setObjectEvents(OUTPUTS, this, 'map');
            this.map.addListener('idle', () => {
                if (!this.mapIdledOnce) {
                    this.mapIdledOnce = true;
                    setTimeout(() => {
                        this.mapReady$.emit(this.map);
                    });
                }
            });
            // update map when input changes
            debounceTime.call(this.inputChanges$, 1000)
                .subscribe((changes) => this.nguiMap.updateGoogleObject(this.map, changes));
            if (typeof window !== 'undefined' && ((window))['nguiMapRef']) {
                // expose map object for test and debugging on (<any>window)
                ((window))['nguiMapRef'].map = this.map;
            }
        });
    }
    /**
     * @return {?}
     */
    setCenter() {
        if (!this['center']) {
            this.geolocation.getCurrentPosition().subscribe(position => {
                let /** @type {?} */ latLng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
                this.map.setCenter(latLng);
            }, error => {
                console.error('ngui-map: Error finding the current position');
                this.map.setCenter(this.mapOptions['geoFallbackCenter'] || new google.maps.LatLng(0, 0));
            });
        }
        else if (typeof this['center'] === 'string') {
            this.geoCoder.geocode({ address: this['center'] }).subscribe(results => {
                this.map.setCenter(results[0].geometry.location);
            }, error => {
                this.map.setCenter(this.mapOptions['geoFallbackCenter'] || new google.maps.LatLng(0, 0));
            });
        }
    }
    /**
     * @param {?} id
     * @param {?} anchor
     * @return {?}
     */
    openInfoWindow(id, anchor) {
        this.infoWindows[id].open(anchor);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    closeInfoWindow(id) {
        // if infoWindow for id exists, close the infoWindow
        if (this.infoWindows[id])
            this.infoWindows[id].close();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.inputChanges$.complete();
        if (this.el && !this.initializeMapAfterDisplayed) {
            this.nguiMap.clearObjectEvents(OUTPUTS, this, 'map');
        }
        if (this.apiLoaderSub) {
            this.apiLoaderSub.unsubscribe();
        }
    }
    /**
     * @param {?} mapObjectName
     * @param {?} mapObject
     * @return {?}
     */
    addToMapObjectGroup(mapObjectName, mapObject) {
        let /** @type {?} */ groupName = toCamelCase(mapObjectName.toLowerCase()) + 's'; // e.g. markers
        this.map[groupName] = this.map[groupName] || [];
        this.map[groupName].push(mapObject);
    }
    /**
     * @param {?} mapObjectName
     * @param {?} mapObject
     * @return {?}
     */
    removeFromMapObjectGroup(mapObjectName, mapObject) {
        let /** @type {?} */ groupName = toCamelCase(mapObjectName.toLowerCase()) + 's'; // e.g. markers
        if (this.map && this.map[groupName]) {
            let /** @type {?} */ index = this.map[groupName].indexOf(mapObject);
            (index > -1) && this.map[groupName].splice(index, 1);
        }
    }
}
NguiMapComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngui-map',
                providers: [NguiMap, OptionBuilder, GeoCoder, NavigatorGeolocation],
                styles: [`
    ngui-map {display: block; height: 300px;}
    .google-map {width: 100%; height: 100%}
  `],
                inputs: INPUTS,
                outputs: OUTPUTS,
                encapsulation: ViewEncapsulation.None,
                template: `
    <div class="google-map"></div>
    <ng-content></ng-content>
  `,
            },] },
];
/**
 * @nocollapse
 */
NguiMapComponent.ctorParameters = () => [
    { type: OptionBuilder, },
    { type: ElementRef, },
    { type: NavigatorGeolocation, },
    { type: GeoCoder, },
    { type: NguiMap, },
    { type: NgMapApiLoader, },
    { type: NgZone, },
];
NguiMapComponent.propDecorators = {
    'mapReady$': [{ type: Output },],
};
function NguiMapComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    NguiMapComponent.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    NguiMapComponent.ctorParameters;
    /** @type {?} */
    NguiMapComponent.propDecorators;
    /** @type {?} */
    NguiMapComponent.prototype.backgroundColor;
    /** @type {?} */
    NguiMapComponent.prototype.center;
    /** @type {?} */
    NguiMapComponent.prototype.disableDefaultUI;
    /** @type {?} */
    NguiMapComponent.prototype.disableDoubleClickZoom;
    /** @type {?} */
    NguiMapComponent.prototype.draggable;
    /** @type {?} */
    NguiMapComponent.prototype.draggableCursor;
    /** @type {?} */
    NguiMapComponent.prototype.draggingCursor;
    /** @type {?} */
    NguiMapComponent.prototype.heading;
    /** @type {?} */
    NguiMapComponent.prototype.keyboardShortcuts;
    /** @type {?} */
    NguiMapComponent.prototype.mapMaker;
    /** @type {?} */
    NguiMapComponent.prototype.mapTypeControl;
    /** @type {?} */
    NguiMapComponent.prototype.mapTypeId;
    /** @type {?} */
    NguiMapComponent.prototype.maxZoom;
    /** @type {?} */
    NguiMapComponent.prototype.minZoom;
    /** @type {?} */
    NguiMapComponent.prototype.noClear;
    /** @type {?} */
    NguiMapComponent.prototype.overviewMapControl;
    /** @type {?} */
    NguiMapComponent.prototype.panControl;
    /** @type {?} */
    NguiMapComponent.prototype.panControlOptions;
    /** @type {?} */
    NguiMapComponent.prototype.rotateControl;
    /** @type {?} */
    NguiMapComponent.prototype.scaleControl;
    /** @type {?} */
    NguiMapComponent.prototype.scrollwheel;
    /** @type {?} */
    NguiMapComponent.prototype.streetView;
    /** @type {?} */
    NguiMapComponent.prototype.styles;
    /** @type {?} */
    NguiMapComponent.prototype.tilt;
    /** @type {?} */
    NguiMapComponent.prototype.zoom;
    /** @type {?} */
    NguiMapComponent.prototype.streetViewControl;
    /** @type {?} */
    NguiMapComponent.prototype.zoomControl;
    /** @type {?} */
    NguiMapComponent.prototype.zoomControlOptions;
    /** @type {?} */
    NguiMapComponent.prototype.mapTypeControlOptions;
    /** @type {?} */
    NguiMapComponent.prototype.overviewMapControlOptions;
    /** @type {?} */
    NguiMapComponent.prototype.rotateControlOptions;
    /** @type {?} */
    NguiMapComponent.prototype.scaleControlOptions;
    /** @type {?} */
    NguiMapComponent.prototype.streetViewControlOptions;
    /** @type {?} */
    NguiMapComponent.prototype.fullscreenControl;
    /** @type {?} */
    NguiMapComponent.prototype.fullscreenControlOptions;
    /** @type {?} */
    NguiMapComponent.prototype.options;
    /** @type {?} */
    NguiMapComponent.prototype.geoFallbackCenter;
    /** @type {?} */
    NguiMapComponent.prototype.bounds_changed;
    /** @type {?} */
    NguiMapComponent.prototype.center_changed;
    /** @type {?} */
    NguiMapComponent.prototype.click;
    /** @type {?} */
    NguiMapComponent.prototype.dblclick;
    /** @type {?} */
    NguiMapComponent.prototype.drag;
    /** @type {?} */
    NguiMapComponent.prototype.dragend;
    /** @type {?} */
    NguiMapComponent.prototype.dragstart;
    /** @type {?} */
    NguiMapComponent.prototype.heading_changed;
    /** @type {?} */
    NguiMapComponent.prototype.idle;
    /** @type {?} */
    NguiMapComponent.prototype.typeid_changed;
    /** @type {?} */
    NguiMapComponent.prototype.mousemove;
    /** @type {?} */
    NguiMapComponent.prototype.mouseout;
    /** @type {?} */
    NguiMapComponent.prototype.mouseover;
    /** @type {?} */
    NguiMapComponent.prototype.projection_changed;
    /** @type {?} */
    NguiMapComponent.prototype.resize;
    /** @type {?} */
    NguiMapComponent.prototype.rightclick;
    /** @type {?} */
    NguiMapComponent.prototype.tilesloaded;
    /** @type {?} */
    NguiMapComponent.prototype.tile_changed;
    /** @type {?} */
    NguiMapComponent.prototype.zoom_changed;
    /** @type {?} */
    NguiMapComponent.prototype.mapClick;
    /** @type {?} */
    NguiMapComponent.prototype.mapMouseover;
    /** @type {?} */
    NguiMapComponent.prototype.mapMouseout;
    /** @type {?} */
    NguiMapComponent.prototype.mapMousemove;
    /** @type {?} */
    NguiMapComponent.prototype.mapDrag;
    /** @type {?} */
    NguiMapComponent.prototype.mapDragend;
    /** @type {?} */
    NguiMapComponent.prototype.mapDragstart;
    /** @type {?} */
    NguiMapComponent.prototype.mapReady$;
    /** @type {?} */
    NguiMapComponent.prototype.el;
    /** @type {?} */
    NguiMapComponent.prototype.map;
    /** @type {?} */
    NguiMapComponent.prototype.mapOptions;
    /** @type {?} */
    NguiMapComponent.prototype.inputChanges$;
    /** @type {?} */
    NguiMapComponent.prototype.infoWindows;
    /** @type {?} */
    NguiMapComponent.prototype.mapIdledOnce;
    /** @type {?} */
    NguiMapComponent.prototype.initializeMapAfterDisplayed;
    /** @type {?} */
    NguiMapComponent.prototype.apiLoaderSub;
    /** @type {?} */
    NguiMapComponent.prototype.optionBuilder;
    /** @type {?} */
    NguiMapComponent.prototype.elementRef;
    /** @type {?} */
    NguiMapComponent.prototype.geolocation;
    /** @type {?} */
    NguiMapComponent.prototype.geoCoder;
    /** @type {?} */
    NguiMapComponent.prototype.nguiMap;
    /** @type {?} */
    NguiMapComponent.prototype.apiLoader;
    /** @type {?} */
    NguiMapComponent.prototype.zone;
}
//# sourceMappingURL=ngui-map.component.js.map