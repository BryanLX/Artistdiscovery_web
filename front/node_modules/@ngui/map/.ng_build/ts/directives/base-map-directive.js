import { EventEmitter, Output } from '@angular/core';
/**
 * @abstract
 */
export class BaseMapDirective {
    /**
     * @param {?} nguiMapComponent
     * @param {?} mapObjectName
     * @param {?} inputs
     * @param {?} outputs
     */
    constructor(nguiMapComponent, mapObjectName, inputs, outputs) {
        this.nguiMapComponent = nguiMapComponent;
        this.mapObjectName = mapObjectName;
        this.inputs = inputs;
        this.outputs = outputs;
        // this should be redefined on each childr directive
        this.initialized$ = new EventEmitter();
        this._subscriptions = [];
        this.nguiMap = this.nguiMapComponent['nguiMap'];
        this.optionBuilder = this.nguiMapComponent['optionBuilder'];
        // all outputs must be initialized
        this.outputs.forEach(output => this[output] = new EventEmitter());
        this.mapObjectName = mapObjectName;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.nguiMapComponent.mapIdledOnce) {
            this.initialize();
        }
        else {
            this.nguiMapComponent.mapReady$.subscribe(map => this.initialize());
        }
    }
    /**
     * @return {?}
     */
    initialize() {
        this.objectOptions = this.optionBuilder.googlizeAllInputs(this.inputs, this);
        // will be set after geocoded
        typeof this.objectOptions.position === 'string' && (delete this.objectOptions.position);
        typeof this.objectOptions.center === 'string' && (delete this.objectOptions.center);
        // noinspection TypeScriptUnresolvedFunction
        if (this.libraryName) {
            this.mapObject = new google.maps[this.libraryName][this.mapObjectName](this.objectOptions);
        }
        else {
            this.mapObject = new google.maps[this.mapObjectName](this.objectOptions);
        }
        this.mapObject.setMap(this.nguiMapComponent.map);
        this.mapObject['mapObjectName'] = this.mapObjectName;
        this.mapObject['nguiMapComponent'] = this.nguiMapComponent;
        // set google events listeners and emits to this outputs listeners
        this.nguiMap.setObjectEvents(this.outputs, this, 'mapObject');
        this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName, this.mapObject);
        this.initialized$.emit(this.mapObject);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.nguiMap.updateGoogleObject(this.mapObject, changes);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._subscriptions.map(subscription => subscription.unsubscribe());
        this.nguiMapComponent.removeFromMapObjectGroup(this.mapObjectName, this.mapObject);
        if (this.mapObject) {
            this.nguiMap.clearObjectEvents(this.outputs, this, 'mapObject');
        }
    }
}
BaseMapDirective.propDecorators = {
    'initialized$': [{ type: Output },],
};
function BaseMapDirective_tsickle_Closure_declarations() {
    /** @type {?} */
    BaseMapDirective.propDecorators;
    /** @type {?} */
    BaseMapDirective.prototype.initialized$;
    /** @type {?} */
    BaseMapDirective.prototype.mapObject;
    /** @type {?} */
    BaseMapDirective.prototype.objectOptions;
    /** @type {?} */
    BaseMapDirective.prototype.nguiMap;
    /** @type {?} */
    BaseMapDirective.prototype.optionBuilder;
    /** @type {?} */
    BaseMapDirective.prototype.libraryName;
    /** @type {?} */
    BaseMapDirective.prototype._subscriptions;
    /** @type {?} */
    BaseMapDirective.prototype.nguiMapComponent;
    /** @type {?} */
    BaseMapDirective.prototype.mapObjectName;
    /** @type {?} */
    BaseMapDirective.prototype.inputs;
    /** @type {?} */
    BaseMapDirective.prototype.outputs;
}
//# sourceMappingURL=base-map-directive.js.map